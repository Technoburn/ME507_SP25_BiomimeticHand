
Term_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf68  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000082c  0800d148  0800d148  0000e148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d974  0800d974  0000f060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d974  0800d974  0000e974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d97c  0800d97c  0000f060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d97c  0800d97c  0000e97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800d984  0800d984  0000e984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800d98c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000988  20000060  0800d9ec  0000f060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009e8  0800d9ec  0000f9e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000291c4  00000000  00000000  0000f090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048fd  00000000  00000000  00038254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b50  00000000  00000000  0003cb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001550  00000000  00000000  0003e6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000292bf  00000000  00000000  0003fbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023cca  00000000  00000000  00068eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106c56  00000000  00000000  0008cb81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001937d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009618  00000000  00000000  0019381c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0019ce34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d130 	.word	0x0800d130

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	0800d130 	.word	0x0800d130

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_dmul>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002de:	bf1d      	ittte	ne
 80002e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002e4:	ea94 0f0c 	teqne	r4, ip
 80002e8:	ea95 0f0c 	teqne	r5, ip
 80002ec:	f000 f8de 	bleq	80004ac <__aeabi_dmul+0x1dc>
 80002f0:	442c      	add	r4, r5
 80002f2:	ea81 0603 	eor.w	r6, r1, r3
 80002f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000302:	bf18      	it	ne
 8000304:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000308:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800030c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000310:	d038      	beq.n	8000384 <__aeabi_dmul+0xb4>
 8000312:	fba0 ce02 	umull	ip, lr, r0, r2
 8000316:	f04f 0500 	mov.w	r5, #0
 800031a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800031e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000322:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000326:	f04f 0600 	mov.w	r6, #0
 800032a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800032e:	f09c 0f00 	teq	ip, #0
 8000332:	bf18      	it	ne
 8000334:	f04e 0e01 	orrne.w	lr, lr, #1
 8000338:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800033c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000340:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000344:	d204      	bcs.n	8000350 <__aeabi_dmul+0x80>
 8000346:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800034a:	416d      	adcs	r5, r5
 800034c:	eb46 0606 	adc.w	r6, r6, r6
 8000350:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000354:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000358:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800035c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000360:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000364:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000368:	bf88      	it	hi
 800036a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800036e:	d81e      	bhi.n	80003ae <__aeabi_dmul+0xde>
 8000370:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000374:	bf08      	it	eq
 8000376:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800037a:	f150 0000 	adcs.w	r0, r0, #0
 800037e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000388:	ea46 0101 	orr.w	r1, r6, r1
 800038c:	ea40 0002 	orr.w	r0, r0, r2
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000398:	bfc2      	ittt	gt
 800039a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800039e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003a2:	bd70      	popgt	{r4, r5, r6, pc}
 80003a4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80003a8:	f04f 0e00 	mov.w	lr, #0
 80003ac:	3c01      	subs	r4, #1
 80003ae:	f300 80ab 	bgt.w	8000508 <__aeabi_dmul+0x238>
 80003b2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003b6:	bfde      	ittt	le
 80003b8:	2000      	movle	r0, #0
 80003ba:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003be:	bd70      	pople	{r4, r5, r6, pc}
 80003c0:	f1c4 0400 	rsb	r4, r4, #0
 80003c4:	3c20      	subs	r4, #32
 80003c6:	da35      	bge.n	8000434 <__aeabi_dmul+0x164>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc1b      	bgt.n	8000404 <__aeabi_dmul+0x134>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0520 	rsb	r5, r4, #32
 80003d4:	fa00 f305 	lsl.w	r3, r0, r5
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f205 	lsl.w	r2, r1, r5
 80003e0:	ea40 0002 	orr.w	r0, r0, r2
 80003e4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f0:	fa21 f604 	lsr.w	r6, r1, r4
 80003f4:	eb42 0106 	adc.w	r1, r2, r6
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 040c 	rsb	r4, r4, #12
 8000408:	f1c4 0520 	rsb	r5, r4, #32
 800040c:	fa00 f304 	lsl.w	r3, r0, r4
 8000410:	fa20 f005 	lsr.w	r0, r0, r5
 8000414:	fa01 f204 	lsl.w	r2, r1, r4
 8000418:	ea40 0002 	orr.w	r0, r0, r2
 800041c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000424:	f141 0100 	adc.w	r1, r1, #0
 8000428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800042c:	bf08      	it	eq
 800042e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f1c4 0520 	rsb	r5, r4, #32
 8000438:	fa00 f205 	lsl.w	r2, r0, r5
 800043c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000440:	fa20 f304 	lsr.w	r3, r0, r4
 8000444:	fa01 f205 	lsl.w	r2, r1, r5
 8000448:	ea43 0302 	orr.w	r3, r3, r2
 800044c:	fa21 f004 	lsr.w	r0, r1, r4
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	fa21 f204 	lsr.w	r2, r1, r4
 8000458:	ea20 0002 	bic.w	r0, r0, r2
 800045c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000460:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000464:	bf08      	it	eq
 8000466:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800046a:	bd70      	pop	{r4, r5, r6, pc}
 800046c:	f094 0f00 	teq	r4, #0
 8000470:	d10f      	bne.n	8000492 <__aeabi_dmul+0x1c2>
 8000472:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000476:	0040      	lsls	r0, r0, #1
 8000478:	eb41 0101 	adc.w	r1, r1, r1
 800047c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3c01      	subeq	r4, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1a6>
 8000486:	ea41 0106 	orr.w	r1, r1, r6
 800048a:	f095 0f00 	teq	r5, #0
 800048e:	bf18      	it	ne
 8000490:	4770      	bxne	lr
 8000492:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000496:	0052      	lsls	r2, r2, #1
 8000498:	eb43 0303 	adc.w	r3, r3, r3
 800049c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80004a0:	bf08      	it	eq
 80004a2:	3d01      	subeq	r5, #1
 80004a4:	d0f7      	beq.n	8000496 <__aeabi_dmul+0x1c6>
 80004a6:	ea43 0306 	orr.w	r3, r3, r6
 80004aa:	4770      	bx	lr
 80004ac:	ea94 0f0c 	teq	r4, ip
 80004b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004b4:	bf18      	it	ne
 80004b6:	ea95 0f0c 	teqne	r5, ip
 80004ba:	d00c      	beq.n	80004d6 <__aeabi_dmul+0x206>
 80004bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004c0:	bf18      	it	ne
 80004c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c6:	d1d1      	bne.n	800046c <__aeabi_dmul+0x19c>
 80004c8:	ea81 0103 	eor.w	r1, r1, r3
 80004cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	f04f 0000 	mov.w	r0, #0
 80004d4:	bd70      	pop	{r4, r5, r6, pc}
 80004d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004da:	bf06      	itte	eq
 80004dc:	4610      	moveq	r0, r2
 80004de:	4619      	moveq	r1, r3
 80004e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004e4:	d019      	beq.n	800051a <__aeabi_dmul+0x24a>
 80004e6:	ea94 0f0c 	teq	r4, ip
 80004ea:	d102      	bne.n	80004f2 <__aeabi_dmul+0x222>
 80004ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004f0:	d113      	bne.n	800051a <__aeabi_dmul+0x24a>
 80004f2:	ea95 0f0c 	teq	r5, ip
 80004f6:	d105      	bne.n	8000504 <__aeabi_dmul+0x234>
 80004f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004fc:	bf1c      	itt	ne
 80004fe:	4610      	movne	r0, r2
 8000500:	4619      	movne	r1, r3
 8000502:	d10a      	bne.n	800051a <__aeabi_dmul+0x24a>
 8000504:	ea81 0103 	eor.w	r1, r1, r3
 8000508:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800050c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd70      	pop	{r4, r5, r6, pc}
 800051a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800051e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000522:	bd70      	pop	{r4, r5, r6, pc}

08000524 <__aeabi_drsub>:
 8000524:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000528:	e002      	b.n	8000530 <__adddf3>
 800052a:	bf00      	nop

0800052c <__aeabi_dsub>:
 800052c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000530 <__adddf3>:
 8000530:	b530      	push	{r4, r5, lr}
 8000532:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000536:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800053a:	ea94 0f05 	teq	r4, r5
 800053e:	bf08      	it	eq
 8000540:	ea90 0f02 	teqeq	r0, r2
 8000544:	bf1f      	itttt	ne
 8000546:	ea54 0c00 	orrsne.w	ip, r4, r0
 800054a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800054e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000552:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000556:	f000 80e2 	beq.w	800071e <__adddf3+0x1ee>
 800055a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800055e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000562:	bfb8      	it	lt
 8000564:	426d      	neglt	r5, r5
 8000566:	dd0c      	ble.n	8000582 <__adddf3+0x52>
 8000568:	442c      	add	r4, r5
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	ea82 0000 	eor.w	r0, r2, r0
 8000576:	ea83 0101 	eor.w	r1, r3, r1
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	2d36      	cmp	r5, #54	@ 0x36
 8000584:	bf88      	it	hi
 8000586:	bd30      	pophi	{r4, r5, pc}
 8000588:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800058c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000590:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000594:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000598:	d002      	beq.n	80005a0 <__adddf3+0x70>
 800059a:	4240      	negs	r0, r0
 800059c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80005a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005ac:	d002      	beq.n	80005b4 <__adddf3+0x84>
 80005ae:	4252      	negs	r2, r2
 80005b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005b4:	ea94 0f05 	teq	r4, r5
 80005b8:	f000 80a7 	beq.w	800070a <__adddf3+0x1da>
 80005bc:	f1a4 0401 	sub.w	r4, r4, #1
 80005c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005c4:	db0d      	blt.n	80005e2 <__adddf3+0xb2>
 80005c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ca:	fa22 f205 	lsr.w	r2, r2, r5
 80005ce:	1880      	adds	r0, r0, r2
 80005d0:	f141 0100 	adc.w	r1, r1, #0
 80005d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005d8:	1880      	adds	r0, r0, r2
 80005da:	fa43 f305 	asr.w	r3, r3, r5
 80005de:	4159      	adcs	r1, r3
 80005e0:	e00e      	b.n	8000600 <__adddf3+0xd0>
 80005e2:	f1a5 0520 	sub.w	r5, r5, #32
 80005e6:	f10e 0e20 	add.w	lr, lr, #32
 80005ea:	2a01      	cmp	r2, #1
 80005ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005f0:	bf28      	it	cs
 80005f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005f6:	fa43 f305 	asr.w	r3, r3, r5
 80005fa:	18c0      	adds	r0, r0, r3
 80005fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000604:	d507      	bpl.n	8000616 <__adddf3+0xe6>
 8000606:	f04f 0e00 	mov.w	lr, #0
 800060a:	f1dc 0c00 	rsbs	ip, ip, #0
 800060e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000612:	eb6e 0101 	sbc.w	r1, lr, r1
 8000616:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800061a:	d31b      	bcc.n	8000654 <__adddf3+0x124>
 800061c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000620:	d30c      	bcc.n	800063c <__adddf3+0x10c>
 8000622:	0849      	lsrs	r1, r1, #1
 8000624:	ea5f 0030 	movs.w	r0, r0, rrx
 8000628:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800062c:	f104 0401 	add.w	r4, r4, #1
 8000630:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000634:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000638:	f080 809a 	bcs.w	8000770 <__adddf3+0x240>
 800063c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000640:	bf08      	it	eq
 8000642:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000646:	f150 0000 	adcs.w	r0, r0, #0
 800064a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064e:	ea41 0105 	orr.w	r1, r1, r5
 8000652:	bd30      	pop	{r4, r5, pc}
 8000654:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000658:	4140      	adcs	r0, r0
 800065a:	eb41 0101 	adc.w	r1, r1, r1
 800065e:	3c01      	subs	r4, #1
 8000660:	bf28      	it	cs
 8000662:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000666:	d2e9      	bcs.n	800063c <__adddf3+0x10c>
 8000668:	f091 0f00 	teq	r1, #0
 800066c:	bf04      	itt	eq
 800066e:	4601      	moveq	r1, r0
 8000670:	2000      	moveq	r0, #0
 8000672:	fab1 f381 	clz	r3, r1
 8000676:	bf08      	it	eq
 8000678:	3320      	addeq	r3, #32
 800067a:	f1a3 030b 	sub.w	r3, r3, #11
 800067e:	f1b3 0220 	subs.w	r2, r3, #32
 8000682:	da0c      	bge.n	800069e <__adddf3+0x16e>
 8000684:	320c      	adds	r2, #12
 8000686:	dd08      	ble.n	800069a <__adddf3+0x16a>
 8000688:	f102 0c14 	add.w	ip, r2, #20
 800068c:	f1c2 020c 	rsb	r2, r2, #12
 8000690:	fa01 f00c 	lsl.w	r0, r1, ip
 8000694:	fa21 f102 	lsr.w	r1, r1, r2
 8000698:	e00c      	b.n	80006b4 <__adddf3+0x184>
 800069a:	f102 0214 	add.w	r2, r2, #20
 800069e:	bfd8      	it	le
 80006a0:	f1c2 0c20 	rsble	ip, r2, #32
 80006a4:	fa01 f102 	lsl.w	r1, r1, r2
 80006a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006ac:	bfdc      	itt	le
 80006ae:	ea41 010c 	orrle.w	r1, r1, ip
 80006b2:	4090      	lslle	r0, r2
 80006b4:	1ae4      	subs	r4, r4, r3
 80006b6:	bfa2      	ittt	ge
 80006b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006bc:	4329      	orrge	r1, r5
 80006be:	bd30      	popge	{r4, r5, pc}
 80006c0:	ea6f 0404 	mvn.w	r4, r4
 80006c4:	3c1f      	subs	r4, #31
 80006c6:	da1c      	bge.n	8000702 <__adddf3+0x1d2>
 80006c8:	340c      	adds	r4, #12
 80006ca:	dc0e      	bgt.n	80006ea <__adddf3+0x1ba>
 80006cc:	f104 0414 	add.w	r4, r4, #20
 80006d0:	f1c4 0220 	rsb	r2, r4, #32
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f302 	lsl.w	r3, r1, r2
 80006dc:	ea40 0003 	orr.w	r0, r0, r3
 80006e0:	fa21 f304 	lsr.w	r3, r1, r4
 80006e4:	ea45 0103 	orr.w	r1, r5, r3
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f1c4 040c 	rsb	r4, r4, #12
 80006ee:	f1c4 0220 	rsb	r2, r4, #32
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 f304 	lsl.w	r3, r1, r4
 80006fa:	ea40 0003 	orr.w	r0, r0, r3
 80006fe:	4629      	mov	r1, r5
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	fa21 f004 	lsr.w	r0, r1, r4
 8000706:	4629      	mov	r1, r5
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	f094 0f00 	teq	r4, #0
 800070e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000712:	bf06      	itte	eq
 8000714:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000718:	3401      	addeq	r4, #1
 800071a:	3d01      	subne	r5, #1
 800071c:	e74e      	b.n	80005bc <__adddf3+0x8c>
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf18      	it	ne
 8000724:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000728:	d029      	beq.n	800077e <__adddf3+0x24e>
 800072a:	ea94 0f05 	teq	r4, r5
 800072e:	bf08      	it	eq
 8000730:	ea90 0f02 	teqeq	r0, r2
 8000734:	d005      	beq.n	8000742 <__adddf3+0x212>
 8000736:	ea54 0c00 	orrs.w	ip, r4, r0
 800073a:	bf04      	itt	eq
 800073c:	4619      	moveq	r1, r3
 800073e:	4610      	moveq	r0, r2
 8000740:	bd30      	pop	{r4, r5, pc}
 8000742:	ea91 0f03 	teq	r1, r3
 8000746:	bf1e      	ittt	ne
 8000748:	2100      	movne	r1, #0
 800074a:	2000      	movne	r0, #0
 800074c:	bd30      	popne	{r4, r5, pc}
 800074e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000752:	d105      	bne.n	8000760 <__adddf3+0x230>
 8000754:	0040      	lsls	r0, r0, #1
 8000756:	4149      	adcs	r1, r1
 8000758:	bf28      	it	cs
 800075a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800075e:	bd30      	pop	{r4, r5, pc}
 8000760:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000764:	bf3c      	itt	cc
 8000766:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800076a:	bd30      	popcc	{r4, r5, pc}
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000774:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd30      	pop	{r4, r5, pc}
 800077e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000782:	bf1a      	itte	ne
 8000784:	4619      	movne	r1, r3
 8000786:	4610      	movne	r0, r2
 8000788:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800078c:	bf1c      	itt	ne
 800078e:	460b      	movne	r3, r1
 8000790:	4602      	movne	r2, r0
 8000792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000796:	bf06      	itte	eq
 8000798:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800079c:	ea91 0f03 	teqeq	r1, r3
 80007a0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80007a4:	bd30      	pop	{r4, r5, pc}
 80007a6:	bf00      	nop

080007a8 <__aeabi_ui2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f04f 0500 	mov.w	r5, #0
 80007c0:	f04f 0100 	mov.w	r1, #0
 80007c4:	e750      	b.n	8000668 <__adddf3+0x138>
 80007c6:	bf00      	nop

080007c8 <__aeabi_i2d>:
 80007c8:	f090 0f00 	teq	r0, #0
 80007cc:	bf04      	itt	eq
 80007ce:	2100      	moveq	r1, #0
 80007d0:	4770      	bxeq	lr
 80007d2:	b530      	push	{r4, r5, lr}
 80007d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007d8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007dc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	f04f 0100 	mov.w	r1, #0
 80007e8:	e73e      	b.n	8000668 <__adddf3+0x138>
 80007ea:	bf00      	nop

080007ec <__aeabi_f2d>:
 80007ec:	0042      	lsls	r2, r0, #1
 80007ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007fa:	bf1f      	itttt	ne
 80007fc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000800:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000804:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000808:	4770      	bxne	lr
 800080a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800080e:	bf08      	it	eq
 8000810:	4770      	bxeq	lr
 8000812:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000816:	bf04      	itt	eq
 8000818:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800081c:	4770      	bxeq	lr
 800081e:	b530      	push	{r4, r5, lr}
 8000820:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000824:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000828:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	e71c      	b.n	8000668 <__adddf3+0x138>
 800082e:	bf00      	nop

08000830 <__aeabi_ul2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f04f 0500 	mov.w	r5, #0
 800083e:	e00a      	b.n	8000856 <__aeabi_l2d+0x16>

08000840 <__aeabi_l2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800084e:	d502      	bpl.n	8000856 <__aeabi_l2d+0x16>
 8000850:	4240      	negs	r0, r0
 8000852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000856:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800085a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800085e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000862:	f43f aed8 	beq.w	8000616 <__adddf3+0xe6>
 8000866:	f04f 0203 	mov.w	r2, #3
 800086a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800086e:	bf18      	it	ne
 8000870:	3203      	addne	r2, #3
 8000872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000876:	bf18      	it	ne
 8000878:	3203      	addne	r2, #3
 800087a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800087e:	f1c2 0320 	rsb	r3, r2, #32
 8000882:	fa00 fc03 	lsl.w	ip, r0, r3
 8000886:	fa20 f002 	lsr.w	r0, r0, r2
 800088a:	fa01 fe03 	lsl.w	lr, r1, r3
 800088e:	ea40 000e 	orr.w	r0, r0, lr
 8000892:	fa21 f102 	lsr.w	r1, r1, r2
 8000896:	4414      	add	r4, r2
 8000898:	e6bd      	b.n	8000616 <__adddf3+0xe6>
 800089a:	bf00      	nop

0800089c <__gedf2>:
 800089c:	f04f 3cff 	mov.w	ip, #4294967295
 80008a0:	e006      	b.n	80008b0 <__cmpdf2+0x4>
 80008a2:	bf00      	nop

080008a4 <__ledf2>:
 80008a4:	f04f 0c01 	mov.w	ip, #1
 80008a8:	e002      	b.n	80008b0 <__cmpdf2+0x4>
 80008aa:	bf00      	nop

080008ac <__cmpdf2>:
 80008ac:	f04f 0c01 	mov.w	ip, #1
 80008b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c0:	bf18      	it	ne
 80008c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008c6:	d01b      	beq.n	8000900 <__cmpdf2+0x54>
 80008c8:	b001      	add	sp, #4
 80008ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008ce:	bf0c      	ite	eq
 80008d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008d4:	ea91 0f03 	teqne	r1, r3
 80008d8:	bf02      	ittt	eq
 80008da:	ea90 0f02 	teqeq	r0, r2
 80008de:	2000      	moveq	r0, #0
 80008e0:	4770      	bxeq	lr
 80008e2:	f110 0f00 	cmn.w	r0, #0
 80008e6:	ea91 0f03 	teq	r1, r3
 80008ea:	bf58      	it	pl
 80008ec:	4299      	cmppl	r1, r3
 80008ee:	bf08      	it	eq
 80008f0:	4290      	cmpeq	r0, r2
 80008f2:	bf2c      	ite	cs
 80008f4:	17d8      	asrcs	r0, r3, #31
 80008f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008fa:	f040 0001 	orr.w	r0, r0, #1
 80008fe:	4770      	bx	lr
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	d102      	bne.n	8000910 <__cmpdf2+0x64>
 800090a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800090e:	d107      	bne.n	8000920 <__cmpdf2+0x74>
 8000910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	d1d6      	bne.n	80008c8 <__cmpdf2+0x1c>
 800091a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800091e:	d0d3      	beq.n	80008c8 <__cmpdf2+0x1c>
 8000920:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop

08000928 <__aeabi_cdrcmple>:
 8000928:	4684      	mov	ip, r0
 800092a:	4610      	mov	r0, r2
 800092c:	4662      	mov	r2, ip
 800092e:	468c      	mov	ip, r1
 8000930:	4619      	mov	r1, r3
 8000932:	4663      	mov	r3, ip
 8000934:	e000      	b.n	8000938 <__aeabi_cdcmpeq>
 8000936:	bf00      	nop

08000938 <__aeabi_cdcmpeq>:
 8000938:	b501      	push	{r0, lr}
 800093a:	f7ff ffb7 	bl	80008ac <__cmpdf2>
 800093e:	2800      	cmp	r0, #0
 8000940:	bf48      	it	mi
 8000942:	f110 0f00 	cmnmi.w	r0, #0
 8000946:	bd01      	pop	{r0, pc}

08000948 <__aeabi_dcmpeq>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff fff4 	bl	8000938 <__aeabi_cdcmpeq>
 8000950:	bf0c      	ite	eq
 8000952:	2001      	moveq	r0, #1
 8000954:	2000      	movne	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_dcmplt>:
 800095c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000960:	f7ff ffea 	bl	8000938 <__aeabi_cdcmpeq>
 8000964:	bf34      	ite	cc
 8000966:	2001      	movcc	r0, #1
 8000968:	2000      	movcs	r0, #0
 800096a:	f85d fb08 	ldr.w	pc, [sp], #8
 800096e:	bf00      	nop

08000970 <__aeabi_dcmple>:
 8000970:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000974:	f7ff ffe0 	bl	8000938 <__aeabi_cdcmpeq>
 8000978:	bf94      	ite	ls
 800097a:	2001      	movls	r0, #1
 800097c:	2000      	movhi	r0, #0
 800097e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000982:	bf00      	nop

08000984 <__aeabi_dcmpge>:
 8000984:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000988:	f7ff ffce 	bl	8000928 <__aeabi_cdrcmple>
 800098c:	bf94      	ite	ls
 800098e:	2001      	movls	r0, #1
 8000990:	2000      	movhi	r0, #0
 8000992:	f85d fb08 	ldr.w	pc, [sp], #8
 8000996:	bf00      	nop

08000998 <__aeabi_dcmpgt>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff ffc4 	bl	8000928 <__aeabi_cdrcmple>
 80009a0:	bf34      	ite	cc
 80009a2:	2001      	movcc	r0, #1
 80009a4:	2000      	movcs	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_uldivmod>:
 80009ac:	b953      	cbnz	r3, 80009c4 <__aeabi_uldivmod+0x18>
 80009ae:	b94a      	cbnz	r2, 80009c4 <__aeabi_uldivmod+0x18>
 80009b0:	2900      	cmp	r1, #0
 80009b2:	bf08      	it	eq
 80009b4:	2800      	cmpeq	r0, #0
 80009b6:	bf1c      	itt	ne
 80009b8:	f04f 31ff 	movne.w	r1, #4294967295
 80009bc:	f04f 30ff 	movne.w	r0, #4294967295
 80009c0:	f000 b988 	b.w	8000cd4 <__aeabi_idiv0>
 80009c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009cc:	f000 f806 	bl	80009dc <__udivmoddi4>
 80009d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d8:	b004      	add	sp, #16
 80009da:	4770      	bx	lr

080009dc <__udivmoddi4>:
 80009dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e0:	9d08      	ldr	r5, [sp, #32]
 80009e2:	468e      	mov	lr, r1
 80009e4:	4604      	mov	r4, r0
 80009e6:	4688      	mov	r8, r1
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d14a      	bne.n	8000a82 <__udivmoddi4+0xa6>
 80009ec:	428a      	cmp	r2, r1
 80009ee:	4617      	mov	r7, r2
 80009f0:	d962      	bls.n	8000ab8 <__udivmoddi4+0xdc>
 80009f2:	fab2 f682 	clz	r6, r2
 80009f6:	b14e      	cbz	r6, 8000a0c <__udivmoddi4+0x30>
 80009f8:	f1c6 0320 	rsb	r3, r6, #32
 80009fc:	fa01 f806 	lsl.w	r8, r1, r6
 8000a00:	fa20 f303 	lsr.w	r3, r0, r3
 8000a04:	40b7      	lsls	r7, r6
 8000a06:	ea43 0808 	orr.w	r8, r3, r8
 8000a0a:	40b4      	lsls	r4, r6
 8000a0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a10:	fa1f fc87 	uxth.w	ip, r7
 8000a14:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a18:	0c23      	lsrs	r3, r4, #16
 8000a1a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a22:	fb01 f20c 	mul.w	r2, r1, ip
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d909      	bls.n	8000a3e <__udivmoddi4+0x62>
 8000a2a:	18fb      	adds	r3, r7, r3
 8000a2c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a30:	f080 80ea 	bcs.w	8000c08 <__udivmoddi4+0x22c>
 8000a34:	429a      	cmp	r2, r3
 8000a36:	f240 80e7 	bls.w	8000c08 <__udivmoddi4+0x22c>
 8000a3a:	3902      	subs	r1, #2
 8000a3c:	443b      	add	r3, r7
 8000a3e:	1a9a      	subs	r2, r3, r2
 8000a40:	b2a3      	uxth	r3, r4
 8000a42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a4e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a52:	459c      	cmp	ip, r3
 8000a54:	d909      	bls.n	8000a6a <__udivmoddi4+0x8e>
 8000a56:	18fb      	adds	r3, r7, r3
 8000a58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a5c:	f080 80d6 	bcs.w	8000c0c <__udivmoddi4+0x230>
 8000a60:	459c      	cmp	ip, r3
 8000a62:	f240 80d3 	bls.w	8000c0c <__udivmoddi4+0x230>
 8000a66:	443b      	add	r3, r7
 8000a68:	3802      	subs	r0, #2
 8000a6a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a6e:	eba3 030c 	sub.w	r3, r3, ip
 8000a72:	2100      	movs	r1, #0
 8000a74:	b11d      	cbz	r5, 8000a7e <__udivmoddi4+0xa2>
 8000a76:	40f3      	lsrs	r3, r6
 8000a78:	2200      	movs	r2, #0
 8000a7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a82:	428b      	cmp	r3, r1
 8000a84:	d905      	bls.n	8000a92 <__udivmoddi4+0xb6>
 8000a86:	b10d      	cbz	r5, 8000a8c <__udivmoddi4+0xb0>
 8000a88:	e9c5 0100 	strd	r0, r1, [r5]
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4608      	mov	r0, r1
 8000a90:	e7f5      	b.n	8000a7e <__udivmoddi4+0xa2>
 8000a92:	fab3 f183 	clz	r1, r3
 8000a96:	2900      	cmp	r1, #0
 8000a98:	d146      	bne.n	8000b28 <__udivmoddi4+0x14c>
 8000a9a:	4573      	cmp	r3, lr
 8000a9c:	d302      	bcc.n	8000aa4 <__udivmoddi4+0xc8>
 8000a9e:	4282      	cmp	r2, r0
 8000aa0:	f200 8105 	bhi.w	8000cae <__udivmoddi4+0x2d2>
 8000aa4:	1a84      	subs	r4, r0, r2
 8000aa6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000aaa:	2001      	movs	r0, #1
 8000aac:	4690      	mov	r8, r2
 8000aae:	2d00      	cmp	r5, #0
 8000ab0:	d0e5      	beq.n	8000a7e <__udivmoddi4+0xa2>
 8000ab2:	e9c5 4800 	strd	r4, r8, [r5]
 8000ab6:	e7e2      	b.n	8000a7e <__udivmoddi4+0xa2>
 8000ab8:	2a00      	cmp	r2, #0
 8000aba:	f000 8090 	beq.w	8000bde <__udivmoddi4+0x202>
 8000abe:	fab2 f682 	clz	r6, r2
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	f040 80a4 	bne.w	8000c10 <__udivmoddi4+0x234>
 8000ac8:	1a8a      	subs	r2, r1, r2
 8000aca:	0c03      	lsrs	r3, r0, #16
 8000acc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ad0:	b280      	uxth	r0, r0
 8000ad2:	b2bc      	uxth	r4, r7
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ada:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ae2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d907      	bls.n	8000afa <__udivmoddi4+0x11e>
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000af0:	d202      	bcs.n	8000af8 <__udivmoddi4+0x11c>
 8000af2:	429a      	cmp	r2, r3
 8000af4:	f200 80e0 	bhi.w	8000cb8 <__udivmoddi4+0x2dc>
 8000af8:	46c4      	mov	ip, r8
 8000afa:	1a9b      	subs	r3, r3, r2
 8000afc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b00:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b04:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b08:	fb02 f404 	mul.w	r4, r2, r4
 8000b0c:	429c      	cmp	r4, r3
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0x144>
 8000b10:	18fb      	adds	r3, r7, r3
 8000b12:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x142>
 8000b18:	429c      	cmp	r4, r3
 8000b1a:	f200 80ca 	bhi.w	8000cb2 <__udivmoddi4+0x2d6>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	1b1b      	subs	r3, r3, r4
 8000b22:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b26:	e7a5      	b.n	8000a74 <__udivmoddi4+0x98>
 8000b28:	f1c1 0620 	rsb	r6, r1, #32
 8000b2c:	408b      	lsls	r3, r1
 8000b2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000b32:	431f      	orrs	r7, r3
 8000b34:	fa0e f401 	lsl.w	r4, lr, r1
 8000b38:	fa20 f306 	lsr.w	r3, r0, r6
 8000b3c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b40:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b44:	4323      	orrs	r3, r4
 8000b46:	fa00 f801 	lsl.w	r8, r0, r1
 8000b4a:	fa1f fc87 	uxth.w	ip, r7
 8000b4e:	fbbe f0f9 	udiv	r0, lr, r9
 8000b52:	0c1c      	lsrs	r4, r3, #16
 8000b54:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b58:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b5c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	fa02 f201 	lsl.w	r2, r2, r1
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x1a0>
 8000b68:	193c      	adds	r4, r7, r4
 8000b6a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b6e:	f080 809c 	bcs.w	8000caa <__udivmoddi4+0x2ce>
 8000b72:	45a6      	cmp	lr, r4
 8000b74:	f240 8099 	bls.w	8000caa <__udivmoddi4+0x2ce>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	fa1f fe83 	uxth.w	lr, r3
 8000b84:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b88:	fb09 4413 	mls	r4, r9, r3, r4
 8000b8c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b90:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b94:	45a4      	cmp	ip, r4
 8000b96:	d908      	bls.n	8000baa <__udivmoddi4+0x1ce>
 8000b98:	193c      	adds	r4, r7, r4
 8000b9a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b9e:	f080 8082 	bcs.w	8000ca6 <__udivmoddi4+0x2ca>
 8000ba2:	45a4      	cmp	ip, r4
 8000ba4:	d97f      	bls.n	8000ca6 <__udivmoddi4+0x2ca>
 8000ba6:	3b02      	subs	r3, #2
 8000ba8:	443c      	add	r4, r7
 8000baa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bae:	eba4 040c 	sub.w	r4, r4, ip
 8000bb2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bb6:	4564      	cmp	r4, ip
 8000bb8:	4673      	mov	r3, lr
 8000bba:	46e1      	mov	r9, ip
 8000bbc:	d362      	bcc.n	8000c84 <__udivmoddi4+0x2a8>
 8000bbe:	d05f      	beq.n	8000c80 <__udivmoddi4+0x2a4>
 8000bc0:	b15d      	cbz	r5, 8000bda <__udivmoddi4+0x1fe>
 8000bc2:	ebb8 0203 	subs.w	r2, r8, r3
 8000bc6:	eb64 0409 	sbc.w	r4, r4, r9
 8000bca:	fa04 f606 	lsl.w	r6, r4, r6
 8000bce:	fa22 f301 	lsr.w	r3, r2, r1
 8000bd2:	431e      	orrs	r6, r3
 8000bd4:	40cc      	lsrs	r4, r1
 8000bd6:	e9c5 6400 	strd	r6, r4, [r5]
 8000bda:	2100      	movs	r1, #0
 8000bdc:	e74f      	b.n	8000a7e <__udivmoddi4+0xa2>
 8000bde:	fbb1 fcf2 	udiv	ip, r1, r2
 8000be2:	0c01      	lsrs	r1, r0, #16
 8000be4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000be8:	b280      	uxth	r0, r0
 8000bea:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000bee:	463b      	mov	r3, r7
 8000bf0:	4638      	mov	r0, r7
 8000bf2:	463c      	mov	r4, r7
 8000bf4:	46b8      	mov	r8, r7
 8000bf6:	46be      	mov	lr, r7
 8000bf8:	2620      	movs	r6, #32
 8000bfa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000bfe:	eba2 0208 	sub.w	r2, r2, r8
 8000c02:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c06:	e766      	b.n	8000ad6 <__udivmoddi4+0xfa>
 8000c08:	4601      	mov	r1, r0
 8000c0a:	e718      	b.n	8000a3e <__udivmoddi4+0x62>
 8000c0c:	4610      	mov	r0, r2
 8000c0e:	e72c      	b.n	8000a6a <__udivmoddi4+0x8e>
 8000c10:	f1c6 0220 	rsb	r2, r6, #32
 8000c14:	fa2e f302 	lsr.w	r3, lr, r2
 8000c18:	40b7      	lsls	r7, r6
 8000c1a:	40b1      	lsls	r1, r6
 8000c1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c24:	430a      	orrs	r2, r1
 8000c26:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c2a:	b2bc      	uxth	r4, r7
 8000c2c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c30:	0c11      	lsrs	r1, r2, #16
 8000c32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c36:	fb08 f904 	mul.w	r9, r8, r4
 8000c3a:	40b0      	lsls	r0, r6
 8000c3c:	4589      	cmp	r9, r1
 8000c3e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c42:	b280      	uxth	r0, r0
 8000c44:	d93e      	bls.n	8000cc4 <__udivmoddi4+0x2e8>
 8000c46:	1879      	adds	r1, r7, r1
 8000c48:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c4c:	d201      	bcs.n	8000c52 <__udivmoddi4+0x276>
 8000c4e:	4589      	cmp	r9, r1
 8000c50:	d81f      	bhi.n	8000c92 <__udivmoddi4+0x2b6>
 8000c52:	eba1 0109 	sub.w	r1, r1, r9
 8000c56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c5a:	fb09 f804 	mul.w	r8, r9, r4
 8000c5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c62:	b292      	uxth	r2, r2
 8000c64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c68:	4542      	cmp	r2, r8
 8000c6a:	d229      	bcs.n	8000cc0 <__udivmoddi4+0x2e4>
 8000c6c:	18ba      	adds	r2, r7, r2
 8000c6e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c72:	d2c4      	bcs.n	8000bfe <__udivmoddi4+0x222>
 8000c74:	4542      	cmp	r2, r8
 8000c76:	d2c2      	bcs.n	8000bfe <__udivmoddi4+0x222>
 8000c78:	f1a9 0102 	sub.w	r1, r9, #2
 8000c7c:	443a      	add	r2, r7
 8000c7e:	e7be      	b.n	8000bfe <__udivmoddi4+0x222>
 8000c80:	45f0      	cmp	r8, lr
 8000c82:	d29d      	bcs.n	8000bc0 <__udivmoddi4+0x1e4>
 8000c84:	ebbe 0302 	subs.w	r3, lr, r2
 8000c88:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c8c:	3801      	subs	r0, #1
 8000c8e:	46e1      	mov	r9, ip
 8000c90:	e796      	b.n	8000bc0 <__udivmoddi4+0x1e4>
 8000c92:	eba7 0909 	sub.w	r9, r7, r9
 8000c96:	4449      	add	r1, r9
 8000c98:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c9c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ca0:	fb09 f804 	mul.w	r8, r9, r4
 8000ca4:	e7db      	b.n	8000c5e <__udivmoddi4+0x282>
 8000ca6:	4673      	mov	r3, lr
 8000ca8:	e77f      	b.n	8000baa <__udivmoddi4+0x1ce>
 8000caa:	4650      	mov	r0, sl
 8000cac:	e766      	b.n	8000b7c <__udivmoddi4+0x1a0>
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e6fd      	b.n	8000aae <__udivmoddi4+0xd2>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3a02      	subs	r2, #2
 8000cb6:	e733      	b.n	8000b20 <__udivmoddi4+0x144>
 8000cb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cbc:	443b      	add	r3, r7
 8000cbe:	e71c      	b.n	8000afa <__udivmoddi4+0x11e>
 8000cc0:	4649      	mov	r1, r9
 8000cc2:	e79c      	b.n	8000bfe <__udivmoddi4+0x222>
 8000cc4:	eba1 0109 	sub.w	r1, r1, r9
 8000cc8:	46c4      	mov	ip, r8
 8000cca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cce:	fb09 f804 	mul.w	r8, r9, r4
 8000cd2:	e7c4      	b.n	8000c5e <__udivmoddi4+0x282>

08000cd4 <__aeabi_idiv0>:
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <_ZN10ControllerC1Effff>:
 * @param K_P Proportional controller Gain
 * @param K_F Feed forward controller Gain
 * @param K_I Integral controller Gain
 * @param K_D Derivative controller Gain
 */
Controller::Controller(float K_P, float K_F, float K_I, float K_D)
 8000cd8:	b480      	push	{r7}
 8000cda:	b087      	sub	sp, #28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6178      	str	r0, [r7, #20]
 8000ce0:	ed87 0a04 	vstr	s0, [r7, #16]
 8000ce4:	edc7 0a03 	vstr	s1, [r7, #12]
 8000ce8:	ed87 1a02 	vstr	s2, [r7, #8]
 8000cec:	edc7 1a01 	vstr	s3, [r7, #4]
:KP(K_P)
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	601a      	str	r2, [r3, #0]
,KF(K_F)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	68fa      	ldr	r2, [r7, #12]
 8000cfa:	605a      	str	r2, [r3, #4]
,KI(K_I)
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	609a      	str	r2, [r3, #8]
,KD(K_D)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
{}
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	4618      	mov	r0, r3
 8000d18:	371c      	adds	r7, #28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <_ZN10Controller3PIDEll>:
 * @param input PID control input/setpoint
 * @param feedback PID control feedback/PV
 * @return Calculated actuation value based on PID
 */
int32_t Controller::PID(int32_t input, int32_t feedback)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08e      	sub	sp, #56	@ 0x38
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
	uint16_t time = micros(); // Get the current time
 8000d30:	f003 f822 	bl	8003d78 <_Z6microsv>
 8000d34:	4603      	mov	r3, r0
 8000d36:	86fb      	strh	r3, [r7, #54]	@ 0x36
	uint16_t dt = time_diff(_prev_time,time); // Determine the change in time since last loop
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	8b1b      	ldrh	r3, [r3, #24]
 8000d3c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f003 f827 	bl	8003d94 <_Z9time_difftt>
 8000d46:	4603      	mov	r3, r0
 8000d48:	86bb      	strh	r3, [r7, #52]	@ 0x34
	int32_t error = input - feedback; // Calculate error
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	633b      	str	r3, [r7, #48]	@ 0x30
	int32_t delta = feedback - _prev_PV; // Calculate change in PV since last loop
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	691b      	ldr	r3, [r3, #16]
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	// Proportional Control
	float P_power = KP*error;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	ed93 7a00 	vldr	s14, [r3]
 8000d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d64:	ee07 3a90 	vmov	s15, r3
 8000d68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d70:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	// Feed forward Control
	float F_power = KF*input;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	ed93 7a01 	vldr	s14, [r3, #4]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	ee07 3a90 	vmov	s15, r3
 8000d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d88:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Integral Control
	_sum_err = std::max(int32_t(-2147483640), std::min(int32_t(2147483640)
 8000d8c:	4b31      	ldr	r3, [pc, #196]	@ (8000e54 <_ZN10Controller3PIDEll+0x130>)
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	4b31      	ldr	r3, [pc, #196]	@ (8000e58 <_ZN10Controller3PIDEll+0x134>)
 8000d92:	617b      	str	r3, [r7, #20]
			,_sum_err + error*dt)); // Integrate error and constrain it
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	695a      	ldr	r2, [r3, #20]
 8000d98:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000d9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000d9c:	fb01 f303 	mul.w	r3, r1, r3
 8000da0:	4413      	add	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
	_sum_err = std::max(int32_t(-2147483640), std::min(int32_t(2147483640)
 8000da4:	f107 0218 	add.w	r2, r7, #24
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4611      	mov	r1, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f856 	bl	8000e60 <_ZSt3minIlERKT_S2_S2_>
 8000db4:	4602      	mov	r2, r0
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 f863 	bl	8000e88 <_ZSt3maxIlERKT_S2_S2_>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	615a      	str	r2, [r3, #20]
	float I_power = KI*_sum_err/1000000;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	ed93 7a02 	vldr	s14, [r3, #8]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	ee07 3a90 	vmov	s15, r3
 8000dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ddc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000de0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8000e5c <_ZN10Controller3PIDEll+0x138>
 8000de4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000de8:	edc7 7a08 	vstr	s15, [r7, #32]

	// Derivative Control
	float D_power = KD*(-delta)*1000000/dt;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	ed93 7a03 	vldr	s14, [r3, #12]
 8000df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000df4:	425b      	negs	r3, r3
 8000df6:	ee07 3a90 	vmov	s15, r3
 8000dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e02:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8000e5c <_ZN10Controller3PIDEll+0x138>
 8000e06:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000e0a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000e0c:	ee07 3a90 	vmov	s15, r3
 8000e10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e18:	edc7 7a07 	vstr	s15, [r7, #28]

	// Update previous values
	_prev_PV = feedback;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	611a      	str	r2, [r3, #16]
	_prev_time = time;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8000e26:	831a      	strh	r2, [r3, #24]

	return (P_power + F_power + I_power + D_power);
 8000e28:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000e2c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000e30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e34:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e48:	ee17 3a90 	vmov	r3, s15
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3738      	adds	r7, #56	@ 0x38
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	80000008 	.word	0x80000008
 8000e58:	7ffffff8 	.word	0x7ffffff8
 8000e5c:	49742400 	.word	0x49742400

08000e60 <_ZSt3minIlERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	da01      	bge.n	8000e7a <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	e000      	b.n	8000e7c <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 8000e7a:	687b      	ldr	r3, [r7, #4]
    }
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <_ZSt3maxIlERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	da01      	bge.n	8000ea2 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	e000      	b.n	8000ea4 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8000ea2:	687b      	ldr	r3, [r7, #4]
    }
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	bfb8      	it	lt
 8000ebe:	425b      	neglt	r3, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <_ZN11Finger_TASKC1EP5MotorlS1_lllS1_lS1_llffff>:
 * @param K_P Position controller Proportional controller Gain
 * @param K_F Position controller Feed forward controller Gain
 * @param K_I Position controller Integral controller Gain
 * @param K_D Position controller Derivative controller Gain
 */
Finger_TASK::Finger_TASK(Motor *MOT_XTN, int32_t XTN_max
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	61f8      	str	r0, [r7, #28]
 8000ed4:	61b9      	str	r1, [r7, #24]
 8000ed6:	617a      	str	r2, [r7, #20]
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	ed87 0a03 	vstr	s0, [r7, #12]
 8000ede:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ee2:	ed87 1a01 	vstr	s2, [r7, #4]
 8000ee6:	edc7 1a00 	vstr	s3, [r7]
					    ,Motor *MOT_FLX, int32_t FLX3_max, int32_t FLX2_max, int32_t FLX1_max
					    ,Motor *MOT_ADD, int32_t ADD_max
					    ,Motor *MOT_ABD, int32_t ABD_max, int32_t RLX_max
					    ,float K_P, float K_F, float K_I, float K_D)
:XTN(MOT_XTN)
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	601a      	str	r2, [r3, #0]
,FLX(MOT_FLX)
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	605a      	str	r2, [r3, #4]
,ADD(MOT_ADD)
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000efa:	609a      	str	r2, [r3, #8]
,ABD(MOT_ABD)
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f00:	60da      	str	r2, [r3, #12]
,_ABD_max(ABD_max)
,_RLX_max(RLX_max)
,_XTN_pos(Controller(K_P,K_F,K_I,K_D))
,_FLX_pos(Controller(K_P,K_F,K_I,K_D))
,_ADD_pos(Controller(K_P,K_F,K_I,K_D))
,_ABD_pos(Controller(K_P,K_F,K_I,K_D))
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	2200      	movs	r2, #0
 8000f06:	741a      	strb	r2, [r3, #16]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	745a      	strb	r2, [r3, #17]
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	2200      	movs	r2, #0
 8000f12:	749a      	strb	r2, [r3, #18]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	2200      	movs	r2, #0
 8000f18:	74da      	strb	r2, [r3, #19]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3314      	adds	r3, #20
 8000f1e:	22a0      	movs	r2, #160	@ 0xa0
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f00b f88c 	bl	800c040 <memset>
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	751a      	strb	r2, [r3, #20]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	2200      	movs	r2, #0
 8000f52:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
,_XTN_max(XTN_max)
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
,_FLX3_max(FLX3_max)
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f72:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
,_FLX2_max(FLX2_max)
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f7a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
,_FLX1_max(FLX1_max)
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f82:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
,_ADD_max(ADD_max)
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f8a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
,_ABD_max(ABD_max)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f92:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
,_RLX_max(RLX_max)
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000f9a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
,_XTN_pos(Controller(K_P,K_F,K_I,K_D))
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	33ec      	adds	r3, #236	@ 0xec
 8000fa2:	edd7 1a00 	vldr	s3, [r7]
 8000fa6:	ed97 1a01 	vldr	s2, [r7, #4]
 8000faa:	edd7 0a02 	vldr	s1, [r7, #8]
 8000fae:	ed97 0a03 	vldr	s0, [r7, #12]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fe90 	bl	8000cd8 <_ZN10ControllerC1Effff>
,_FLX_pos(Controller(K_P,K_F,K_I,K_D))
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8000fbe:	edd7 1a00 	vldr	s3, [r7]
 8000fc2:	ed97 1a01 	vldr	s2, [r7, #4]
 8000fc6:	edd7 0a02 	vldr	s1, [r7, #8]
 8000fca:	ed97 0a03 	vldr	s0, [r7, #12]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fe82 	bl	8000cd8 <_ZN10ControllerC1Effff>
,_ADD_pos(Controller(K_P,K_F,K_I,K_D))
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8000fda:	edd7 1a00 	vldr	s3, [r7]
 8000fde:	ed97 1a01 	vldr	s2, [r7, #4]
 8000fe2:	edd7 0a02 	vldr	s1, [r7, #8]
 8000fe6:	ed97 0a03 	vldr	s0, [r7, #12]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fe74 	bl	8000cd8 <_ZN10ControllerC1Effff>
,_ABD_pos(Controller(K_P,K_F,K_I,K_D))
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8000ff6:	edd7 1a00 	vldr	s3, [r7]
 8000ffa:	ed97 1a01 	vldr	s2, [r7, #4]
 8000ffe:	edd7 0a02 	vldr	s1, [r7, #8]
 8001002:	ed97 0a03 	vldr	s0, [r7, #12]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fe66 	bl	8000cd8 <_ZN10ControllerC1Effff>
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	2200      	movs	r2, #0
 8001010:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
{}
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	4618      	mov	r0, r3
 8001018:	3720      	adds	r7, #32
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <_ZN11Finger_TASK3FSMEv>:

/**
 * @brief Run one loop of FSM
 */
void Finger_TASK::FSM(void)
{
 8001020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	// Update encoders
	(*XTN).update_enc();
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f003 f93b 	bl	80042a8 <_ZN5Motor10update_encEv>
	(*FLX).update_enc();
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	4618      	mov	r0, r3
 8001038:	f003 f936 	bl	80042a8 <_ZN5Motor10update_encEv>
	(*ADD).update_enc();
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	4618      	mov	r0, r3
 8001042:	f003 f931 	bl	80042a8 <_ZN5Motor10update_encEv>
	(*ABD).update_enc();
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	4618      	mov	r0, r3
 800104c:	f003 f92c 	bl	80042a8 <_ZN5Motor10update_encEv>

	static int32_t last_pos; // Last position of encoder of interest
	static uint32_t stuck_cnt = 0; // Number of times in a row the encoder doesn't change

	// Make sure the ADD & ABD motors relax/home to the maximum possible value
	static int32_t ADD_home = std::max(_ADD_max,_RLX_max);
 8001050:	4ba7      	ldr	r3, [pc, #668]	@ (80012f0 <_ZN11Finger_TASK3FSMEv+0x2d0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f3bf 8f5b 	dmb	ish
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b00      	cmp	r3, #0
 800105e:	bf0c      	ite	eq
 8001060:	2301      	moveq	r3, #1
 8001062:	2300      	movne	r3, #0
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d01a      	beq.n	80010a0 <_ZN11Finger_TASK3FSMEv+0x80>
 800106a:	48a1      	ldr	r0, [pc, #644]	@ (80012f0 <_ZN11Finger_TASK3FSMEv+0x2d0>)
 800106c:	f00a fd04 	bl	800ba78 <__cxa_guard_acquire>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	bf14      	ite	ne
 8001076:	2301      	movne	r3, #1
 8001078:	2300      	moveq	r3, #0
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00f      	beq.n	80010a0 <_ZN11Finger_TASK3FSMEv+0x80>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f103 02e0 	add.w	r2, r3, #224	@ 0xe0
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	33e8      	adds	r3, #232	@ 0xe8
 800108a:	4619      	mov	r1, r3
 800108c:	4610      	mov	r0, r2
 800108e:	f7ff fefb 	bl	8000e88 <_ZSt3maxIlERKT_S2_S2_>
 8001092:	4603      	mov	r3, r0
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a97      	ldr	r2, [pc, #604]	@ (80012f4 <_ZN11Finger_TASK3FSMEv+0x2d4>)
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	4895      	ldr	r0, [pc, #596]	@ (80012f0 <_ZN11Finger_TASK3FSMEv+0x2d0>)
 800109c:	f00a fcf8 	bl	800ba90 <__cxa_guard_release>
	static int32_t ABD_home = std::max(_ABD_max,_RLX_max);
 80010a0:	4b95      	ldr	r3, [pc, #596]	@ (80012f8 <_ZN11Finger_TASK3FSMEv+0x2d8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f3bf 8f5b 	dmb	ish
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	bf0c      	ite	eq
 80010b0:	2301      	moveq	r3, #1
 80010b2:	2300      	movne	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d01a      	beq.n	80010f0 <_ZN11Finger_TASK3FSMEv+0xd0>
 80010ba:	488f      	ldr	r0, [pc, #572]	@ (80012f8 <_ZN11Finger_TASK3FSMEv+0x2d8>)
 80010bc:	f00a fcdc 	bl	800ba78 <__cxa_guard_acquire>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	bf14      	ite	ne
 80010c6:	2301      	movne	r3, #1
 80010c8:	2300      	moveq	r3, #0
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00f      	beq.n	80010f0 <_ZN11Finger_TASK3FSMEv+0xd0>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f103 02e4 	add.w	r2, r3, #228	@ 0xe4
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	33e8      	adds	r3, #232	@ 0xe8
 80010da:	4619      	mov	r1, r3
 80010dc:	4610      	mov	r0, r2
 80010de:	f7ff fed3 	bl	8000e88 <_ZSt3maxIlERKT_S2_S2_>
 80010e2:	4603      	mov	r3, r0
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a85      	ldr	r2, [pc, #532]	@ (80012fc <_ZN11Finger_TASK3FSMEv+0x2dc>)
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	4883      	ldr	r0, [pc, #524]	@ (80012f8 <_ZN11Finger_TASK3FSMEv+0x2d8>)
 80010ec:	f00a fcd0 	bl	800ba90 <__cxa_guard_release>

	static int32_t setpoint = 0; // Local stored FLX setpoint
	static int32_t ADD_setpoint = 0; // Local stored ADD setpoint
	static int32_t ABD_setpoint = 0; // Local stored ABD setpoint
	static form_t prev_form = HUB; // Previous flex motion form
	static uint32_t start = HAL_GetTick(); // Delay start ticks
 80010f0:	4b83      	ldr	r3, [pc, #524]	@ (8001300 <_ZN11Finger_TASK3FSMEv+0x2e0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f3bf 8f5b 	dmb	ish
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	bf0c      	ite	eq
 8001100:	2301      	moveq	r3, #1
 8001102:	2300      	movne	r3, #0
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d012      	beq.n	8001130 <_ZN11Finger_TASK3FSMEv+0x110>
 800110a:	487d      	ldr	r0, [pc, #500]	@ (8001300 <_ZN11Finger_TASK3FSMEv+0x2e0>)
 800110c:	f00a fcb4 	bl	800ba78 <__cxa_guard_acquire>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	bf14      	ite	ne
 8001116:	2301      	movne	r3, #1
 8001118:	2300      	moveq	r3, #0
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	d007      	beq.n	8001130 <_ZN11Finger_TASK3FSMEv+0x110>
 8001120:	f003 ff54 	bl	8004fcc <HAL_GetTick>
 8001124:	4603      	mov	r3, r0
 8001126:	4a77      	ldr	r2, [pc, #476]	@ (8001304 <_ZN11Finger_TASK3FSMEv+0x2e4>)
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	4875      	ldr	r0, [pc, #468]	@ (8001300 <_ZN11Finger_TASK3FSMEv+0x2e0>)
 800112c:	f00a fcb0 	bl	800ba90 <__cxa_guard_release>

	switch(_state)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 8001136:	2b04      	cmp	r3, #4
 8001138:	f201 821a 	bhi.w	8002570 <_ZN11Finger_TASK3FSMEv+0x1550>
 800113c:	a201      	add	r2, pc, #4	@ (adr r2, 8001144 <_ZN11Finger_TASK3FSMEv+0x124>)
 800113e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001142:	bf00      	nop
 8001144:	08001159 	.word	0x08001159
 8001148:	080011bb 	.word	0x080011bb
 800114c:	080017c9 	.word	0x080017c9
 8001150:	08001ba9 	.word	0x08001ba9
 8001154:	08001fa7 	.word	0x08001fa7
	{
	case(S0_INIT):

		// Start all motors
		(*XTN).start();
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f002 ffd1 	bl	8004104 <_ZN5Motor5startEv>
		(*FLX).start();
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4618      	mov	r0, r3
 8001168:	f002 ffcc 	bl	8004104 <_ZN5Motor5startEv>
		(*ADD).start();
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	4618      	mov	r0, r3
 8001172:	f002 ffc7 	bl	8004104 <_ZN5Motor5startEv>
		(*ABD).start();
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	4618      	mov	r0, r3
 800117c:	f002 ffc2 	bl	8004104 <_ZN5Motor5startEv>

		// Enable all motors
		(*XTN).enable();
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f002 fff1 	bl	800416c <_ZN5Motor6enableEv>
		(*FLX).enable();
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	4618      	mov	r0, r3
 8001190:	f002 ffec 	bl	800416c <_ZN5Motor6enableEv>
		(*ADD).enable();
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	4618      	mov	r0, r3
 800119a:	f002 ffe7 	bl	800416c <_ZN5Motor6enableEv>
		(*ABD).enable();
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f002 ffe2 	bl	800416c <_ZN5Motor6enableEv>

// Thumb is missing XTN motor so avoid it
#ifdef THUMB_FINGER
		XTN_homed = 1;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	741a      	strb	r2, [r3, #16]
#endif

		// Go to next state
		_state = S4_HUB;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2204      	movs	r2, #4
 80011b2:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
		break;
 80011b6:	f001 b9db 	b.w	8002570 <_ZN11Finger_TASK3FSMEv+0x1550>

	case(S1_RELAX):

		// First home FLX
		if (FLX_homed == 0)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7c5b      	ldrb	r3, [r3, #17]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f040 80ce 	bne.w	8001360 <_ZN11Finger_TASK3FSMEv+0x340>
		{

// Thumb is missing XTN motor so avoid it
#ifdef THUMB_FINGER
			(*XTN).position = -_RLX_max-_XTN_max;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011ca:	4259      	negs	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	1a8a      	subs	r2, r1, r2
 80011d8:	605a      	str	r2, [r3, #4]
#endif

			// Send XTN, ADD, & ABD to relaxed positions
			(*FLX).set_effort(_FLX_pos.PID(-_RLX_max, (*FLX).position));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685c      	ldr	r4, [r3, #4]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f503 7084 	add.w	r0, r3, #264	@ 0x108
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011ea:	4259      	negs	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	461a      	mov	r2, r3
 80011f4:	f7ff fd96 	bl	8000d24 <_ZN10Controller3PIDEll>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4619      	mov	r1, r3
 80011fc:	4620      	mov	r0, r4
 80011fe:	f002 ffd3 	bl	80041a8 <_ZN5Motor10set_effortEl>
			(*XTN).set_effort(_XTN_pos.PID(-_RLX_max-_XTN_max, (*XTN).position));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681c      	ldr	r4, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001212:	425a      	negs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800121a:	1ad1      	subs	r1, r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	461a      	mov	r2, r3
 8001224:	f7ff fd7e 	bl	8000d24 <_ZN10Controller3PIDEll>
 8001228:	4603      	mov	r3, r0
 800122a:	4619      	mov	r1, r3
 800122c:	4620      	mov	r0, r4
 800122e:	f002 ffbb 	bl	80041a8 <_ZN5Motor10set_effortEl>
			(*ADD).set_effort(_ADD_pos.PID(-ADD_home, (*ADD).position));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689c      	ldr	r4, [r3, #8]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 800123c:	4b2d      	ldr	r3, [pc, #180]	@ (80012f4 <_ZN11Finger_TASK3FSMEv+0x2d4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4259      	negs	r1, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	461a      	mov	r2, r3
 800124a:	f7ff fd6b 	bl	8000d24 <_ZN10Controller3PIDEll>
 800124e:	4603      	mov	r3, r0
 8001250:	4619      	mov	r1, r3
 8001252:	4620      	mov	r0, r4
 8001254:	f002 ffa8 	bl	80041a8 <_ZN5Motor10set_effortEl>
			(*ABD).set_effort(_ABD_pos.PID(-ABD_home, (*ABD).position));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68dc      	ldr	r4, [r3, #12]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f503 70a0 	add.w	r0, r3, #320	@ 0x140
 8001262:	4b26      	ldr	r3, [pc, #152]	@ (80012fc <_ZN11Finger_TASK3FSMEv+0x2dc>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4259      	negs	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	461a      	mov	r2, r3
 8001270:	f7ff fd58 	bl	8000d24 <_ZN10Controller3PIDEll>
 8001274:	4603      	mov	r3, r0
 8001276:	4619      	mov	r1, r3
 8001278:	4620      	mov	r0, r4
 800127a:	f002 ff95 	bl	80041a8 <_ZN5Motor10set_effortEl>

			// Check if motors have settled
			if ((abs((*FLX).position - (-_RLX_max)) < SETTLING_TOL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800128a:	4413      	add	r3, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fe0f 	bl	8000eb0 <_ZSt3absl>
 8001292:	4603      	mov	r3, r0
			and	(abs((*XTN).position - (-_RLX_max-_XTN_max)) < SETTLING_TOL)
			and (abs((*ADD).position - (-ADD_home)) < SETTLING_TOL)
			and (abs((*ABD).position - (-ABD_home)) < SETTLING_TOL))
 8001294:	2b31      	cmp	r3, #49	@ 0x31
 8001296:	dc37      	bgt.n	8001308 <_ZN11Finger_TASK3FSMEv+0x2e8>
			and	(abs((*XTN).position - (-_RLX_max-_XTN_max)) < SETTLING_TOL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012a4:	4259      	negs	r1, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80012ac:	1acb      	subs	r3, r1, r3
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fdfd 	bl	8000eb0 <_ZSt3absl>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b31      	cmp	r3, #49	@ 0x31
 80012ba:	dc25      	bgt.n	8001308 <_ZN11Finger_TASK3FSMEv+0x2e8>
			and (abs((*ADD).position - (-ADD_home)) < SETTLING_TOL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <_ZN11Finger_TASK3FSMEv+0x2d4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fdf1 	bl	8000eb0 <_ZSt3absl>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b31      	cmp	r3, #49	@ 0x31
 80012d2:	dc19      	bgt.n	8001308 <_ZN11Finger_TASK3FSMEv+0x2e8>
			and (abs((*ABD).position - (-ABD_home)) < SETTLING_TOL))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <_ZN11Finger_TASK3FSMEv+0x2dc>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fde5 	bl	8000eb0 <_ZSt3absl>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b31      	cmp	r3, #49	@ 0x31
 80012ea:	dc0d      	bgt.n	8001308 <_ZN11Finger_TASK3FSMEv+0x2e8>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e00c      	b.n	800130a <_ZN11Finger_TASK3FSMEv+0x2ea>
 80012f0:	20000088 	.word	0x20000088
 80012f4:	20000084 	.word	0x20000084
 80012f8:	20000090 	.word	0x20000090
 80012fc:	2000008c 	.word	0x2000008c
 8001300:	200000a4 	.word	0x200000a4
 8001304:	200000a0 	.word	0x200000a0
 8001308:	2300      	movs	r3, #0
			if ((abs((*FLX).position - (-_RLX_max)) < SETTLING_TOL)
 800130a:	2b00      	cmp	r3, #0
 800130c:	f001 812b 	beq.w	8002566 <_ZN11Finger_TASK3FSMEv+0x1546>
			{
				// Set motor effort to 0
				(*FLX).set_effort(0);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f002 ff46 	bl	80041a8 <_ZN5Motor10set_effortEl>
				(*XTN).set_effort(0);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f002 ff40 	bl	80041a8 <_ZN5Motor10set_effortEl>
				(*ADD).set_effort(0);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f002 ff3a 	bl	80041a8 <_ZN5Motor10set_effortEl>
				(*ABD).set_effort(0);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f002 ff34 	bl	80041a8 <_ZN5Motor10set_effortEl>
				(*FLX).set_zero(); // Zero the encoder
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	4618      	mov	r0, r3
 8001346:	f003 f811 	bl	800436c <_ZN5Motor8set_zeroEv>
				last_pos = (*FLX).position;  // Update last position
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	4aa7      	ldr	r2, [pc, #668]	@ (80015f0 <_ZN11Finger_TASK3FSMEv+0x5d0>)
 8001352:	6013      	str	r3, [r2, #0]
				_state = S2_HARDSTOP;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2202      	movs	r2, #2
 8001358:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
				(*ABD).set_zero(); // Zero the encoder
				last_pos = (*ABD).position;  // Update last position
				_state = S2_HARDSTOP;
			}
		}
		break;
 800135c:	f001 b903 	b.w	8002566 <_ZN11Finger_TASK3FSMEv+0x1546>
		else if (XTN_homed == 0)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	7c1b      	ldrb	r3, [r3, #16]
 8001364:	2b00      	cmp	r3, #0
 8001366:	f040 80b5 	bne.w	80014d4 <_ZN11Finger_TASK3FSMEv+0x4b4>
			(*XTN).position = -_RLX_max;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4252      	negs	r2, r2
 8001376:	605a      	str	r2, [r3, #4]
			(*FLX).set_effort(_FLX_pos.PID(-_RLX_max, (*FLX).position));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685c      	ldr	r4, [r3, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f503 7084 	add.w	r0, r3, #264	@ 0x108
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001388:	4259      	negs	r1, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	461a      	mov	r2, r3
 8001392:	f7ff fcc7 	bl	8000d24 <_ZN10Controller3PIDEll>
 8001396:	4603      	mov	r3, r0
 8001398:	4619      	mov	r1, r3
 800139a:	4620      	mov	r0, r4
 800139c:	f002 ff04 	bl	80041a8 <_ZN5Motor10set_effortEl>
			(*XTN).set_effort(_XTN_pos.PID(-_RLX_max, (*XTN).position));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681c      	ldr	r4, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013b0:	4259      	negs	r1, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	461a      	mov	r2, r3
 80013ba:	f7ff fcb3 	bl	8000d24 <_ZN10Controller3PIDEll>
 80013be:	4603      	mov	r3, r0
 80013c0:	4619      	mov	r1, r3
 80013c2:	4620      	mov	r0, r4
 80013c4:	f002 fef0 	bl	80041a8 <_ZN5Motor10set_effortEl>
			(*ADD).set_effort(_ADD_pos.PID(-ADD_home, (*ADD).position));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689c      	ldr	r4, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 80013d2:	4b88      	ldr	r3, [pc, #544]	@ (80015f4 <_ZN11Finger_TASK3FSMEv+0x5d4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4259      	negs	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	461a      	mov	r2, r3
 80013e0:	f7ff fca0 	bl	8000d24 <_ZN10Controller3PIDEll>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4619      	mov	r1, r3
 80013e8:	4620      	mov	r0, r4
 80013ea:	f002 fedd 	bl	80041a8 <_ZN5Motor10set_effortEl>
			(*ABD).set_effort(_ABD_pos.PID(-ABD_home, (*ABD).position));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68dc      	ldr	r4, [r3, #12]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f503 70a0 	add.w	r0, r3, #320	@ 0x140
 80013f8:	4b7f      	ldr	r3, [pc, #508]	@ (80015f8 <_ZN11Finger_TASK3FSMEv+0x5d8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4259      	negs	r1, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	461a      	mov	r2, r3
 8001406:	f7ff fc8d 	bl	8000d24 <_ZN10Controller3PIDEll>
 800140a:	4603      	mov	r3, r0
 800140c:	4619      	mov	r1, r3
 800140e:	4620      	mov	r0, r4
 8001410:	f002 feca 	bl	80041a8 <_ZN5Motor10set_effortEl>
			if ((abs((*FLX).position - (-_RLX_max)) < SETTLING_TOL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001420:	4413      	add	r3, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fd44 	bl	8000eb0 <_ZSt3absl>
 8001428:	4603      	mov	r3, r0
			and (abs((*ABD).position - (-ABD_home)) < SETTLING_TOL))
 800142a:	2b31      	cmp	r3, #49	@ 0x31
 800142c:	dc26      	bgt.n	800147c <_ZN11Finger_TASK3FSMEv+0x45c>
			and	(abs((*XTN).position - (-_RLX_max)) < SETTLING_TOL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800143a:	4413      	add	r3, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fd37 	bl	8000eb0 <_ZSt3absl>
 8001442:	4603      	mov	r3, r0
 8001444:	2b31      	cmp	r3, #49	@ 0x31
 8001446:	dc19      	bgt.n	800147c <_ZN11Finger_TASK3FSMEv+0x45c>
			and (abs((*ADD).position - (-ADD_home)) < SETTLING_TOL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	4b69      	ldr	r3, [pc, #420]	@ (80015f4 <_ZN11Finger_TASK3FSMEv+0x5d4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4413      	add	r3, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fd2b 	bl	8000eb0 <_ZSt3absl>
 800145a:	4603      	mov	r3, r0
 800145c:	2b31      	cmp	r3, #49	@ 0x31
 800145e:	dc0d      	bgt.n	800147c <_ZN11Finger_TASK3FSMEv+0x45c>
			and (abs((*ABD).position - (-ABD_home)) < SETTLING_TOL))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	4b64      	ldr	r3, [pc, #400]	@ (80015f8 <_ZN11Finger_TASK3FSMEv+0x5d8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fd1f 	bl	8000eb0 <_ZSt3absl>
 8001472:	4603      	mov	r3, r0
 8001474:	2b31      	cmp	r3, #49	@ 0x31
 8001476:	dc01      	bgt.n	800147c <_ZN11Finger_TASK3FSMEv+0x45c>
 8001478:	2301      	movs	r3, #1
 800147a:	e000      	b.n	800147e <_ZN11Finger_TASK3FSMEv+0x45e>
 800147c:	2300      	movs	r3, #0
			if ((abs((*FLX).position - (-_RLX_max)) < SETTLING_TOL)
 800147e:	2b00      	cmp	r3, #0
 8001480:	f001 8071 	beq.w	8002566 <_ZN11Finger_TASK3FSMEv+0x1546>
				(*FLX).set_effort(0);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f002 fe8c 	bl	80041a8 <_ZN5Motor10set_effortEl>
				(*XTN).set_effort(0);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f002 fe86 	bl	80041a8 <_ZN5Motor10set_effortEl>
				(*ADD).set_effort(0);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f002 fe80 	bl	80041a8 <_ZN5Motor10set_effortEl>
				(*ABD).set_effort(0);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f002 fe7a 	bl	80041a8 <_ZN5Motor10set_effortEl>
				(*XTN).set_zero(); // Zero the encoder
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 ff57 	bl	800436c <_ZN5Motor8set_zeroEv>
				last_pos = (*XTN).position;  // Update last position
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	4a4a      	ldr	r2, [pc, #296]	@ (80015f0 <_ZN11Finger_TASK3FSMEv+0x5d0>)
 80014c6:	6013      	str	r3, [r2, #0]
				_state = S2_HARDSTOP;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2202      	movs	r2, #2
 80014cc:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
		break;
 80014d0:	f001 b849 	b.w	8002566 <_ZN11Finger_TASK3FSMEv+0x1546>
		else if (ADD_homed == 0)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	7c9b      	ldrb	r3, [r3, #18]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f040 80bb 	bne.w	8001654 <_ZN11Finger_TASK3FSMEv+0x634>
			(*XTN).position = -_RLX_max;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4252      	negs	r2, r2
 80014ea:	605a      	str	r2, [r3, #4]
			(*FLX).set_effort(_FLX_pos.PID(-_RLX_max, (*FLX).position));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685c      	ldr	r4, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f503 7084 	add.w	r0, r3, #264	@ 0x108
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014fc:	4259      	negs	r1, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	461a      	mov	r2, r3
 8001506:	f7ff fc0d 	bl	8000d24 <_ZN10Controller3PIDEll>
 800150a:	4603      	mov	r3, r0
 800150c:	4619      	mov	r1, r3
 800150e:	4620      	mov	r0, r4
 8001510:	f002 fe4a 	bl	80041a8 <_ZN5Motor10set_effortEl>
			(*XTN).set_effort(_XTN_pos.PID(-_RLX_max, (*XTN).position));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681c      	ldr	r4, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001524:	4259      	negs	r1, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	461a      	mov	r2, r3
 800152e:	f7ff fbf9 	bl	8000d24 <_ZN10Controller3PIDEll>
 8001532:	4603      	mov	r3, r0
 8001534:	4619      	mov	r1, r3
 8001536:	4620      	mov	r0, r4
 8001538:	f002 fe36 	bl	80041a8 <_ZN5Motor10set_effortEl>
			(*ADD).set_effort(_ADD_pos.PID(-ADD_home, (*ADD).position));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689c      	ldr	r4, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 8001546:	4b2b      	ldr	r3, [pc, #172]	@ (80015f4 <_ZN11Finger_TASK3FSMEv+0x5d4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4259      	negs	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	461a      	mov	r2, r3
 8001554:	f7ff fbe6 	bl	8000d24 <_ZN10Controller3PIDEll>
 8001558:	4603      	mov	r3, r0
 800155a:	4619      	mov	r1, r3
 800155c:	4620      	mov	r0, r4
 800155e:	f002 fe23 	bl	80041a8 <_ZN5Motor10set_effortEl>
			(*ABD).set_effort(_ABD_pos.PID(-ABD_home, (*ABD).position));
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68dc      	ldr	r4, [r3, #12]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f503 70a0 	add.w	r0, r3, #320	@ 0x140
 800156c:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <_ZN11Finger_TASK3FSMEv+0x5d8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4259      	negs	r1, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	461a      	mov	r2, r3
 800157a:	f7ff fbd3 	bl	8000d24 <_ZN10Controller3PIDEll>
 800157e:	4603      	mov	r3, r0
 8001580:	4619      	mov	r1, r3
 8001582:	4620      	mov	r0, r4
 8001584:	f002 fe10 	bl	80041a8 <_ZN5Motor10set_effortEl>
			if ((abs((*FLX).position - (-_RLX_max)) < SETTLING_TOL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001594:	4413      	add	r3, r2
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fc8a 	bl	8000eb0 <_ZSt3absl>
 800159c:	4603      	mov	r3, r0
			and (abs((*ABD).position - (-ABD_home)) < SETTLING_TOL))
 800159e:	2b31      	cmp	r3, #49	@ 0x31
 80015a0:	dc2c      	bgt.n	80015fc <_ZN11Finger_TASK3FSMEv+0x5dc>
			and	(abs((*XTN).position - (-_RLX_max)) < SETTLING_TOL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015ae:	4413      	add	r3, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fc7d 	bl	8000eb0 <_ZSt3absl>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b31      	cmp	r3, #49	@ 0x31
 80015ba:	dc1f      	bgt.n	80015fc <_ZN11Finger_TASK3FSMEv+0x5dc>
			and (abs((*ADD).position - (-ADD_home)) < SETTLING_TOL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <_ZN11Finger_TASK3FSMEv+0x5d4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4413      	add	r3, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fc71 	bl	8000eb0 <_ZSt3absl>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b31      	cmp	r3, #49	@ 0x31
 80015d2:	dc13      	bgt.n	80015fc <_ZN11Finger_TASK3FSMEv+0x5dc>
			and (abs((*ABD).position - (-ABD_home)) < SETTLING_TOL))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	4b07      	ldr	r3, [pc, #28]	@ (80015f8 <_ZN11Finger_TASK3FSMEv+0x5d8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4413      	add	r3, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fc65 	bl	8000eb0 <_ZSt3absl>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b31      	cmp	r3, #49	@ 0x31
 80015ea:	dc07      	bgt.n	80015fc <_ZN11Finger_TASK3FSMEv+0x5dc>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e006      	b.n	80015fe <_ZN11Finger_TASK3FSMEv+0x5de>
 80015f0:	2000007c 	.word	0x2000007c
 80015f4:	20000084 	.word	0x20000084
 80015f8:	2000008c 	.word	0x2000008c
 80015fc:	2300      	movs	r3, #0
			if ((abs((*FLX).position - (-_RLX_max)) < SETTLING_TOL)
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 87b1 	beq.w	8002566 <_ZN11Finger_TASK3FSMEv+0x1546>
				(*FLX).set_effort(0);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f002 fdcc 	bl	80041a8 <_ZN5Motor10set_effortEl>
				(*XTN).set_effort(0);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f002 fdc6 	bl	80041a8 <_ZN5Motor10set_effortEl>
				(*ADD).set_effort(0);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f002 fdc0 	bl	80041a8 <_ZN5Motor10set_effortEl>
				(*ABD).set_effort(0);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f002 fdba 	bl	80041a8 <_ZN5Motor10set_effortEl>
				(*ADD).set_zero(); // Zero the encoder
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	4618      	mov	r0, r3
 800163a:	f002 fe97 	bl	800436c <_ZN5Motor8set_zeroEv>
				last_pos = (*ADD).position;  // Update last position
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	4a98      	ldr	r2, [pc, #608]	@ (80018a8 <_ZN11Finger_TASK3FSMEv+0x888>)
 8001646:	6013      	str	r3, [r2, #0]
				_state = S2_HARDSTOP;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2202      	movs	r2, #2
 800164c:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
		break;
 8001650:	f000 bf89 	b.w	8002566 <_ZN11Finger_TASK3FSMEv+0x1546>
		else if (ABD_homed == 0)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7cdb      	ldrb	r3, [r3, #19]
 8001658:	2b00      	cmp	r3, #0
 800165a:	f040 8784 	bne.w	8002566 <_ZN11Finger_TASK3FSMEv+0x1546>
			(*XTN).position = -_RLX_max;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4252      	negs	r2, r2
 800166a:	605a      	str	r2, [r3, #4]
			(*FLX).set_effort(_FLX_pos.PID(-_RLX_max, (*FLX).position));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685c      	ldr	r4, [r3, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f503 7084 	add.w	r0, r3, #264	@ 0x108
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800167c:	4259      	negs	r1, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	461a      	mov	r2, r3
 8001686:	f7ff fb4d 	bl	8000d24 <_ZN10Controller3PIDEll>
 800168a:	4603      	mov	r3, r0
 800168c:	4619      	mov	r1, r3
 800168e:	4620      	mov	r0, r4
 8001690:	f002 fd8a 	bl	80041a8 <_ZN5Motor10set_effortEl>
			(*XTN).set_effort(_XTN_pos.PID(-_RLX_max, (*XTN).position));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681c      	ldr	r4, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016a4:	4259      	negs	r1, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	461a      	mov	r2, r3
 80016ae:	f7ff fb39 	bl	8000d24 <_ZN10Controller3PIDEll>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4619      	mov	r1, r3
 80016b6:	4620      	mov	r0, r4
 80016b8:	f002 fd76 	bl	80041a8 <_ZN5Motor10set_effortEl>
			(*ADD).set_effort(_ADD_pos.PID(-ADD_home, (*ADD).position));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689c      	ldr	r4, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 80016c6:	4b79      	ldr	r3, [pc, #484]	@ (80018ac <_ZN11Finger_TASK3FSMEv+0x88c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4259      	negs	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	461a      	mov	r2, r3
 80016d4:	f7ff fb26 	bl	8000d24 <_ZN10Controller3PIDEll>
 80016d8:	4603      	mov	r3, r0
 80016da:	4619      	mov	r1, r3
 80016dc:	4620      	mov	r0, r4
 80016de:	f002 fd63 	bl	80041a8 <_ZN5Motor10set_effortEl>
			(*ABD).set_effort(_ABD_pos.PID(-ABD_home, (*ABD).position));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68dc      	ldr	r4, [r3, #12]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f503 70a0 	add.w	r0, r3, #320	@ 0x140
 80016ec:	4b70      	ldr	r3, [pc, #448]	@ (80018b0 <_ZN11Finger_TASK3FSMEv+0x890>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4259      	negs	r1, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	461a      	mov	r2, r3
 80016fa:	f7ff fb13 	bl	8000d24 <_ZN10Controller3PIDEll>
 80016fe:	4603      	mov	r3, r0
 8001700:	4619      	mov	r1, r3
 8001702:	4620      	mov	r0, r4
 8001704:	f002 fd50 	bl	80041a8 <_ZN5Motor10set_effortEl>
			if ((abs((*FLX).position - (-_RLX_max)) < SETTLING_TOL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001714:	4413      	add	r3, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fbca 	bl	8000eb0 <_ZSt3absl>
 800171c:	4603      	mov	r3, r0
			and (abs((*ABD).position - (-ABD_home)) < SETTLING_TOL))
 800171e:	2b31      	cmp	r3, #49	@ 0x31
 8001720:	dc26      	bgt.n	8001770 <_ZN11Finger_TASK3FSMEv+0x750>
			and	(abs((*XTN).position - (-_RLX_max)) < SETTLING_TOL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800172e:	4413      	add	r3, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fbbd 	bl	8000eb0 <_ZSt3absl>
 8001736:	4603      	mov	r3, r0
 8001738:	2b31      	cmp	r3, #49	@ 0x31
 800173a:	dc19      	bgt.n	8001770 <_ZN11Finger_TASK3FSMEv+0x750>
			and (abs((*ADD).position - (-ADD_home)) < SETTLING_TOL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	4b5a      	ldr	r3, [pc, #360]	@ (80018ac <_ZN11Finger_TASK3FSMEv+0x88c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4413      	add	r3, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fbb1 	bl	8000eb0 <_ZSt3absl>
 800174e:	4603      	mov	r3, r0
 8001750:	2b31      	cmp	r3, #49	@ 0x31
 8001752:	dc0d      	bgt.n	8001770 <_ZN11Finger_TASK3FSMEv+0x750>
			and (abs((*ABD).position - (-ABD_home)) < SETTLING_TOL))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	4b55      	ldr	r3, [pc, #340]	@ (80018b0 <_ZN11Finger_TASK3FSMEv+0x890>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4413      	add	r3, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fba5 	bl	8000eb0 <_ZSt3absl>
 8001766:	4603      	mov	r3, r0
 8001768:	2b31      	cmp	r3, #49	@ 0x31
 800176a:	dc01      	bgt.n	8001770 <_ZN11Finger_TASK3FSMEv+0x750>
 800176c:	2301      	movs	r3, #1
 800176e:	e000      	b.n	8001772 <_ZN11Finger_TASK3FSMEv+0x752>
 8001770:	2300      	movs	r3, #0
			if ((abs((*FLX).position - (-_RLX_max)) < SETTLING_TOL)
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 86f7 	beq.w	8002566 <_ZN11Finger_TASK3FSMEv+0x1546>
				(*FLX).set_effort(0);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f002 fd12 	bl	80041a8 <_ZN5Motor10set_effortEl>
				(*XTN).set_effort(0);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f002 fd0c 	bl	80041a8 <_ZN5Motor10set_effortEl>
				(*ADD).set_effort(0);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f002 fd06 	bl	80041a8 <_ZN5Motor10set_effortEl>
				(*ABD).set_effort(0);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 fd00 	bl	80041a8 <_ZN5Motor10set_effortEl>
				(*ABD).set_zero(); // Zero the encoder
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f002 fddd 	bl	800436c <_ZN5Motor8set_zeroEv>
				last_pos = (*ABD).position;  // Update last position
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4a3b      	ldr	r2, [pc, #236]	@ (80018a8 <_ZN11Finger_TASK3FSMEv+0x888>)
 80017ba:	6013      	str	r3, [r2, #0]
				_state = S2_HARDSTOP;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2202      	movs	r2, #2
 80017c0:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
		break;
 80017c4:	f000 becf 	b.w	8002566 <_ZN11Finger_TASK3FSMEv+0x1546>

	case(S2_HARDSTOP):

		// First home FLX
		if (FLX_homed == 0)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	7c5b      	ldrb	r3, [r3, #17]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d173      	bne.n	80018b8 <_ZN11Finger_TASK3FSMEv+0x898>
		{
			(*FLX).set_effort((_FLX3_max*100)/abs(_FLX3_max)); // Move MOT towards hardstop
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685d      	ldr	r5, [r3, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017da:	2264      	movs	r2, #100	@ 0x64
 80017dc:	fb02 f403 	mul.w	r4, r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fb62 	bl	8000eb0 <_ZSt3absl>
 80017ec:	4603      	mov	r3, r0
 80017ee:	fb94 f3f3 	sdiv	r3, r4, r3
 80017f2:	4619      	mov	r1, r3
 80017f4:	4628      	mov	r0, r5
 80017f6:	f002 fcd7 	bl	80041a8 <_ZN5Motor10set_effortEl>

			// Check if the motor has gotten past the transient response
			if ((*FLX).position > 0.8*_RLX_max)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe ffe1 	bl	80007c8 <__aeabi_i2d>
 8001806:	4604      	mov	r4, r0
 8001808:	460d      	mov	r5, r1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe ffd9 	bl	80007c8 <__aeabi_i2d>
 8001816:	a322      	add	r3, pc, #136	@ (adr r3, 80018a0 <_ZN11Finger_TASK3FSMEv+0x880>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7fe fd58 	bl	80002d0 <__aeabi_dmul>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4620      	mov	r0, r4
 8001826:	4629      	mov	r1, r5
 8001828:	f7ff f8b6 	bl	8000998 <__aeabi_dcmpgt>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d02d      	beq.n	800188e <_ZN11Finger_TASK3FSMEv+0x86e>
			{
				(*FLX).set_current(CURRENT_LIM); // Set MOT current limit
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800183a:	4618      	mov	r0, r3
 800183c:	f002 fda4 	bl	8004388 <_ZN5Motor11set_currentEt>

				// Check if the position is still changing
				if ((*FLX).position == last_pos)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	4b18      	ldr	r3, [pc, #96]	@ (80018a8 <_ZN11Finger_TASK3FSMEv+0x888>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d11c      	bne.n	8001888 <_ZN11Finger_TASK3FSMEv+0x868>
				{
					stuck_cnt++;
 800184e:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <_ZN11Finger_TASK3FSMEv+0x894>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	4a17      	ldr	r2, [pc, #92]	@ (80018b4 <_ZN11Finger_TASK3FSMEv+0x894>)
 8001856:	6013      	str	r3, [r2, #0]

					// Check if its been stuck many times in a row
					if (stuck_cnt > 300)
 8001858:	4b16      	ldr	r3, [pc, #88]	@ (80018b4 <_ZN11Finger_TASK3FSMEv+0x894>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001860:	d915      	bls.n	800188e <_ZN11Finger_TASK3FSMEv+0x86e>
					{
						stuck_cnt = 0; // Reset stuck count
 8001862:	4b14      	ldr	r3, [pc, #80]	@ (80018b4 <_ZN11Finger_TASK3FSMEv+0x894>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
						(*FLX).set_effort(0); // Stop motor moving
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f002 fc9a 	bl	80041a8 <_ZN5Motor10set_effortEl>
						(*FLX).set_zero(); // Zero the encoder
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4618      	mov	r0, r3
 800187a:	f002 fd77 	bl	800436c <_ZN5Motor8set_zeroEv>
						_state = S3_HOME;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2203      	movs	r2, #3
 8001882:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
 8001886:	e002      	b.n	800188e <_ZN11Finger_TASK3FSMEv+0x86e>
					}
				}
				else
				{
					stuck_cnt = 0; // Reset stuck count
 8001888:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <_ZN11Finger_TASK3FSMEv+0x894>)
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
				}
			}

			last_pos = (*FLX).position;  // Update last position
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4a04      	ldr	r2, [pc, #16]	@ (80018a8 <_ZN11Finger_TASK3FSMEv+0x888>)
 8001896:	6013      	str	r3, [r2, #0]
				}
			}

			last_pos = (*ABD).position;  // Update last position
		}
		break;
 8001898:	f000 be67 	b.w	800256a <_ZN11Finger_TASK3FSMEv+0x154a>
 800189c:	f3af 8000 	nop.w
 80018a0:	9999999a 	.word	0x9999999a
 80018a4:	3fe99999 	.word	0x3fe99999
 80018a8:	2000007c 	.word	0x2000007c
 80018ac:	20000084 	.word	0x20000084
 80018b0:	2000008c 	.word	0x2000008c
 80018b4:	20000080 	.word	0x20000080
		else if (XTN_homed == 0)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7c1b      	ldrb	r3, [r3, #16]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d17c      	bne.n	80019ba <_ZN11Finger_TASK3FSMEv+0x99a>
			(*XTN).set_effort((_XTN_max*100)/abs(_XTN_max)); // Move MOT towards hardstop
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681d      	ldr	r5, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80018ca:	2264      	movs	r2, #100	@ 0x64
 80018cc:	fb02 f403 	mul.w	r4, r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff faea 	bl	8000eb0 <_ZSt3absl>
 80018dc:	4603      	mov	r3, r0
 80018de:	fb94 f3f3 	sdiv	r3, r4, r3
 80018e2:	4619      	mov	r1, r3
 80018e4:	4628      	mov	r0, r5
 80018e6:	f002 fc5f 	bl	80041a8 <_ZN5Motor10set_effortEl>
			(*XTN).position = _RLX_max;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 80018f4:	605a      	str	r2, [r3, #4]
			(*XTN).set_effort(0);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f002 fc53 	bl	80041a8 <_ZN5Motor10set_effortEl>
			if (abs((*XTN).position) > 0.8*_RLX_max)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fad1 	bl	8000eb0 <_ZSt3absl>
 800190e:	4603      	mov	r3, r0
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe ff59 	bl	80007c8 <__aeabi_i2d>
 8001916:	4604      	mov	r4, r0
 8001918:	460d      	mov	r5, r1
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe ff51 	bl	80007c8 <__aeabi_i2d>
 8001926:	a39a      	add	r3, pc, #616	@ (adr r3, 8001b90 <_ZN11Finger_TASK3FSMEv+0xb70>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe fcd0 	bl	80002d0 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	2101      	movs	r1, #1
 8001936:	460e      	mov	r6, r1
 8001938:	4620      	mov	r0, r4
 800193a:	4629      	mov	r1, r5
 800193c:	f7ff f82c 	bl	8000998 <__aeabi_dcmpgt>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <_ZN11Finger_TASK3FSMEv+0x92a>
 8001946:	2300      	movs	r3, #0
 8001948:	461e      	mov	r6, r3
 800194a:	b2f3      	uxtb	r3, r6
 800194c:	2b00      	cmp	r3, #0
 800194e:	d02d      	beq.n	80019ac <_ZN11Finger_TASK3FSMEv+0x98c>
				(*XTN).set_current(CURRENT_LIM); // Set MOT current limit
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001958:	4618      	mov	r0, r3
 800195a:	f002 fd15 	bl	8004388 <_ZN5Motor11set_currentEt>
				if ((*XTN).position == last_pos)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	4b8c      	ldr	r3, [pc, #560]	@ (8001b98 <_ZN11Finger_TASK3FSMEv+0xb78>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d11c      	bne.n	80019a6 <_ZN11Finger_TASK3FSMEv+0x986>
					stuck_cnt++;
 800196c:	4b8b      	ldr	r3, [pc, #556]	@ (8001b9c <_ZN11Finger_TASK3FSMEv+0xb7c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	3301      	adds	r3, #1
 8001972:	4a8a      	ldr	r2, [pc, #552]	@ (8001b9c <_ZN11Finger_TASK3FSMEv+0xb7c>)
 8001974:	6013      	str	r3, [r2, #0]
					if (stuck_cnt > 300)
 8001976:	4b89      	ldr	r3, [pc, #548]	@ (8001b9c <_ZN11Finger_TASK3FSMEv+0xb7c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800197e:	d915      	bls.n	80019ac <_ZN11Finger_TASK3FSMEv+0x98c>
						stuck_cnt = 0; // Reset stuck count
 8001980:	4b86      	ldr	r3, [pc, #536]	@ (8001b9c <_ZN11Finger_TASK3FSMEv+0xb7c>)
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
						(*XTN).set_effort(0); // Stop motor moving
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f002 fc0b 	bl	80041a8 <_ZN5Motor10set_effortEl>
						(*XTN).set_zero(); // Zero the encoder
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f002 fce8 	bl	800436c <_ZN5Motor8set_zeroEv>
						_state = S3_HOME;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2203      	movs	r2, #3
 80019a0:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
 80019a4:	e002      	b.n	80019ac <_ZN11Finger_TASK3FSMEv+0x98c>
					stuck_cnt = 0; // Reset stuck count
 80019a6:	4b7d      	ldr	r3, [pc, #500]	@ (8001b9c <_ZN11Finger_TASK3FSMEv+0xb7c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
			last_pos = (*XTN).position;  // Update last position
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	4a79      	ldr	r2, [pc, #484]	@ (8001b98 <_ZN11Finger_TASK3FSMEv+0xb78>)
 80019b4:	6013      	str	r3, [r2, #0]
		break;
 80019b6:	f000 bdd8 	b.w	800256a <_ZN11Finger_TASK3FSMEv+0x154a>
		else if (ADD_homed == 0)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7c9b      	ldrb	r3, [r3, #18]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d16f      	bne.n	8001aa2 <_ZN11Finger_TASK3FSMEv+0xa82>
			(*ADD).set_effort((_ADD_max*100)/abs(_ADD_max)); // Move MOT towards hardstop
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689d      	ldr	r5, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019cc:	2264      	movs	r2, #100	@ 0x64
 80019ce:	fb02 f403 	mul.w	r4, r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fa69 	bl	8000eb0 <_ZSt3absl>
 80019de:	4603      	mov	r3, r0
 80019e0:	fb94 f3f3 	sdiv	r3, r4, r3
 80019e4:	4619      	mov	r1, r3
 80019e6:	4628      	mov	r0, r5
 80019e8:	f002 fbde 	bl	80041a8 <_ZN5Motor10set_effortEl>
			if (abs((*ADD).position) > 0.8*ADD_home)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fa5c 	bl	8000eb0 <_ZSt3absl>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fee4 	bl	80007c8 <__aeabi_i2d>
 8001a00:	4604      	mov	r4, r0
 8001a02:	460d      	mov	r5, r1
 8001a04:	4b66      	ldr	r3, [pc, #408]	@ (8001ba0 <_ZN11Finger_TASK3FSMEv+0xb80>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fedd 	bl	80007c8 <__aeabi_i2d>
 8001a0e:	a360      	add	r3, pc, #384	@ (adr r3, 8001b90 <_ZN11Finger_TASK3FSMEv+0xb70>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	f7fe fc5c 	bl	80002d0 <__aeabi_dmul>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	460e      	mov	r6, r1
 8001a20:	4620      	mov	r0, r4
 8001a22:	4629      	mov	r1, r5
 8001a24:	f7fe ffb8 	bl	8000998 <__aeabi_dcmpgt>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <_ZN11Finger_TASK3FSMEv+0xa12>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	461e      	mov	r6, r3
 8001a32:	b2f3      	uxtb	r3, r6
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d02d      	beq.n	8001a94 <_ZN11Finger_TASK3FSMEv+0xa74>
				(*ADD).set_current(CURRENT_LIM); // Set MOT current limit
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a40:	4618      	mov	r0, r3
 8001a42:	f002 fca1 	bl	8004388 <_ZN5Motor11set_currentEt>
				if ((*ADD).position == last_pos)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	4b52      	ldr	r3, [pc, #328]	@ (8001b98 <_ZN11Finger_TASK3FSMEv+0xb78>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d11c      	bne.n	8001a8e <_ZN11Finger_TASK3FSMEv+0xa6e>
					stuck_cnt++;
 8001a54:	4b51      	ldr	r3, [pc, #324]	@ (8001b9c <_ZN11Finger_TASK3FSMEv+0xb7c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	4a50      	ldr	r2, [pc, #320]	@ (8001b9c <_ZN11Finger_TASK3FSMEv+0xb7c>)
 8001a5c:	6013      	str	r3, [r2, #0]
					if (stuck_cnt > 300)
 8001a5e:	4b4f      	ldr	r3, [pc, #316]	@ (8001b9c <_ZN11Finger_TASK3FSMEv+0xb7c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001a66:	d915      	bls.n	8001a94 <_ZN11Finger_TASK3FSMEv+0xa74>
						stuck_cnt = 0; // Reset stuck count
 8001a68:	4b4c      	ldr	r3, [pc, #304]	@ (8001b9c <_ZN11Finger_TASK3FSMEv+0xb7c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
						(*ADD).set_effort(0); // Stop motor moving
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f002 fb97 	bl	80041a8 <_ZN5Motor10set_effortEl>
						(*ADD).set_zero(); // Zero the encoder
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f002 fc74 	bl	800436c <_ZN5Motor8set_zeroEv>
						_state = S3_HOME;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2203      	movs	r2, #3
 8001a88:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
 8001a8c:	e002      	b.n	8001a94 <_ZN11Finger_TASK3FSMEv+0xa74>
					stuck_cnt = 0; // Reset stuck count
 8001a8e:	4b43      	ldr	r3, [pc, #268]	@ (8001b9c <_ZN11Finger_TASK3FSMEv+0xb7c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
			last_pos = (*ADD).position; // Update last position
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4a3f      	ldr	r2, [pc, #252]	@ (8001b98 <_ZN11Finger_TASK3FSMEv+0xb78>)
 8001a9c:	6013      	str	r3, [r2, #0]
		break;
 8001a9e:	f000 bd64 	b.w	800256a <_ZN11Finger_TASK3FSMEv+0x154a>
		else if (ABD_homed == 0)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7cdb      	ldrb	r3, [r3, #19]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f040 855f 	bne.w	800256a <_ZN11Finger_TASK3FSMEv+0x154a>
			(*ABD).set_effort((_ABD_max*100)/abs(_ABD_max)); // Move MOT towards hardstop
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68dd      	ldr	r5, [r3, #12]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001ab6:	2264      	movs	r2, #100	@ 0x64
 8001ab8:	fb02 f403 	mul.w	r4, r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f9f4 	bl	8000eb0 <_ZSt3absl>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	fb94 f3f3 	sdiv	r3, r4, r3
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4628      	mov	r0, r5
 8001ad2:	f002 fb69 	bl	80041a8 <_ZN5Motor10set_effortEl>
			if (abs((*ABD).position) > 0.8*ABD_home)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff f9e7 	bl	8000eb0 <_ZSt3absl>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fe6f 	bl	80007c8 <__aeabi_i2d>
 8001aea:	4604      	mov	r4, r0
 8001aec:	460d      	mov	r5, r1
 8001aee:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba4 <_ZN11Finger_TASK3FSMEv+0xb84>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fe68 	bl	80007c8 <__aeabi_i2d>
 8001af8:	a325      	add	r3, pc, #148	@ (adr r3, 8001b90 <_ZN11Finger_TASK3FSMEv+0xb70>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	f7fe fbe7 	bl	80002d0 <__aeabi_dmul>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	2101      	movs	r1, #1
 8001b08:	460e      	mov	r6, r1
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f7fe ff43 	bl	8000998 <__aeabi_dcmpgt>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <_ZN11Finger_TASK3FSMEv+0xafc>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	461e      	mov	r6, r3
 8001b1c:	b2f3      	uxtb	r3, r6
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d02d      	beq.n	8001b7e <_ZN11Finger_TASK3FSMEv+0xb5e>
				(*ABD).set_current(CURRENT_LIM); // Set MOT current limit
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 fc2c 	bl	8004388 <_ZN5Motor11set_currentEt>
				if ((*ABD).position == last_pos)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	4b18      	ldr	r3, [pc, #96]	@ (8001b98 <_ZN11Finger_TASK3FSMEv+0xb78>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d11c      	bne.n	8001b78 <_ZN11Finger_TASK3FSMEv+0xb58>
					stuck_cnt++;
 8001b3e:	4b17      	ldr	r3, [pc, #92]	@ (8001b9c <_ZN11Finger_TASK3FSMEv+0xb7c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	3301      	adds	r3, #1
 8001b44:	4a15      	ldr	r2, [pc, #84]	@ (8001b9c <_ZN11Finger_TASK3FSMEv+0xb7c>)
 8001b46:	6013      	str	r3, [r2, #0]
					if (stuck_cnt > 300)
 8001b48:	4b14      	ldr	r3, [pc, #80]	@ (8001b9c <_ZN11Finger_TASK3FSMEv+0xb7c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001b50:	d915      	bls.n	8001b7e <_ZN11Finger_TASK3FSMEv+0xb5e>
						stuck_cnt = 0; // Reset stuck count
 8001b52:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <_ZN11Finger_TASK3FSMEv+0xb7c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
						(*ABD).set_effort(0); // Stop motor moving
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f002 fb22 	bl	80041a8 <_ZN5Motor10set_effortEl>
						(*ABD).set_zero(); // Zero the encoder
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f002 fbff 	bl	800436c <_ZN5Motor8set_zeroEv>
						_state = S3_HOME;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2203      	movs	r2, #3
 8001b72:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
 8001b76:	e002      	b.n	8001b7e <_ZN11Finger_TASK3FSMEv+0xb5e>
					stuck_cnt = 0; // Reset stuck count
 8001b78:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <_ZN11Finger_TASK3FSMEv+0xb7c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
			last_pos = (*ABD).position;  // Update last position
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	4a04      	ldr	r2, [pc, #16]	@ (8001b98 <_ZN11Finger_TASK3FSMEv+0xb78>)
 8001b86:	6013      	str	r3, [r2, #0]
		break;
 8001b88:	f000 bcef 	b.w	800256a <_ZN11Finger_TASK3FSMEv+0x154a>
 8001b8c:	f3af 8000 	nop.w
 8001b90:	9999999a 	.word	0x9999999a
 8001b94:	3fe99999 	.word	0x3fe99999
 8001b98:	2000007c 	.word	0x2000007c
 8001b9c:	20000080 	.word	0x20000080
 8001ba0:	20000084 	.word	0x20000084
 8001ba4:	2000008c 	.word	0x2000008c

	case(S3_HOME):

		// First home FLX
		if (FLX_homed == 0)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7c5b      	ldrb	r3, [r3, #17]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d17a      	bne.n	8001ca6 <_ZN11Finger_TASK3FSMEv+0xc86>
		{
			(*FLX).set_current(4095); // Remove current limit for motor
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f002 fbe5 	bl	8004388 <_ZN5Motor11set_currentEt>
			(*FLX).set_effort(_FLX_pos.PID(-_FLX3_max, (*FLX).position)); // Send FLX to home position
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685c      	ldr	r4, [r3, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f503 7084 	add.w	r0, r3, #264	@ 0x108
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001bce:	4259      	negs	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f7ff f8a4 	bl	8000d24 <_ZN10Controller3PIDEll>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	4619      	mov	r1, r3
 8001be0:	4620      	mov	r0, r4
 8001be2:	f002 fae1 	bl	80041a8 <_ZN5Motor10set_effortEl>

			// Check if FLX settled
			if (abs((*FLX).position - (-_FLX3_max)) < SETTLING_TOL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff f95b 	bl	8000eb0 <_ZSt3absl>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b31      	cmp	r3, #49	@ 0x31
 8001bfe:	bfd4      	ite	le
 8001c00:	2301      	movle	r3, #1
 8001c02:	2300      	movgt	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 84b1 	beq.w	800256e <_ZN11Finger_TASK3FSMEv+0x154e>
			{
				(*FLX).set_effort(0); // Stop motor moving
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f002 fac8 	bl	80041a8 <_ZN5Motor10set_effortEl>
				(*FLX).set_zero(); // Zero the encoder
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f002 fba5 	bl	800436c <_ZN5Motor8set_zeroEv>
				FLX_homed = 1; // Mark FLX as homed
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	745a      	strb	r2, [r3, #17]

				// Check if all motors homed
				if ((FLX_homed == 1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7c5b      	ldrb	r3, [r3, #17]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d134      	bne.n	8001c9a <_ZN11Finger_TASK3FSMEv+0xc7a>
				and (XTN_homed == 1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7c1b      	ldrb	r3, [r3, #16]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d130      	bne.n	8001c9a <_ZN11Finger_TASK3FSMEv+0xc7a>
				and (ADD_homed == 1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7c9b      	ldrb	r3, [r3, #18]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d12c      	bne.n	8001c9a <_ZN11Finger_TASK3FSMEv+0xc7a>
				and (ABD_homed == 1))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	7cdb      	ldrb	r3, [r3, #19]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d128      	bne.n	8001c9a <_ZN11Finger_TASK3FSMEv+0xc7a>
				{
					// Send to zero
					FLX_set = 0;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
					ADD_set = 0;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
					ABD_set = 0;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
					// Clear the list of commands
					motion_index = 0;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					motion_cnt = 0;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
					// Set all motors to 0
					XTN_set = 0;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
					FLX_set = 0;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
					ADD_set = 0;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
					ABD_set = 0;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
					_state = S4_HUB;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2204      	movs	r2, #4
 8001c94:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
 8001c98:	e184      	b.n	8001fa4 <_ZN11Finger_TASK3FSMEv+0xf84>
				}
				else
				{
					_state = S1_RELAX;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
				{
					_state = S1_RELAX;
				}
			}
		}
		break;
 8001ca2:	f000 bc64 	b.w	800256e <_ZN11Finger_TASK3FSMEv+0x154e>
		else if (XTN_homed == 0)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	7c1b      	ldrb	r3, [r3, #16]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f040 8081 	bne.w	8001db2 <_ZN11Finger_TASK3FSMEv+0xd92>
			(*XTN).position = -_XTN_max;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4252      	negs	r2, r2
 8001cbc:	605a      	str	r2, [r3, #4]
			(*XTN).set_current(4095); // Remove current limit for motor
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f002 fb5e 	bl	8004388 <_ZN5Motor11set_currentEt>
			(*XTN).set_effort(_XTN_pos.PID(-_XTN_max, (*XTN).position)); // Send XTN to home position
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681c      	ldr	r4, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001cdc:	4259      	negs	r1, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	f7ff f81d 	bl	8000d24 <_ZN10Controller3PIDEll>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4619      	mov	r1, r3
 8001cee:	4620      	mov	r0, r4
 8001cf0:	f002 fa5a 	bl	80041a8 <_ZN5Motor10set_effortEl>
			if (abs((*XTN).position - (-_XTN_max)) < SETTLING_TOL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001d00:	4413      	add	r3, r2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f8d4 	bl	8000eb0 <_ZSt3absl>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b31      	cmp	r3, #49	@ 0x31
 8001d0c:	bfd4      	ite	le
 8001d0e:	2301      	movle	r3, #1
 8001d10:	2300      	movgt	r3, #0
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 842a 	beq.w	800256e <_ZN11Finger_TASK3FSMEv+0x154e>
				(*XTN).set_effort(0); // Stop motor moving
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f002 fa41 	bl	80041a8 <_ZN5Motor10set_effortEl>
				(*XTN).set_zero(); // Zero the encoder
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f002 fb1e 	bl	800436c <_ZN5Motor8set_zeroEv>
				XTN_homed = 1; // Mark XTN as homed
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	741a      	strb	r2, [r3, #16]
				if ((FLX_homed == 1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	7c5b      	ldrb	r3, [r3, #17]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d134      	bne.n	8001da8 <_ZN11Finger_TASK3FSMEv+0xd88>
				and (XTN_homed == 1)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7c1b      	ldrb	r3, [r3, #16]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d130      	bne.n	8001da8 <_ZN11Finger_TASK3FSMEv+0xd88>
				and (ADD_homed == 1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	7c9b      	ldrb	r3, [r3, #18]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d12c      	bne.n	8001da8 <_ZN11Finger_TASK3FSMEv+0xd88>
				and (ABD_homed == 1))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	7cdb      	ldrb	r3, [r3, #19]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d128      	bne.n	8001da8 <_ZN11Finger_TASK3FSMEv+0xd88>
					FLX_set = 0;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
					ADD_set = 0;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
					ABD_set = 0;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
					motion_index = 0;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					motion_cnt = 0;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
					XTN_set = 0;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
					FLX_set = 0;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
					ADD_set = 0;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
					ABD_set = 0;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
					_state = S4_HUB;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2204      	movs	r2, #4
 8001da2:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
 8001da6:	e0fd      	b.n	8001fa4 <_ZN11Finger_TASK3FSMEv+0xf84>
					_state = S1_RELAX;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
		break;
 8001db0:	e3dd      	b.n	800256e <_ZN11Finger_TASK3FSMEv+0x154e>
		else if (ADD_homed == 0)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	7c9b      	ldrb	r3, [r3, #18]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d177      	bne.n	8001eaa <_ZN11Finger_TASK3FSMEv+0xe8a>
			(*ADD).set_current(4095); // Remove current limit for motor
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f002 fae0 	bl	8004388 <_ZN5Motor11set_currentEt>
			(*ADD).set_effort(_ADD_pos.PID(-ADD_home, (*ADD).position)); // Send ADD to home position
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689c      	ldr	r4, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 8001dd2:	4b9c      	ldr	r3, [pc, #624]	@ (8002044 <_ZN11Finger_TASK3FSMEv+0x1024>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4259      	negs	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	461a      	mov	r2, r3
 8001de0:	f7fe ffa0 	bl	8000d24 <_ZN10Controller3PIDEll>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4619      	mov	r1, r3
 8001de8:	4620      	mov	r0, r4
 8001dea:	f002 f9dd 	bl	80041a8 <_ZN5Motor10set_effortEl>
			if (abs((*ADD).position - (-ADD_home)) < SETTLING_TOL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	4b93      	ldr	r3, [pc, #588]	@ (8002044 <_ZN11Finger_TASK3FSMEv+0x1024>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4413      	add	r3, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff f858 	bl	8000eb0 <_ZSt3absl>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b31      	cmp	r3, #49	@ 0x31
 8001e04:	bfd4      	ite	le
 8001e06:	2301      	movle	r3, #1
 8001e08:	2300      	movgt	r3, #0
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 83ae 	beq.w	800256e <_ZN11Finger_TASK3FSMEv+0x154e>
				(*ADD).set_effort(0); // Stop motor moving
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f002 f9c5 	bl	80041a8 <_ZN5Motor10set_effortEl>
				(*ADD).set_zero(); // Zero the encoder
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f002 faa2 	bl	800436c <_ZN5Motor8set_zeroEv>
				ADD_homed = 1; // Mark ADD as homed
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	749a      	strb	r2, [r3, #18]
				if ((FLX_homed == 1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	7c5b      	ldrb	r3, [r3, #17]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d134      	bne.n	8001ea0 <_ZN11Finger_TASK3FSMEv+0xe80>
				and (XTN_homed == 1)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7c1b      	ldrb	r3, [r3, #16]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d130      	bne.n	8001ea0 <_ZN11Finger_TASK3FSMEv+0xe80>
				and (ADD_homed == 1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7c9b      	ldrb	r3, [r3, #18]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d12c      	bne.n	8001ea0 <_ZN11Finger_TASK3FSMEv+0xe80>
				and (ABD_homed == 1))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	7cdb      	ldrb	r3, [r3, #19]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d128      	bne.n	8001ea0 <_ZN11Finger_TASK3FSMEv+0xe80>
					FLX_set = 0;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
					ADD_set = 0;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
					ABD_set = 0;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
					motion_index = 0;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					motion_cnt = 0;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
					XTN_set = 0;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
					FLX_set = 0;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
					ADD_set = 0;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
					ABD_set = 0;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
					_state = S4_HUB;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2204      	movs	r2, #4
 8001e9a:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
 8001e9e:	e081      	b.n	8001fa4 <_ZN11Finger_TASK3FSMEv+0xf84>
					_state = S1_RELAX;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
		break;
 8001ea8:	e361      	b.n	800256e <_ZN11Finger_TASK3FSMEv+0x154e>
		else if (ABD_homed == 0)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7cdb      	ldrb	r3, [r3, #19]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 835d 	bne.w	800256e <_ZN11Finger_TASK3FSMEv+0x154e>
			(*ABD).set_current(4095); // Remove current limit for motor
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f002 fa63 	bl	8004388 <_ZN5Motor11set_currentEt>
			(*ABD).set_effort(_ABD_pos.PID(-ABD_home, (*ABD).position)); // Send ABD to home position
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68dc      	ldr	r4, [r3, #12]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f503 70a0 	add.w	r0, r3, #320	@ 0x140
 8001ecc:	4b5e      	ldr	r3, [pc, #376]	@ (8002048 <_ZN11Finger_TASK3FSMEv+0x1028>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4259      	negs	r1, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	f7fe ff23 	bl	8000d24 <_ZN10Controller3PIDEll>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f002 f960 	bl	80041a8 <_ZN5Motor10set_effortEl>
			if (abs((*ABD).position - (-ABD_home)) < SETTLING_TOL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	4b56      	ldr	r3, [pc, #344]	@ (8002048 <_ZN11Finger_TASK3FSMEv+0x1028>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe ffdb 	bl	8000eb0 <_ZSt3absl>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b31      	cmp	r3, #49	@ 0x31
 8001efe:	bfd4      	ite	le
 8001f00:	2301      	movle	r3, #1
 8001f02:	2300      	movgt	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 8331 	beq.w	800256e <_ZN11Finger_TASK3FSMEv+0x154e>
				(*ABD).set_effort(0); // Stop motor moving
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 f948 	bl	80041a8 <_ZN5Motor10set_effortEl>
				(*ABD).set_zero(); // Zero the encoder
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f002 fa25 	bl	800436c <_ZN5Motor8set_zeroEv>
				ABD_homed = 1; // Mark ADD as homed
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	74da      	strb	r2, [r3, #19]
				if ((FLX_homed == 1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	7c5b      	ldrb	r3, [r3, #17]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d134      	bne.n	8001f9a <_ZN11Finger_TASK3FSMEv+0xf7a>
				and (XTN_homed == 1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	7c1b      	ldrb	r3, [r3, #16]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d130      	bne.n	8001f9a <_ZN11Finger_TASK3FSMEv+0xf7a>
				and (ADD_homed == 1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	7c9b      	ldrb	r3, [r3, #18]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d12c      	bne.n	8001f9a <_ZN11Finger_TASK3FSMEv+0xf7a>
				and (ABD_homed == 1))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	7cdb      	ldrb	r3, [r3, #19]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d128      	bne.n	8001f9a <_ZN11Finger_TASK3FSMEv+0xf7a>
					FLX_set = 0;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
					ADD_set = 0;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
					ABD_set = 0;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
					motion_index = 0;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					motion_cnt = 0;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
					XTN_set = 0;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
					FLX_set = 0;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
					ADD_set = 0;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
					ABD_set = 0;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
					_state = S4_HUB;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2204      	movs	r2, #4
 8001f94:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
 8001f98:	e004      	b.n	8001fa4 <_ZN11Finger_TASK3FSMEv+0xf84>
					_state = S1_RELAX;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
		break;
 8001fa2:	e2e4      	b.n	800256e <_ZN11Finger_TASK3FSMEv+0x154e>
 8001fa4:	e2e3      	b.n	800256e <_ZN11Finger_TASK3FSMEv+0x154e>

	case(S4_HUB):

		// Check that motion_index is within the bounds of the sequence
		if ((motion_index >= 0) and (motion_index < motion_cnt))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d25b      	bcs.n	800206e <_ZN11Finger_TASK3FSMEv+0x104e>
		{
			// Check if the delay has expired
			if ((HAL_GetTick() - start) >= motion_delay)
 8001fb6:	f003 f809 	bl	8004fcc <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	4b23      	ldr	r3, [pc, #140]	@ (800204c <_ZN11Finger_TASK3FSMEv+0x102c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	1ad2      	subs	r2, r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	bf2c      	ite	cs
 8001fcc:	2301      	movcs	r3, #1
 8001fce:	2300      	movcc	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d04b      	beq.n	800206e <_ZN11Finger_TASK3FSMEv+0x104e>
			{
				// Check if joints have settled
				if ((abs((*XTN).position - XTN_set) < SETTLING_TOL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe ff63 	bl	8000eb0 <_ZSt3absl>
 8001fea:	4603      	mov	r3, r0
				and	(abs((*FLX).position - FLX_set) < SETTLING_TOL)
				and (abs((*ADD).position - ADD_set) < SETTLING_TOL)
				and (abs((*ABD).position - ABD_set) < SETTLING_TOL))
 8001fec:	2b31      	cmp	r3, #49	@ 0x31
 8001fee:	dc2f      	bgt.n	8002050 <_ZN11Finger_TASK3FSMEv+0x1030>
				and	(abs((*FLX).position - FLX_set) < SETTLING_TOL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe ff56 	bl	8000eb0 <_ZSt3absl>
 8002004:	4603      	mov	r3, r0
 8002006:	2b31      	cmp	r3, #49	@ 0x31
 8002008:	dc22      	bgt.n	8002050 <_ZN11Finger_TASK3FSMEv+0x1030>
				and (abs((*ADD).position - ADD_set) < SETTLING_TOL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe ff49 	bl	8000eb0 <_ZSt3absl>
 800201e:	4603      	mov	r3, r0
 8002020:	2b31      	cmp	r3, #49	@ 0x31
 8002022:	dc15      	bgt.n	8002050 <_ZN11Finger_TASK3FSMEv+0x1030>
				and (abs((*ABD).position - ABD_set) < SETTLING_TOL))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe ff3c 	bl	8000eb0 <_ZSt3absl>
 8002038:	4603      	mov	r3, r0
 800203a:	2b31      	cmp	r3, #49	@ 0x31
 800203c:	dc08      	bgt.n	8002050 <_ZN11Finger_TASK3FSMEv+0x1030>
 800203e:	2301      	movs	r3, #1
 8002040:	e007      	b.n	8002052 <_ZN11Finger_TASK3FSMEv+0x1032>
 8002042:	bf00      	nop
 8002044:	20000084 	.word	0x20000084
 8002048:	2000008c 	.word	0x2000008c
 800204c:	200000a0 	.word	0x200000a0
 8002050:	2300      	movs	r3, #0
				if ((abs((*XTN).position - XTN_set) < SETTLING_TOL)
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00b      	beq.n	800206e <_ZN11Finger_TASK3FSMEv+0x104e>
				{
					motion_index++; // Start next motion
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					start = HAL_GetTick(); // Update start time for delay
 8002064:	f002 ffb2 	bl	8004fcc <HAL_GetTick>
 8002068:	4603      	mov	r3, r0
 800206a:	4aa4      	ldr	r2, [pc, #656]	@ (80022fc <_ZN11Finger_TASK3FSMEv+0x12dc>)
 800206c:	6013      	str	r3, [r2, #0]
				}
			}
		}

		switch(motion_list[motion_index].form) // Switch behavior based on motion form
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	3302      	adds	r3, #2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	791b      	ldrb	r3, [r3, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	2b08      	cmp	r3, #8
 8002082:	f200 821d 	bhi.w	80024c0 <_ZN11Finger_TASK3FSMEv+0x14a0>
 8002086:	a201      	add	r2, pc, #4	@ (adr r2, 800208c <_ZN11Finger_TASK3FSMEv+0x106c>)
 8002088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208c:	080020b1 	.word	0x080020b1
 8002090:	080024c1 	.word	0x080024c1
 8002094:	080024c1 	.word	0x080024c1
 8002098:	080020d3 	.word	0x080020d3
 800209c:	080020ef 	.word	0x080020ef
 80020a0:	080021bd 	.word	0x080021bd
 80020a4:	08002259 	.word	0x08002259
 80020a8:	08002315 	.word	0x08002315
 80020ac:	080023eb 	.word	0x080023eb
		{
		case(HOME): // Home the finger
			// Set all homed flags to false
			FLX_homed = 0;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	745a      	strb	r2, [r3, #17]
			XTN_homed = 0;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	741a      	strb	r2, [r3, #16]
			ADD_homed = 0;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	749a      	strb	r2, [r3, #18]
			ABD_homed = 0;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	74da      	strb	r2, [r3, #19]
			_state = S1_RELAX;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
			break;
 80020d0:	e1f6      	b.n	80024c0 <_ZN11Finger_TASK3FSMEv+0x14a0>
		case(HUB): // Restart sequence (keeps at zero until motions added or allows loops)
			motion_index = 0;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
			start = HAL_GetTick() - motion_delay; // Makes it so loop command doesnt delay
 80020da:	f002 ff77 	bl	8004fcc <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	4a84      	ldr	r2, [pc, #528]	@ (80022fc <_ZN11Finger_TASK3FSMEv+0x12dc>)
 80020ea:	6013      	str	r3, [r2, #0]
			break;
 80020ec:	e1e8      	b.n	80024c0 <_ZN11Finger_TASK3FSMEv+0x14a0>
		case(FLX3):
			setpoint = motion_list[motion_index].setpoint; // Update setpoint
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	3302      	adds	r3, #2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	4a80      	ldr	r2, [pc, #512]	@ (8002300 <_ZN11Finger_TASK3FSMEv+0x12e0>)
 8002100:	6013      	str	r3, [r2, #0]

			// Update desired motor positions
			XTN_set = (-(setpoint*_XTN_max)-(setpoint*_RLX_max))/100;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002108:	4a7d      	ldr	r2, [pc, #500]	@ (8002300 <_ZN11Finger_TASK3FSMEv+0x12e0>)
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	fb02 f303 	mul.w	r3, r2, r3
 8002110:	425a      	negs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002118:	4979      	ldr	r1, [pc, #484]	@ (8002300 <_ZN11Finger_TASK3FSMEv+0x12e0>)
 800211a:	6809      	ldr	r1, [r1, #0]
 800211c:	fb01 f303 	mul.w	r3, r1, r3
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	4a78      	ldr	r2, [pc, #480]	@ (8002304 <_ZN11Finger_TASK3FSMEv+0x12e4>)
 8002124:	fb82 1203 	smull	r1, r2, r2, r3
 8002128:	1152      	asrs	r2, r2, #5
 800212a:	17db      	asrs	r3, r3, #31
 800212c:	1ad2      	subs	r2, r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
			FLX_set = (setpoint*_FLX3_max)/100;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800213a:	4a71      	ldr	r2, [pc, #452]	@ (8002300 <_ZN11Finger_TASK3FSMEv+0x12e0>)
 800213c:	6812      	ldr	r2, [r2, #0]
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	4a70      	ldr	r2, [pc, #448]	@ (8002304 <_ZN11Finger_TASK3FSMEv+0x12e4>)
 8002144:	fb82 1203 	smull	r1, r2, r2, r3
 8002148:	1152      	asrs	r2, r2, #5
 800214a:	17db      	asrs	r3, r3, #31
 800214c:	1ad2      	subs	r2, r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
			ADD_set = ((ADD_setpoint*_ADD_max)-(setpoint*_RLX_max))/100;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800215a:	4a6b      	ldr	r2, [pc, #428]	@ (8002308 <_ZN11Finger_TASK3FSMEv+0x12e8>)
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	fb03 f202 	mul.w	r2, r3, r2
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002168:	4965      	ldr	r1, [pc, #404]	@ (8002300 <_ZN11Finger_TASK3FSMEv+0x12e0>)
 800216a:	6809      	ldr	r1, [r1, #0]
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	4a64      	ldr	r2, [pc, #400]	@ (8002304 <_ZN11Finger_TASK3FSMEv+0x12e4>)
 8002174:	fb82 1203 	smull	r1, r2, r2, r3
 8002178:	1152      	asrs	r2, r2, #5
 800217a:	17db      	asrs	r3, r3, #31
 800217c:	1ad2      	subs	r2, r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
			ABD_set = ((ABD_setpoint*_ABD_max)-(setpoint*_RLX_max))/100;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800218a:	4a60      	ldr	r2, [pc, #384]	@ (800230c <_ZN11Finger_TASK3FSMEv+0x12ec>)
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	fb03 f202 	mul.w	r2, r3, r2
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002198:	4959      	ldr	r1, [pc, #356]	@ (8002300 <_ZN11Finger_TASK3FSMEv+0x12e0>)
 800219a:	6809      	ldr	r1, [r1, #0]
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	4a58      	ldr	r2, [pc, #352]	@ (8002304 <_ZN11Finger_TASK3FSMEv+0x12e4>)
 80021a4:	fb82 1203 	smull	r1, r2, r2, r3
 80021a8:	1152      	asrs	r2, r2, #5
 80021aa:	17db      	asrs	r3, r3, #31
 80021ac:	1ad2      	subs	r2, r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

			prev_form = FLX3; // Update previous form for ADD/ABD
 80021b4:	4b56      	ldr	r3, [pc, #344]	@ (8002310 <_ZN11Finger_TASK3FSMEv+0x12f0>)
 80021b6:	2205      	movs	r2, #5
 80021b8:	701a      	strb	r2, [r3, #0]
			break;
 80021ba:	e181      	b.n	80024c0 <_ZN11Finger_TASK3FSMEv+0x14a0>
		case(FLX2):
			setpoint = motion_list[motion_index].setpoint; // Update setpoint
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	3302      	adds	r3, #2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002300 <_ZN11Finger_TASK3FSMEv+0x12e0>)
 80021ce:	6013      	str	r3, [r2, #0]

			// Update desired motor positions
			XTN_set = -(setpoint*_XTN_max)/100;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80021d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002300 <_ZN11Finger_TASK3FSMEv+0x12e0>)
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	fb02 f303 	mul.w	r3, r2, r3
 80021de:	4a49      	ldr	r2, [pc, #292]	@ (8002304 <_ZN11Finger_TASK3FSMEv+0x12e4>)
 80021e0:	fb82 1203 	smull	r1, r2, r2, r3
 80021e4:	1152      	asrs	r2, r2, #5
 80021e6:	17db      	asrs	r3, r3, #31
 80021e8:	1a9a      	subs	r2, r3, r2
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
			FLX_set = (setpoint*_FLX2_max)/100;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80021f6:	4a42      	ldr	r2, [pc, #264]	@ (8002300 <_ZN11Finger_TASK3FSMEv+0x12e0>)
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	4a41      	ldr	r2, [pc, #260]	@ (8002304 <_ZN11Finger_TASK3FSMEv+0x12e4>)
 8002200:	fb82 1203 	smull	r1, r2, r2, r3
 8002204:	1152      	asrs	r2, r2, #5
 8002206:	17db      	asrs	r3, r3, #31
 8002208:	1ad2      	subs	r2, r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
			ADD_set = (ADD_setpoint*_ADD_max)/100;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002216:	4a3c      	ldr	r2, [pc, #240]	@ (8002308 <_ZN11Finger_TASK3FSMEv+0x12e8>)
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	4a39      	ldr	r2, [pc, #228]	@ (8002304 <_ZN11Finger_TASK3FSMEv+0x12e4>)
 8002220:	fb82 1203 	smull	r1, r2, r2, r3
 8002224:	1152      	asrs	r2, r2, #5
 8002226:	17db      	asrs	r3, r3, #31
 8002228:	1ad2      	subs	r2, r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
			ABD_set = (ABD_setpoint*_ABD_max)/100;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002236:	4a35      	ldr	r2, [pc, #212]	@ (800230c <_ZN11Finger_TASK3FSMEv+0x12ec>)
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	fb02 f303 	mul.w	r3, r2, r3
 800223e:	4a31      	ldr	r2, [pc, #196]	@ (8002304 <_ZN11Finger_TASK3FSMEv+0x12e4>)
 8002240:	fb82 1203 	smull	r1, r2, r2, r3
 8002244:	1152      	asrs	r2, r2, #5
 8002246:	17db      	asrs	r3, r3, #31
 8002248:	1ad2      	subs	r2, r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

			prev_form = FLX2; // Update previous form for ADD/ABD
 8002250:	4b2f      	ldr	r3, [pc, #188]	@ (8002310 <_ZN11Finger_TASK3FSMEv+0x12f0>)
 8002252:	2206      	movs	r2, #6
 8002254:	701a      	strb	r2, [r3, #0]
			break;
 8002256:	e133      	b.n	80024c0 <_ZN11Finger_TASK3FSMEv+0x14a0>
		case(FLX1):
			setpoint = motion_list[motion_index].setpoint;  // Update setpoint
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	3302      	adds	r3, #2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4413      	add	r3, r2
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a25      	ldr	r2, [pc, #148]	@ (8002300 <_ZN11Finger_TASK3FSMEv+0x12e0>)
 800226a:	6013      	str	r3, [r2, #0]

			// Update desired motor positions
			XTN_set = 0;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
			FLX_set = (setpoint*_FLX1_max)/100;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800227a:	4a21      	ldr	r2, [pc, #132]	@ (8002300 <_ZN11Finger_TASK3FSMEv+0x12e0>)
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	fb02 f303 	mul.w	r3, r2, r3
 8002282:	4a20      	ldr	r2, [pc, #128]	@ (8002304 <_ZN11Finger_TASK3FSMEv+0x12e4>)
 8002284:	fb82 1203 	smull	r1, r2, r2, r3
 8002288:	1152      	asrs	r2, r2, #5
 800228a:	17db      	asrs	r3, r3, #31
 800228c:	1ad2      	subs	r2, r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
			ADD_set = ((ADD_setpoint*_ADD_max)-(setpoint*_RLX_max))/100;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800229a:	4a1b      	ldr	r2, [pc, #108]	@ (8002308 <_ZN11Finger_TASK3FSMEv+0x12e8>)
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	fb03 f202 	mul.w	r2, r3, r2
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022a8:	4915      	ldr	r1, [pc, #84]	@ (8002300 <_ZN11Finger_TASK3FSMEv+0x12e0>)
 80022aa:	6809      	ldr	r1, [r1, #0]
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	4a14      	ldr	r2, [pc, #80]	@ (8002304 <_ZN11Finger_TASK3FSMEv+0x12e4>)
 80022b4:	fb82 1203 	smull	r1, r2, r2, r3
 80022b8:	1152      	asrs	r2, r2, #5
 80022ba:	17db      	asrs	r3, r3, #31
 80022bc:	1ad2      	subs	r2, r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
			ABD_set = ((ABD_setpoint*_ABD_max)-(setpoint*_RLX_max))/100;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80022ca:	4a10      	ldr	r2, [pc, #64]	@ (800230c <_ZN11Finger_TASK3FSMEv+0x12ec>)
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	fb03 f202 	mul.w	r2, r3, r2
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022d8:	4909      	ldr	r1, [pc, #36]	@ (8002300 <_ZN11Finger_TASK3FSMEv+0x12e0>)
 80022da:	6809      	ldr	r1, [r1, #0]
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	4a08      	ldr	r2, [pc, #32]	@ (8002304 <_ZN11Finger_TASK3FSMEv+0x12e4>)
 80022e4:	fb82 1203 	smull	r1, r2, r2, r3
 80022e8:	1152      	asrs	r2, r2, #5
 80022ea:	17db      	asrs	r3, r3, #31
 80022ec:	1ad2      	subs	r2, r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

			prev_form = FLX1; // Update previous form for ADD/ABD
 80022f4:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <_ZN11Finger_TASK3FSMEv+0x12f0>)
 80022f6:	2207      	movs	r2, #7
 80022f8:	701a      	strb	r2, [r3, #0]
			break;
 80022fa:	e0e1      	b.n	80024c0 <_ZN11Finger_TASK3FSMEv+0x14a0>
 80022fc:	200000a0 	.word	0x200000a0
 8002300:	20000094 	.word	0x20000094
 8002304:	51eb851f 	.word	0x51eb851f
 8002308:	20000098 	.word	0x20000098
 800230c:	2000009c 	.word	0x2000009c
 8002310:	20000000 	.word	0x20000000
		case(ADDN):
			// Update ADD/ABD setpoints
			ADD_setpoint =  motion_list[motion_index].setpoint;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	3302      	adds	r3, #2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4413      	add	r3, r2
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	4a94      	ldr	r2, [pc, #592]	@ (8002578 <_ZN11Finger_TASK3FSMEv+0x1558>)
 8002326:	6013      	str	r3, [r2, #0]
			ABD_setpoint = -motion_list[motion_index].setpoint;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	3302      	adds	r3, #2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	425b      	negs	r3, r3
 800233a:	4a90      	ldr	r2, [pc, #576]	@ (800257c <_ZN11Finger_TASK3FSMEv+0x155c>)
 800233c:	6013      	str	r3, [r2, #0]

			if (prev_form == FLX2) // If last form was FLX2 ADD/ABD needs to be a bit different
 800233e:	4b90      	ldr	r3, [pc, #576]	@ (8002580 <_ZN11Finger_TASK3FSMEv+0x1560>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b06      	cmp	r3, #6
 8002344:	d120      	bne.n	8002388 <_ZN11Finger_TASK3FSMEv+0x1368>
			{
				// Update desired motor positions
				ADD_set = (ADD_setpoint*_ADD_max)/100;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800234c:	4a8a      	ldr	r2, [pc, #552]	@ (8002578 <_ZN11Finger_TASK3FSMEv+0x1558>)
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	fb02 f303 	mul.w	r3, r2, r3
 8002354:	4a8b      	ldr	r2, [pc, #556]	@ (8002584 <_ZN11Finger_TASK3FSMEv+0x1564>)
 8002356:	fb82 1203 	smull	r1, r2, r2, r3
 800235a:	1152      	asrs	r2, r2, #5
 800235c:	17db      	asrs	r3, r3, #31
 800235e:	1ad2      	subs	r2, r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
				ABD_set = (ABD_setpoint*_ABD_max)/100;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800236c:	4a83      	ldr	r2, [pc, #524]	@ (800257c <_ZN11Finger_TASK3FSMEv+0x155c>)
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	fb02 f303 	mul.w	r3, r2, r3
 8002374:	4a83      	ldr	r2, [pc, #524]	@ (8002584 <_ZN11Finger_TASK3FSMEv+0x1564>)
 8002376:	fb82 1203 	smull	r1, r2, r2, r3
 800237a:	1152      	asrs	r2, r2, #5
 800237c:	17db      	asrs	r3, r3, #31
 800237e:	1ad2      	subs	r2, r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			{
				// Update desired motor positions
				ADD_set = ((ADD_setpoint*_ADD_max)-(setpoint*_RLX_max))/100;
				ABD_set = ((ABD_setpoint*_ABD_max)-(setpoint*_RLX_max))/100;
			}
			break;
 8002386:	e09b      	b.n	80024c0 <_ZN11Finger_TASK3FSMEv+0x14a0>
				ADD_set = ((ADD_setpoint*_ADD_max)-(setpoint*_RLX_max))/100;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800238e:	4a7a      	ldr	r2, [pc, #488]	@ (8002578 <_ZN11Finger_TASK3FSMEv+0x1558>)
 8002390:	6812      	ldr	r2, [r2, #0]
 8002392:	fb03 f202 	mul.w	r2, r3, r2
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800239c:	497a      	ldr	r1, [pc, #488]	@ (8002588 <_ZN11Finger_TASK3FSMEv+0x1568>)
 800239e:	6809      	ldr	r1, [r1, #0]
 80023a0:	fb01 f303 	mul.w	r3, r1, r3
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	4a77      	ldr	r2, [pc, #476]	@ (8002584 <_ZN11Finger_TASK3FSMEv+0x1564>)
 80023a8:	fb82 1203 	smull	r1, r2, r2, r3
 80023ac:	1152      	asrs	r2, r2, #5
 80023ae:	17db      	asrs	r3, r3, #31
 80023b0:	1ad2      	subs	r2, r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
				ABD_set = ((ABD_setpoint*_ABD_max)-(setpoint*_RLX_max))/100;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80023be:	4a6f      	ldr	r2, [pc, #444]	@ (800257c <_ZN11Finger_TASK3FSMEv+0x155c>)
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	fb03 f202 	mul.w	r2, r3, r2
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023cc:	496e      	ldr	r1, [pc, #440]	@ (8002588 <_ZN11Finger_TASK3FSMEv+0x1568>)
 80023ce:	6809      	ldr	r1, [r1, #0]
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	4a6b      	ldr	r2, [pc, #428]	@ (8002584 <_ZN11Finger_TASK3FSMEv+0x1564>)
 80023d8:	fb82 1203 	smull	r1, r2, r2, r3
 80023dc:	1152      	asrs	r2, r2, #5
 80023de:	17db      	asrs	r3, r3, #31
 80023e0:	1ad2      	subs	r2, r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			break;
 80023e8:	e06a      	b.n	80024c0 <_ZN11Finger_TASK3FSMEv+0x14a0>
		case(ABDN):
			// Update ADD/ABD setpoints
			ADD_setpoint = -motion_list[motion_index].setpoint;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	3302      	adds	r3, #2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4413      	add	r3, r2
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	425b      	negs	r3, r3
 80023fc:	4a5e      	ldr	r2, [pc, #376]	@ (8002578 <_ZN11Finger_TASK3FSMEv+0x1558>)
 80023fe:	6013      	str	r3, [r2, #0]
			ABD_setpoint =  motion_list[motion_index].setpoint;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	3302      	adds	r3, #2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4a5a      	ldr	r2, [pc, #360]	@ (800257c <_ZN11Finger_TASK3FSMEv+0x155c>)
 8002412:	6013      	str	r3, [r2, #0]

			if (prev_form == FLX2) // If last form was FLX2 ADD/ABD needs to be a bit different
 8002414:	4b5a      	ldr	r3, [pc, #360]	@ (8002580 <_ZN11Finger_TASK3FSMEv+0x1560>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b06      	cmp	r3, #6
 800241a:	d120      	bne.n	800245e <_ZN11Finger_TASK3FSMEv+0x143e>
			{
				// Update desired motor positions
				ADD_set = (ADD_setpoint*_ADD_max)/100;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002422:	4a55      	ldr	r2, [pc, #340]	@ (8002578 <_ZN11Finger_TASK3FSMEv+0x1558>)
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	fb02 f303 	mul.w	r3, r2, r3
 800242a:	4a56      	ldr	r2, [pc, #344]	@ (8002584 <_ZN11Finger_TASK3FSMEv+0x1564>)
 800242c:	fb82 1203 	smull	r1, r2, r2, r3
 8002430:	1152      	asrs	r2, r2, #5
 8002432:	17db      	asrs	r3, r3, #31
 8002434:	1ad2      	subs	r2, r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
				ABD_set = (ABD_setpoint*_ABD_max)/100;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002442:	4a4e      	ldr	r2, [pc, #312]	@ (800257c <_ZN11Finger_TASK3FSMEv+0x155c>)
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	fb02 f303 	mul.w	r3, r2, r3
 800244a:	4a4e      	ldr	r2, [pc, #312]	@ (8002584 <_ZN11Finger_TASK3FSMEv+0x1564>)
 800244c:	fb82 1203 	smull	r1, r2, r2, r3
 8002450:	1152      	asrs	r2, r2, #5
 8002452:	17db      	asrs	r3, r3, #31
 8002454:	1ad2      	subs	r2, r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			{
				// Update desired motor positions
				ADD_set = ((ADD_setpoint*_ADD_max)-(setpoint*_RLX_max))/100;
				ABD_set = ((ABD_setpoint*_ABD_max)-(setpoint*_RLX_max))/100;
			}
			break;
 800245c:	e02f      	b.n	80024be <_ZN11Finger_TASK3FSMEv+0x149e>
				ADD_set = ((ADD_setpoint*_ADD_max)-(setpoint*_RLX_max))/100;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002464:	4a44      	ldr	r2, [pc, #272]	@ (8002578 <_ZN11Finger_TASK3FSMEv+0x1558>)
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	fb03 f202 	mul.w	r2, r3, r2
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002472:	4945      	ldr	r1, [pc, #276]	@ (8002588 <_ZN11Finger_TASK3FSMEv+0x1568>)
 8002474:	6809      	ldr	r1, [r1, #0]
 8002476:	fb01 f303 	mul.w	r3, r1, r3
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	4a41      	ldr	r2, [pc, #260]	@ (8002584 <_ZN11Finger_TASK3FSMEv+0x1564>)
 800247e:	fb82 1203 	smull	r1, r2, r2, r3
 8002482:	1152      	asrs	r2, r2, #5
 8002484:	17db      	asrs	r3, r3, #31
 8002486:	1ad2      	subs	r2, r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
				ABD_set = ((ABD_setpoint*_ABD_max)-(setpoint*_RLX_max))/100;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002494:	4a39      	ldr	r2, [pc, #228]	@ (800257c <_ZN11Finger_TASK3FSMEv+0x155c>)
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	fb03 f202 	mul.w	r2, r3, r2
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024a2:	4939      	ldr	r1, [pc, #228]	@ (8002588 <_ZN11Finger_TASK3FSMEv+0x1568>)
 80024a4:	6809      	ldr	r1, [r1, #0]
 80024a6:	fb01 f303 	mul.w	r3, r1, r3
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	4a35      	ldr	r2, [pc, #212]	@ (8002584 <_ZN11Finger_TASK3FSMEv+0x1564>)
 80024ae:	fb82 1203 	smull	r1, r2, r2, r3
 80024b2:	1152      	asrs	r2, r2, #5
 80024b4:	17db      	asrs	r3, r3, #31
 80024b6:	1ad2      	subs	r2, r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
			break;
 80024be:	bf00      	nop
		}

		// Thumb is missing XTN motor so avoid it
		#ifdef THUMB_FINGER
					(*XTN).position = XTN_set;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	f8d2 20c0 	ldr.w	r2, [r2, #192]	@ 0xc0
 80024ca:	605a      	str	r2, [r3, #4]
		#endif

		// Run motor PID
		(*XTN).set_effort(_XTN_pos.PID(XTN_set,(*XTN).position));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681c      	ldr	r4, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	461a      	mov	r2, r3
 80024e4:	f7fe fc1e 	bl	8000d24 <_ZN10Controller3PIDEll>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4619      	mov	r1, r3
 80024ec:	4620      	mov	r0, r4
 80024ee:	f001 fe5b 	bl	80041a8 <_ZN5Motor10set_effortEl>
		(*FLX).set_effort(_FLX_pos.PID(FLX_set,(*FLX).position));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685c      	ldr	r4, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f503 7084 	add.w	r0, r3, #264	@ 0x108
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	461a      	mov	r2, r3
 800250a:	f7fe fc0b 	bl	8000d24 <_ZN10Controller3PIDEll>
 800250e:	4603      	mov	r3, r0
 8002510:	4619      	mov	r1, r3
 8002512:	4620      	mov	r0, r4
 8002514:	f001 fe48 	bl	80041a8 <_ZN5Motor10set_effortEl>
		(*ADD).set_effort(_ADD_pos.PID(ADD_set,(*ADD).position));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689c      	ldr	r4, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	461a      	mov	r2, r3
 8002530:	f7fe fbf8 	bl	8000d24 <_ZN10Controller3PIDEll>
 8002534:	4603      	mov	r3, r0
 8002536:	4619      	mov	r1, r3
 8002538:	4620      	mov	r0, r4
 800253a:	f001 fe35 	bl	80041a8 <_ZN5Motor10set_effortEl>
		(*ABD).set_effort(_ABD_pos.PID(ABD_set,(*ABD).position));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68dc      	ldr	r4, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f503 70a0 	add.w	r0, r3, #320	@ 0x140
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f8d3 10cc 	ldr.w	r1, [r3, #204]	@ 0xcc
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	461a      	mov	r2, r3
 8002556:	f7fe fbe5 	bl	8000d24 <_ZN10Controller3PIDEll>
 800255a:	4603      	mov	r3, r0
 800255c:	4619      	mov	r1, r3
 800255e:	4620      	mov	r0, r4
 8002560:	f001 fe22 	bl	80041a8 <_ZN5Motor10set_effortEl>
		break;
 8002564:	e004      	b.n	8002570 <_ZN11Finger_TASK3FSMEv+0x1550>
		break;
 8002566:	bf00      	nop
 8002568:	e002      	b.n	8002570 <_ZN11Finger_TASK3FSMEv+0x1550>
		break;
 800256a:	bf00      	nop
 800256c:	e000      	b.n	8002570 <_ZN11Finger_TASK3FSMEv+0x1550>
		break;
 800256e:	bf00      	nop
	}
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002578:	20000098 	.word	0x20000098
 800257c:	2000009c 	.word	0x2000009c
 8002580:	20000000 	.word	0x20000000
 8002584:	51eb851f 	.word	0x51eb851f
 8002588:	20000094 	.word	0x20000094

0800258c <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
	return (static_cast<unsigned char>(__c1)
		< static_cast<unsigned char>(__c2));
      }

      static _GLIBCXX17_CONSTEXPR int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
      {
	if (__n == 0)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x16>
	  return 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	e006      	b.n	80025b0 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x24>
	      else if (lt(__s2[__i], __s1[__i]))
		return 1;
	    return 0;
	  }
#endif
	return __builtin_memcmp(__s1, __s2, __n);
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f009 fd20 	bl	800bfec <memcmp>
 80025ac:	4603      	mov	r3, r0
 80025ae:	bf00      	nop
      }
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <_ZNSt11char_traitsIcE6lengthEPKc>:

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7fd fe7d 	bl	80002c0 <strlen>
 80025c6:	4603      	mov	r3, r0
      }
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025d0:	b598      	push	{r3, r4, r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025d4:	f002 fc95 	bl	8004f02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025d8:	f000 f86a 	bl	80026b0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025dc:	f000 ff3a 	bl	8003454 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80025e0:	f000 f8b0 	bl	8002744 <_ZL12MX_ADC1_Initv>
  MX_DAC1_Init();
 80025e4:	f000 f98a 	bl	80028fc <_ZL12MX_DAC1_Initv>
  MX_DAC2_Init();
 80025e8:	f000 f9dc 	bl	80029a4 <_ZL12MX_DAC2_Initv>
  MX_DAC3_Init();
 80025ec:	f000 fa1e 	bl	8002a2c <_ZL12MX_DAC3_Initv>
  MX_DAC4_Init();
 80025f0:	f000 fa60 	bl	8002ab4 <_ZL12MX_DAC4_Initv>
  MX_OPAMP1_Init();
 80025f4:	f000 faf0 	bl	8002bd8 <_ZL14MX_OPAMP1_Initv>
  MX_OPAMP4_Init();
 80025f8:	f000 fb18 	bl	8002c2c <_ZL14MX_OPAMP4_Initv>
  MX_TIM1_Init();
 80025fc:	f000 fb40 	bl	8002c80 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8002600:	f000 fc18 	bl	8002e34 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8002604:	f000 fc74 	bl	8002ef0 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8002608:	f000 fcd2 	bl	8002fb0 <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 800260c:	f000 fd30 	bl	8003070 <_ZL12MX_TIM5_Initv>
  MX_TIM8_Init();
 8002610:	f000 fdce 	bl	80031b0 <_ZL12MX_TIM8_Initv>
  MX_USART1_UART_Init();
 8002614:	f000 febe 	bl	8003394 <_ZL19MX_USART1_UART_Initv>
  MX_TIM17_Init();
 8002618:	f000 fe2e 	bl	8003278 <_ZL13MX_TIM17_Initv>
  MX_I2C3_Init();
 800261c:	f000 fa8e 	bl	8002b3c <_ZL12MX_I2C3_Initv>
  MX_TIM6_Init();
 8002620:	f000 fd86 	bl	8003130 <_ZL12MX_TIM6_Initv>
#ifdef INDEX_FINGER
  msg = sprintf(reply,"\n\rWelcome! Please enter your sequence of motion commands: (INDEX)\n\r");
#endif

#ifdef THUMB_FINGER
  msg = sprintf(reply,"\n\rWelcome! Please enter your sequence of motion commands: (THUMB)\n\r");
 8002624:	4918      	ldr	r1, [pc, #96]	@ (8002688 <main+0xb8>)
 8002626:	4819      	ldr	r0, [pc, #100]	@ (800268c <main+0xbc>)
 8002628:	f009 fc90 	bl	800bf4c <siprintf>
 800262c:	4603      	mov	r3, r0
 800262e:	4a18      	ldr	r2, [pc, #96]	@ (8002690 <main+0xc0>)
 8002630:	6013      	str	r3, [r2, #0]
#endif
  HAL_UART_Transmit(&huart1,(unsigned char*)reply,msg,1000);
 8002632:	4b17      	ldr	r3, [pc, #92]	@ (8002690 <main+0xc0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	b29a      	uxth	r2, r3
 8002638:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800263c:	4913      	ldr	r1, [pc, #76]	@ (800268c <main+0xbc>)
 800263e:	4815      	ldr	r0, [pc, #84]	@ (8002694 <main+0xc4>)
 8002640:	f007 f920 	bl	8009884 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1,&buf,sizeof(buf));
 8002644:	2201      	movs	r2, #1
 8002646:	4914      	ldr	r1, [pc, #80]	@ (8002698 <main+0xc8>)
 8002648:	4812      	ldr	r0, [pc, #72]	@ (8002694 <main+0xc4>)
 800264a:	f007 f9a9 	bl	80099a0 <HAL_UART_Receive_IT>

  // Transmit the list of commands
  HAL_UART_Transmit(&huart1,(unsigned char*)command_list.c_str(),command_list.size(),1000);
 800264e:	4813      	ldr	r0, [pc, #76]	@ (800269c <main+0xcc>)
 8002650:	f009 fb20 	bl	800bc94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002654:	4604      	mov	r4, r0
 8002656:	4811      	ldr	r0, [pc, #68]	@ (800269c <main+0xcc>)
 8002658:	f009 faa9 	bl	800bbae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800265c:	4603      	mov	r3, r0
 800265e:	b29a      	uxth	r2, r3
 8002660:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002664:	4621      	mov	r1, r4
 8002666:	480b      	ldr	r0, [pc, #44]	@ (8002694 <main+0xc4>)
 8002668:	f007 f90c 	bl	8009884 <HAL_UART_Transmit>

  // Start OPAMPs for DAC 3 and 4
  HAL_OPAMP_Start(&hopamp1); // OPAMP 1 for DAC3 CH1
 800266c:	480c      	ldr	r0, [pc, #48]	@ (80026a0 <main+0xd0>)
 800266e:	f004 feaf 	bl	80073d0 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp4); // OPAMP 4 for DAC4 CH1
 8002672:	480c      	ldr	r0, [pc, #48]	@ (80026a4 <main+0xd4>)
 8002674:	f004 feac 	bl	80073d0 <HAL_OPAMP_Start>

  HAL_TIM_Base_Start(&htim6); // Start Timer 6 for Microseconds Clock
 8002678:	480b      	ldr	r0, [pc, #44]	@ (80026a8 <main+0xd8>)
 800267a:	f005 ff63 	bl	8008544 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  FINGER.FSM(); // Run finger task FSM
 800267e:	480b      	ldr	r0, [pc, #44]	@ (80026ac <main+0xdc>)
 8002680:	f7fe fcce 	bl	8001020 <_ZN11Finger_TASK3FSMEv>
 8002684:	e7fb      	b.n	800267e <main+0xae>
 8002686:	bf00      	nop
 8002688:	0800d148 	.word	0x0800d148
 800268c:	20000810 	.word	0x20000810
 8002690:	200007ec 	.word	0x200007ec
 8002694:	20000490 	.word	0x20000490
 8002698:	20000874 	.word	0x20000874
 800269c:	2000087c 	.word	0x2000087c
 80026a0:	200001b8 	.word	0x200001b8
 80026a4:	200001f4 	.word	0x200001f4
 80026a8:	200003ac 	.word	0x200003ac
 80026ac:	2000068c 	.word	0x2000068c

080026b0 <_Z18SystemClock_Configv>:

/**
  * @brief System Clock Configuration
  */
void SystemClock_Config(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b094      	sub	sp, #80	@ 0x50
 80026b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026b6:	f107 0318 	add.w	r3, r7, #24
 80026ba:	2238      	movs	r2, #56	@ 0x38
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f009 fcbe 	bl	800c040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	609a      	str	r2, [r3, #8]
 80026ce:	60da      	str	r2, [r3, #12]
 80026d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80026d6:	f004 fead 	bl	8007434 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026da:	2302      	movs	r3, #2
 80026dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026e4:	2340      	movs	r3, #64	@ 0x40
 80026e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ec:	f107 0318 	add.w	r3, r7, #24
 80026f0:	4618      	mov	r0, r3
 80026f2:	f004 ff53 	bl	800759c <HAL_RCC_OscConfig>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	bf14      	ite	ne
 80026fc:	2301      	movne	r3, #1
 80026fe:	2300      	moveq	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 8002706:	f001 fb77 	bl	8003df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800270a:	230f      	movs	r3, #15
 800270c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800270e:	2301      	movs	r3, #1
 8002710:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f005 fa4c 	bl	8007bc0 <HAL_RCC_ClockConfig>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	bf14      	ite	ne
 800272e:	2301      	movne	r3, #1
 8002730:	2300      	moveq	r3, #0
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8002738:	f001 fb5e 	bl	8003df8 <Error_Handler>
  }
}
 800273c:	bf00      	nop
 800273e:	3750      	adds	r7, #80	@ 0x50
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08c      	sub	sp, #48	@ 0x30
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800274a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	2220      	movs	r2, #32
 800275a:	2100      	movs	r1, #0
 800275c:	4618      	mov	r0, r3
 800275e:	f009 fc6f 	bl	800c040 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002762:	4b60      	ldr	r3, [pc, #384]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 8002764:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800276a:	4b5e      	ldr	r3, [pc, #376]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 800276c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002770:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002772:	4b5c      	ldr	r3, [pc, #368]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002778:	4b5a      	ldr	r3, [pc, #360]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 800277a:	2200      	movs	r2, #0
 800277c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800277e:	4b59      	ldr	r3, [pc, #356]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002784:	4b57      	ldr	r3, [pc, #348]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 8002786:	2201      	movs	r2, #1
 8002788:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800278a:	4b56      	ldr	r3, [pc, #344]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 800278c:	2204      	movs	r2, #4
 800278e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002790:	4b54      	ldr	r3, [pc, #336]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 8002792:	2200      	movs	r2, #0
 8002794:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002796:	4b53      	ldr	r3, [pc, #332]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 8002798:	2200      	movs	r2, #0
 800279a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 5;
 800279c:	4b51      	ldr	r3, [pc, #324]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 800279e:	2205      	movs	r2, #5
 80027a0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027a2:	4b50      	ldr	r3, [pc, #320]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027aa:	4b4e      	ldr	r3, [pc, #312]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027b0:	4b4c      	ldr	r3, [pc, #304]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80027b6:	4b4b      	ldr	r3, [pc, #300]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80027be:	4b49      	ldr	r3, [pc, #292]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80027c4:	4b47      	ldr	r3, [pc, #284]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027cc:	4845      	ldr	r0, [pc, #276]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 80027ce:	f002 fe05 	bl	80053dc <HAL_ADC_Init>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf14      	ite	ne
 80027d8:	2301      	movne	r3, #1
 80027da:	2300      	moveq	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 80027e2:	f001 fb09 	bl	8003df8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80027e6:	2300      	movs	r3, #0
 80027e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80027ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ee:	4619      	mov	r1, r3
 80027f0:	483c      	ldr	r0, [pc, #240]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 80027f2:	f003 fd03 	bl	80061fc <HAL_ADCEx_MultiModeConfigChannel>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	bf14      	ite	ne
 80027fc:	2301      	movne	r3, #1
 80027fe:	2300      	moveq	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 8002806:	f001 faf7 	bl	8003df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800280a:	4b37      	ldr	r3, [pc, #220]	@ (80028e8 <_ZL12MX_ADC1_Initv+0x1a4>)
 800280c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800280e:	2306      	movs	r3, #6
 8002810:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002812:	2307      	movs	r3, #7
 8002814:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002816:	237f      	movs	r3, #127	@ 0x7f
 8002818:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800281a:	2304      	movs	r3, #4
 800281c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	4619      	mov	r1, r3
 8002826:	482f      	ldr	r0, [pc, #188]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 8002828:	f002 ff94 	bl	8005754 <HAL_ADC_ConfigChannel>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	bf14      	ite	ne
 8002832:	2301      	movne	r3, #1
 8002834:	2300      	moveq	r3, #0
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 800283c:	f001 fadc 	bl	8003df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002840:	4b2a      	ldr	r3, [pc, #168]	@ (80028ec <_ZL12MX_ADC1_Initv+0x1a8>)
 8002842:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002844:	230c      	movs	r3, #12
 8002846:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	4619      	mov	r1, r3
 800284c:	4825      	ldr	r0, [pc, #148]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 800284e:	f002 ff81 	bl	8005754 <HAL_ADC_ConfigChannel>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf14      	ite	ne
 8002858:	2301      	movne	r3, #1
 800285a:	2300      	moveq	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <_ZL12MX_ADC1_Initv+0x122>
  {
    Error_Handler();
 8002862:	f001 fac9 	bl	8003df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002866:	4b22      	ldr	r3, [pc, #136]	@ (80028f0 <_ZL12MX_ADC1_Initv+0x1ac>)
 8002868:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800286a:	2312      	movs	r3, #18
 800286c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800286e:	1d3b      	adds	r3, r7, #4
 8002870:	4619      	mov	r1, r3
 8002872:	481c      	ldr	r0, [pc, #112]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 8002874:	f002 ff6e 	bl	8005754 <HAL_ADC_ConfigChannel>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	bf14      	ite	ne
 800287e:	2301      	movne	r3, #1
 8002880:	2300      	moveq	r3, #0
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <_ZL12MX_ADC1_Initv+0x148>
  {
    Error_Handler();
 8002888:	f001 fab6 	bl	8003df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800288c:	4b19      	ldr	r3, [pc, #100]	@ (80028f4 <_ZL12MX_ADC1_Initv+0x1b0>)
 800288e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002890:	2318      	movs	r3, #24
 8002892:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	4619      	mov	r1, r3
 8002898:	4812      	ldr	r0, [pc, #72]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 800289a:	f002 ff5b 	bl	8005754 <HAL_ADC_ConfigChannel>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf14      	ite	ne
 80028a4:	2301      	movne	r3, #1
 80028a6:	2300      	moveq	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <_ZL12MX_ADC1_Initv+0x16e>
  {
    Error_Handler();
 80028ae:	f001 faa3 	bl	8003df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80028b2:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <_ZL12MX_ADC1_Initv+0x1b4>)
 80028b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80028b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028bc:	1d3b      	adds	r3, r7, #4
 80028be:	4619      	mov	r1, r3
 80028c0:	4808      	ldr	r0, [pc, #32]	@ (80028e4 <_ZL12MX_ADC1_Initv+0x1a0>)
 80028c2:	f002 ff47 	bl	8005754 <HAL_ADC_ConfigChannel>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	bf14      	ite	ne
 80028cc:	2301      	movne	r3, #1
 80028ce:	2300      	moveq	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <_ZL12MX_ADC1_Initv+0x196>
  {
    Error_Handler();
 80028d6:	f001 fa8f 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80028da:	bf00      	nop
 80028dc:	3730      	adds	r7, #48	@ 0x30
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200000a8 	.word	0x200000a8
 80028e8:	10c00010 	.word	0x10c00010
 80028ec:	14f00020 	.word	0x14f00020
 80028f0:	19200040 	.word	0x19200040
 80028f4:	1d500080 	.word	0x1d500080
 80028f8:	21800100 	.word	0x21800100

080028fc <_ZL12MX_DAC1_Initv>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08c      	sub	sp, #48	@ 0x30
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002902:	463b      	mov	r3, r7
 8002904:	2230      	movs	r2, #48	@ 0x30
 8002906:	2100      	movs	r1, #0
 8002908:	4618      	mov	r0, r3
 800290a:	f009 fb99 	bl	800c040 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800290e:	4b23      	ldr	r3, [pc, #140]	@ (800299c <_ZL12MX_DAC1_Initv+0xa0>)
 8002910:	4a23      	ldr	r2, [pc, #140]	@ (80029a0 <_ZL12MX_DAC1_Initv+0xa4>)
 8002912:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002914:	4821      	ldr	r0, [pc, #132]	@ (800299c <_ZL12MX_DAC1_Initv+0xa0>)
 8002916:	f003 fe88 	bl	800662a <HAL_DAC_Init>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	bf14      	ite	ne
 8002920:	2301      	movne	r3, #1
 8002922:	2300      	moveq	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <_ZL12MX_DAC1_Initv+0x32>
  {
    Error_Handler();
 800292a:	f001 fa65 	bl	8003df8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800292e:	2302      	movs	r3, #2
 8002930:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002936:	2300      	movs	r3, #0
 8002938:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800294a:	2301      	movs	r3, #1
 800294c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002952:	463b      	mov	r3, r7
 8002954:	2200      	movs	r2, #0
 8002956:	4619      	mov	r1, r3
 8002958:	4810      	ldr	r0, [pc, #64]	@ (800299c <_ZL12MX_DAC1_Initv+0xa0>)
 800295a:	f003 ff23 	bl	80067a4 <HAL_DAC_ConfigChannel>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf14      	ite	ne
 8002964:	2301      	movne	r3, #1
 8002966:	2300      	moveq	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <_ZL12MX_DAC1_Initv+0x76>
  {
    Error_Handler();
 800296e:	f001 fa43 	bl	8003df8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002972:	463b      	mov	r3, r7
 8002974:	2210      	movs	r2, #16
 8002976:	4619      	mov	r1, r3
 8002978:	4808      	ldr	r0, [pc, #32]	@ (800299c <_ZL12MX_DAC1_Initv+0xa0>)
 800297a:	f003 ff13 	bl	80067a4 <HAL_DAC_ConfigChannel>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	bf14      	ite	ne
 8002984:	2301      	movne	r3, #1
 8002986:	2300      	moveq	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <_ZL12MX_DAC1_Initv+0x96>
  {
    Error_Handler();
 800298e:	f001 fa33 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002992:	bf00      	nop
 8002994:	3730      	adds	r7, #48	@ 0x30
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000114 	.word	0x20000114
 80029a0:	50000800 	.word	0x50000800

080029a4 <_ZL12MX_DAC2_Initv>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08c      	sub	sp, #48	@ 0x30
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80029aa:	463b      	mov	r3, r7
 80029ac:	2230      	movs	r2, #48	@ 0x30
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f009 fb45 	bl	800c040 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 80029b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a24 <_ZL12MX_DAC2_Initv+0x80>)
 80029b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002a28 <_ZL12MX_DAC2_Initv+0x84>)
 80029ba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80029bc:	4819      	ldr	r0, [pc, #100]	@ (8002a24 <_ZL12MX_DAC2_Initv+0x80>)
 80029be:	f003 fe34 	bl	800662a <HAL_DAC_Init>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf14      	ite	ne
 80029c8:	2301      	movne	r3, #1
 80029ca:	2300      	moveq	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <_ZL12MX_DAC2_Initv+0x32>
  {
    Error_Handler();
 80029d2:	f001 fa11 	bl	8003df8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80029d6:	2302      	movs	r3, #2
 80029d8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80029da:	2300      	movs	r3, #0
 80029dc:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80029de:	2300      	movs	r3, #0
 80029e0:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80029f2:	2301      	movs	r3, #1
 80029f4:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80029fa:	463b      	mov	r3, r7
 80029fc:	2200      	movs	r2, #0
 80029fe:	4619      	mov	r1, r3
 8002a00:	4808      	ldr	r0, [pc, #32]	@ (8002a24 <_ZL12MX_DAC2_Initv+0x80>)
 8002a02:	f003 fecf 	bl	80067a4 <HAL_DAC_ConfigChannel>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bf14      	ite	ne
 8002a0c:	2301      	movne	r3, #1
 8002a0e:	2300      	moveq	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <_ZL12MX_DAC2_Initv+0x76>
  {
    Error_Handler();
 8002a16:	f001 f9ef 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8002a1a:	bf00      	nop
 8002a1c:	3730      	adds	r7, #48	@ 0x30
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000128 	.word	0x20000128
 8002a28:	50000c00 	.word	0x50000c00

08002a2c <_ZL12MX_DAC3_Initv>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08c      	sub	sp, #48	@ 0x30
 8002a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002a32:	463b      	mov	r3, r7
 8002a34:	2230      	movs	r2, #48	@ 0x30
 8002a36:	2100      	movs	r1, #0
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f009 fb01 	bl	800c040 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8002a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002aac <_ZL12MX_DAC3_Initv+0x80>)
 8002a40:	4a1b      	ldr	r2, [pc, #108]	@ (8002ab0 <_ZL12MX_DAC3_Initv+0x84>)
 8002a42:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8002a44:	4819      	ldr	r0, [pc, #100]	@ (8002aac <_ZL12MX_DAC3_Initv+0x80>)
 8002a46:	f003 fdf0 	bl	800662a <HAL_DAC_Init>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bf14      	ite	ne
 8002a50:	2301      	movne	r3, #1
 8002a52:	2300      	moveq	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <_ZL12MX_DAC3_Initv+0x32>
  {
    Error_Handler();
 8002a5a:	f001 f9cd 	bl	8003df8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8002a76:	2302      	movs	r3, #2
 8002a78:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002a82:	463b      	mov	r3, r7
 8002a84:	2200      	movs	r2, #0
 8002a86:	4619      	mov	r1, r3
 8002a88:	4808      	ldr	r0, [pc, #32]	@ (8002aac <_ZL12MX_DAC3_Initv+0x80>)
 8002a8a:	f003 fe8b 	bl	80067a4 <HAL_DAC_ConfigChannel>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bf14      	ite	ne
 8002a94:	2301      	movne	r3, #1
 8002a96:	2300      	moveq	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <_ZL12MX_DAC3_Initv+0x76>
  {
    Error_Handler();
 8002a9e:	f001 f9ab 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8002aa2:	bf00      	nop
 8002aa4:	3730      	adds	r7, #48	@ 0x30
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	2000013c 	.word	0x2000013c
 8002ab0:	50001000 	.word	0x50001000

08002ab4 <_ZL12MX_DAC4_Initv>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08c      	sub	sp, #48	@ 0x30
 8002ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002aba:	463b      	mov	r3, r7
 8002abc:	2230      	movs	r2, #48	@ 0x30
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f009 fabd 	bl	800c040 <memset>

  /* USER CODE END DAC4_Init 1 */

  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 8002ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b34 <_ZL12MX_DAC4_Initv+0x80>)
 8002ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8002b38 <_ZL12MX_DAC4_Initv+0x84>)
 8002aca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 8002acc:	4819      	ldr	r0, [pc, #100]	@ (8002b34 <_ZL12MX_DAC4_Initv+0x80>)
 8002ace:	f003 fdac 	bl	800662a <HAL_DAC_Init>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf14      	ite	ne
 8002ad8:	2301      	movne	r3, #1
 8002ada:	2300      	moveq	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <_ZL12MX_DAC4_Initv+0x32>
  {
    Error_Handler();
 8002ae2:	f001 f989 	bl	8003df8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002aee:	2300      	movs	r3, #0
 8002af0:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002afa:	2300      	movs	r3, #0
 8002afc:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8002afe:	2302      	movs	r3, #2
 8002b00:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8002b02:	2302      	movs	r3, #2
 8002b04:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002b0a:	463b      	mov	r3, r7
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4808      	ldr	r0, [pc, #32]	@ (8002b34 <_ZL12MX_DAC4_Initv+0x80>)
 8002b12:	f003 fe47 	bl	80067a4 <HAL_DAC_ConfigChannel>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bf14      	ite	ne
 8002b1c:	2301      	movne	r3, #1
 8002b1e:	2300      	moveq	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <_ZL12MX_DAC4_Initv+0x76>
  {
    Error_Handler();
 8002b26:	f001 f967 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 8002b2a:	bf00      	nop
 8002b2c:	3730      	adds	r7, #48	@ 0x30
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000150 	.word	0x20000150
 8002b38:	50001400 	.word	0x50001400

08002b3c <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002b40:	4b22      	ldr	r3, [pc, #136]	@ (8002bcc <_ZL12MX_I2C3_Initv+0x90>)
 8002b42:	4a23      	ldr	r2, [pc, #140]	@ (8002bd0 <_ZL12MX_I2C3_Initv+0x94>)
 8002b44:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300617;
 8002b46:	4b21      	ldr	r3, [pc, #132]	@ (8002bcc <_ZL12MX_I2C3_Initv+0x90>)
 8002b48:	4a22      	ldr	r2, [pc, #136]	@ (8002bd4 <_ZL12MX_I2C3_Initv+0x98>)
 8002b4a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 2;
 8002b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bcc <_ZL12MX_I2C3_Initv+0x90>)
 8002b4e:	2202      	movs	r2, #2
 8002b50:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b52:	4b1e      	ldr	r3, [pc, #120]	@ (8002bcc <_ZL12MX_I2C3_Initv+0x90>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b58:	4b1c      	ldr	r3, [pc, #112]	@ (8002bcc <_ZL12MX_I2C3_Initv+0x90>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bcc <_ZL12MX_I2C3_Initv+0x90>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b64:	4b19      	ldr	r3, [pc, #100]	@ (8002bcc <_ZL12MX_I2C3_Initv+0x90>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b6a:	4b18      	ldr	r3, [pc, #96]	@ (8002bcc <_ZL12MX_I2C3_Initv+0x90>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b70:	4b16      	ldr	r3, [pc, #88]	@ (8002bcc <_ZL12MX_I2C3_Initv+0x90>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002b76:	4815      	ldr	r0, [pc, #84]	@ (8002bcc <_ZL12MX_I2C3_Initv+0x90>)
 8002b78:	f004 fa28 	bl	8006fcc <HAL_I2C_Init>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	bf14      	ite	ne
 8002b82:	2301      	movne	r3, #1
 8002b84:	2300      	moveq	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 8002b8c:	f001 f934 	bl	8003df8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b90:	2100      	movs	r1, #0
 8002b92:	480e      	ldr	r0, [pc, #56]	@ (8002bcc <_ZL12MX_I2C3_Initv+0x90>)
 8002b94:	f004 fab5 	bl	8007102 <HAL_I2CEx_ConfigAnalogFilter>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	bf14      	ite	ne
 8002b9e:	2301      	movne	r3, #1
 8002ba0:	2300      	moveq	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 8002ba8:	f001 f926 	bl	8003df8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002bac:	2100      	movs	r1, #0
 8002bae:	4807      	ldr	r0, [pc, #28]	@ (8002bcc <_ZL12MX_I2C3_Initv+0x90>)
 8002bb0:	f004 faf2 	bl	8007198 <HAL_I2CEx_ConfigDigitalFilter>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	bf14      	ite	ne
 8002bba:	2301      	movne	r3, #1
 8002bbc:	2300      	moveq	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 8002bc4:	f001 f918 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002bc8:	bf00      	nop
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000164 	.word	0x20000164
 8002bd0:	40007800 	.word	0x40007800
 8002bd4:	00300617 	.word	0x00300617

08002bd8 <_ZL14MX_OPAMP1_Initv>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8002bdc:	4b11      	ldr	r3, [pc, #68]	@ (8002c24 <_ZL14MX_OPAMP1_Initv+0x4c>)
 8002bde:	4a12      	ldr	r2, [pc, #72]	@ (8002c28 <_ZL14MX_OPAMP1_Initv+0x50>)
 8002be0:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8002be2:	4b10      	ldr	r3, [pc, #64]	@ (8002c24 <_ZL14MX_OPAMP1_Initv+0x4c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8002be8:	4b0e      	ldr	r3, [pc, #56]	@ (8002c24 <_ZL14MX_OPAMP1_Initv+0x4c>)
 8002bea:	2260      	movs	r2, #96	@ 0x60
 8002bec:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8002bee:	4b0d      	ldr	r3, [pc, #52]	@ (8002c24 <_ZL14MX_OPAMP1_Initv+0x4c>)
 8002bf0:	220c      	movs	r2, #12
 8002bf2:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <_ZL14MX_OPAMP1_Initv+0x4c>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002c24 <_ZL14MX_OPAMP1_Initv+0x4c>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002c00:	4b08      	ldr	r3, [pc, #32]	@ (8002c24 <_ZL14MX_OPAMP1_Initv+0x4c>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8002c06:	4807      	ldr	r0, [pc, #28]	@ (8002c24 <_ZL14MX_OPAMP1_Initv+0x4c>)
 8002c08:	f004 fb12 	bl	8007230 <HAL_OPAMP_Init>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	bf14      	ite	ne
 8002c12:	2301      	movne	r3, #1
 8002c14:	2300      	moveq	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <_ZL14MX_OPAMP1_Initv+0x48>
  {
    Error_Handler();
 8002c1c:	f001 f8ec 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8002c20:	bf00      	nop
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	200001b8 	.word	0x200001b8
 8002c28:	40010300 	.word	0x40010300

08002c2c <_ZL14MX_OPAMP4_Initv>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8002c30:	4b11      	ldr	r3, [pc, #68]	@ (8002c78 <_ZL14MX_OPAMP4_Initv+0x4c>)
 8002c32:	4a12      	ldr	r2, [pc, #72]	@ (8002c7c <_ZL14MX_OPAMP4_Initv+0x50>)
 8002c34:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8002c36:	4b10      	ldr	r3, [pc, #64]	@ (8002c78 <_ZL14MX_OPAMP4_Initv+0x4c>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_FOLLOWER_MODE;
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c78 <_ZL14MX_OPAMP4_Initv+0x4c>)
 8002c3e:	2260      	movs	r2, #96	@ 0x60
 8002c40:	609a      	str	r2, [r3, #8]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8002c42:	4b0d      	ldr	r3, [pc, #52]	@ (8002c78 <_ZL14MX_OPAMP4_Initv+0x4c>)
 8002c44:	220c      	movs	r2, #12
 8002c46:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 8002c48:	4b0b      	ldr	r3, [pc, #44]	@ (8002c78 <_ZL14MX_OPAMP4_Initv+0x4c>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c78 <_ZL14MX_OPAMP4_Initv+0x4c>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002c54:	4b08      	ldr	r3, [pc, #32]	@ (8002c78 <_ZL14MX_OPAMP4_Initv+0x4c>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8002c5a:	4807      	ldr	r0, [pc, #28]	@ (8002c78 <_ZL14MX_OPAMP4_Initv+0x4c>)
 8002c5c:	f004 fae8 	bl	8007230 <HAL_OPAMP_Init>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bf14      	ite	ne
 8002c66:	2301      	movne	r3, #1
 8002c68:	2300      	moveq	r3, #0
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <_ZL14MX_OPAMP4_Initv+0x48>
  {
    Error_Handler();
 8002c70:	f001 f8c2 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 8002c74:	bf00      	nop
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	200001f4 	.word	0x200001f4
 8002c7c:	4001030c 	.word	0x4001030c

08002c80 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b098      	sub	sp, #96	@ 0x60
 8002c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c86:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c92:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	609a      	str	r2, [r3, #8]
 8002c9e:	60da      	str	r2, [r3, #12]
 8002ca0:	611a      	str	r2, [r3, #16]
 8002ca2:	615a      	str	r2, [r3, #20]
 8002ca4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ca6:	1d3b      	adds	r3, r7, #4
 8002ca8:	2234      	movs	r2, #52	@ 0x34
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f009 f9c7 	bl	800c040 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cb2:	4b5e      	ldr	r3, [pc, #376]	@ (8002e2c <_ZL12MX_TIM1_Initv+0x1ac>)
 8002cb4:	4a5e      	ldr	r2, [pc, #376]	@ (8002e30 <_ZL12MX_TIM1_Initv+0x1b0>)
 8002cb6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002cb8:	4b5c      	ldr	r3, [pc, #368]	@ (8002e2c <_ZL12MX_TIM1_Initv+0x1ac>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cbe:	4b5b      	ldr	r3, [pc, #364]	@ (8002e2c <_ZL12MX_TIM1_Initv+0x1ac>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 799;
 8002cc4:	4b59      	ldr	r3, [pc, #356]	@ (8002e2c <_ZL12MX_TIM1_Initv+0x1ac>)
 8002cc6:	f240 321f 	movw	r2, #799	@ 0x31f
 8002cca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ccc:	4b57      	ldr	r3, [pc, #348]	@ (8002e2c <_ZL12MX_TIM1_Initv+0x1ac>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002cd2:	4b56      	ldr	r3, [pc, #344]	@ (8002e2c <_ZL12MX_TIM1_Initv+0x1ac>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cd8:	4b54      	ldr	r3, [pc, #336]	@ (8002e2c <_ZL12MX_TIM1_Initv+0x1ac>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002cde:	4853      	ldr	r0, [pc, #332]	@ (8002e2c <_ZL12MX_TIM1_Initv+0x1ac>)
 8002ce0:	f005 fca0 	bl	8008624 <HAL_TIM_PWM_Init>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	bf14      	ite	ne
 8002cea:	2301      	movne	r3, #1
 8002cec:	2300      	moveq	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 8002cf4:	f001 f880 	bl	8003df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d04:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4848      	ldr	r0, [pc, #288]	@ (8002e2c <_ZL12MX_TIM1_Initv+0x1ac>)
 8002d0c:	f006 fc40 	bl	8009590 <HAL_TIMEx_MasterConfigSynchronization>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	bf14      	ite	ne
 8002d16:	2301      	movne	r3, #1
 8002d18:	2300      	moveq	r3, #0
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <_ZL12MX_TIM1_Initv+0xa4>
  {
    Error_Handler();
 8002d20:	f001 f86a 	bl	8003df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d24:	2360      	movs	r3, #96	@ 0x60
 8002d26:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d30:	2300      	movs	r3, #0
 8002d32:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d34:	2300      	movs	r3, #0
 8002d36:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d40:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d44:	2200      	movs	r2, #0
 8002d46:	4619      	mov	r1, r3
 8002d48:	4838      	ldr	r0, [pc, #224]	@ (8002e2c <_ZL12MX_TIM1_Initv+0x1ac>)
 8002d4a:	f005 ff09 	bl	8008b60 <HAL_TIM_PWM_ConfigChannel>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf14      	ite	ne
 8002d54:	2301      	movne	r3, #1
 8002d56:	2300      	moveq	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <_ZL12MX_TIM1_Initv+0xe2>
  {
    Error_Handler();
 8002d5e:	f001 f84b 	bl	8003df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d62:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d66:	2204      	movs	r2, #4
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4830      	ldr	r0, [pc, #192]	@ (8002e2c <_ZL12MX_TIM1_Initv+0x1ac>)
 8002d6c:	f005 fef8 	bl	8008b60 <HAL_TIM_PWM_ConfigChannel>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	bf14      	ite	ne
 8002d76:	2301      	movne	r3, #1
 8002d78:	2300      	moveq	r3, #0
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <_ZL12MX_TIM1_Initv+0x104>
  {
    Error_Handler();
 8002d80:	f001 f83a 	bl	8003df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d84:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d88:	2208      	movs	r2, #8
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4827      	ldr	r0, [pc, #156]	@ (8002e2c <_ZL12MX_TIM1_Initv+0x1ac>)
 8002d8e:	f005 fee7 	bl	8008b60 <HAL_TIM_PWM_ConfigChannel>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf14      	ite	ne
 8002d98:	2301      	movne	r3, #1
 8002d9a:	2300      	moveq	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <_ZL12MX_TIM1_Initv+0x126>
  {
    Error_Handler();
 8002da2:	f001 f829 	bl	8003df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002da6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002daa:	220c      	movs	r2, #12
 8002dac:	4619      	mov	r1, r3
 8002dae:	481f      	ldr	r0, [pc, #124]	@ (8002e2c <_ZL12MX_TIM1_Initv+0x1ac>)
 8002db0:	f005 fed6 	bl	8008b60 <HAL_TIM_PWM_ConfigChannel>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	bf14      	ite	ne
 8002dba:	2301      	movne	r3, #1
 8002dbc:	2300      	moveq	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <_ZL12MX_TIM1_Initv+0x148>
  {
    Error_Handler();
 8002dc4:	f001 f818 	bl	8003df8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ddc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002de0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002de6:	2300      	movs	r3, #0
 8002de8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002dee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	4619      	mov	r1, r3
 8002e04:	4809      	ldr	r0, [pc, #36]	@ (8002e2c <_ZL12MX_TIM1_Initv+0x1ac>)
 8002e06:	f006 fc59 	bl	80096bc <HAL_TIMEx_ConfigBreakDeadTime>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf14      	ite	ne
 8002e10:	2301      	movne	r3, #1
 8002e12:	2300      	moveq	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <_ZL12MX_TIM1_Initv+0x19e>
  {
    Error_Handler();
 8002e1a:	f000 ffed 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002e1e:	4803      	ldr	r0, [pc, #12]	@ (8002e2c <_ZL12MX_TIM1_Initv+0x1ac>)
 8002e20:	f001 fea6 	bl	8004b70 <HAL_TIM_MspPostInit>

}
 8002e24:	bf00      	nop
 8002e26:	3760      	adds	r7, #96	@ 0x60
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000230 	.word	0x20000230
 8002e30:	40012c00 	.word	0x40012c00

08002e34 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08c      	sub	sp, #48	@ 0x30
 8002e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e3a:	f107 030c 	add.w	r3, r7, #12
 8002e3e:	2224      	movs	r2, #36	@ 0x24
 8002e40:	2100      	movs	r1, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f009 f8fc 	bl	800c040 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e48:	463b      	mov	r3, r7
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e52:	4b26      	ldr	r3, [pc, #152]	@ (8002eec <_ZL12MX_TIM2_Initv+0xb8>)
 8002e54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002e5a:	4b24      	ldr	r3, [pc, #144]	@ (8002eec <_ZL12MX_TIM2_Initv+0xb8>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e60:	4b22      	ldr	r3, [pc, #136]	@ (8002eec <_ZL12MX_TIM2_Initv+0xb8>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002e66:	4b21      	ldr	r3, [pc, #132]	@ (8002eec <_ZL12MX_TIM2_Initv+0xb8>)
 8002e68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8002eec <_ZL12MX_TIM2_Initv+0xb8>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e74:	4b1d      	ldr	r3, [pc, #116]	@ (8002eec <_ZL12MX_TIM2_Initv+0xb8>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e82:	2301      	movs	r3, #1
 8002e84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e92:	2301      	movs	r3, #1
 8002e94:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e96:	2300      	movs	r3, #0
 8002e98:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002e9e:	f107 030c 	add.w	r3, r7, #12
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4811      	ldr	r0, [pc, #68]	@ (8002eec <_ZL12MX_TIM2_Initv+0xb8>)
 8002ea6:	f005 fd27 	bl	80088f8 <HAL_TIM_Encoder_Init>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf14      	ite	ne
 8002eb0:	2301      	movne	r3, #1
 8002eb2:	2300      	moveq	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 8002eba:	f000 ff9d 	bl	8003df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ec6:	463b      	mov	r3, r7
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4808      	ldr	r0, [pc, #32]	@ (8002eec <_ZL12MX_TIM2_Initv+0xb8>)
 8002ecc:	f006 fb60 	bl	8009590 <HAL_TIMEx_MasterConfigSynchronization>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bf14      	ite	ne
 8002ed6:	2301      	movne	r3, #1
 8002ed8:	2300      	moveq	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8002ee0:	f000 ff8a 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ee4:	bf00      	nop
 8002ee6:	3730      	adds	r7, #48	@ 0x30
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	2000027c 	.word	0x2000027c

08002ef0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08c      	sub	sp, #48	@ 0x30
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ef6:	f107 030c 	add.w	r3, r7, #12
 8002efa:	2224      	movs	r2, #36	@ 0x24
 8002efc:	2100      	movs	r1, #0
 8002efe:	4618      	mov	r0, r3
 8002f00:	f009 f89e 	bl	800c040 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f04:	463b      	mov	r3, r7
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f0e:	4b26      	ldr	r3, [pc, #152]	@ (8002fa8 <_ZL12MX_TIM3_Initv+0xb8>)
 8002f10:	4a26      	ldr	r2, [pc, #152]	@ (8002fac <_ZL12MX_TIM3_Initv+0xbc>)
 8002f12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002f14:	4b24      	ldr	r3, [pc, #144]	@ (8002fa8 <_ZL12MX_TIM3_Initv+0xb8>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f1a:	4b23      	ldr	r3, [pc, #140]	@ (8002fa8 <_ZL12MX_TIM3_Initv+0xb8>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002f20:	4b21      	ldr	r3, [pc, #132]	@ (8002fa8 <_ZL12MX_TIM3_Initv+0xb8>)
 8002f22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f28:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa8 <_ZL12MX_TIM3_Initv+0xb8>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa8 <_ZL12MX_TIM3_Initv+0xb8>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002f34:	2301      	movs	r3, #1
 8002f36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f50:	2300      	movs	r3, #0
 8002f52:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002f58:	f107 030c 	add.w	r3, r7, #12
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4812      	ldr	r0, [pc, #72]	@ (8002fa8 <_ZL12MX_TIM3_Initv+0xb8>)
 8002f60:	f005 fcca 	bl	80088f8 <HAL_TIM_Encoder_Init>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	bf14      	ite	ne
 8002f6a:	2301      	movne	r3, #1
 8002f6c:	2300      	moveq	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 8002f74:	f000 ff40 	bl	8003df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f80:	463b      	mov	r3, r7
 8002f82:	4619      	mov	r1, r3
 8002f84:	4808      	ldr	r0, [pc, #32]	@ (8002fa8 <_ZL12MX_TIM3_Initv+0xb8>)
 8002f86:	f006 fb03 	bl	8009590 <HAL_TIMEx_MasterConfigSynchronization>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	bf14      	ite	ne
 8002f90:	2301      	movne	r3, #1
 8002f92:	2300      	moveq	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8002f9a:	f000 ff2d 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f9e:	bf00      	nop
 8002fa0:	3730      	adds	r7, #48	@ 0x30
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200002c8 	.word	0x200002c8
 8002fac:	40000400 	.word	0x40000400

08002fb0 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08c      	sub	sp, #48	@ 0x30
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002fb6:	f107 030c 	add.w	r3, r7, #12
 8002fba:	2224      	movs	r2, #36	@ 0x24
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f009 f83e 	bl	800c040 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fc4:	463b      	mov	r3, r7
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	605a      	str	r2, [r3, #4]
 8002fcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002fce:	4b26      	ldr	r3, [pc, #152]	@ (8003068 <_ZL12MX_TIM4_Initv+0xb8>)
 8002fd0:	4a26      	ldr	r2, [pc, #152]	@ (800306c <_ZL12MX_TIM4_Initv+0xbc>)
 8002fd2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002fd4:	4b24      	ldr	r3, [pc, #144]	@ (8003068 <_ZL12MX_TIM4_Initv+0xb8>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fda:	4b23      	ldr	r3, [pc, #140]	@ (8003068 <_ZL12MX_TIM4_Initv+0xb8>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002fe0:	4b21      	ldr	r3, [pc, #132]	@ (8003068 <_ZL12MX_TIM4_Initv+0xb8>)
 8002fe2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fe6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8003068 <_ZL12MX_TIM4_Initv+0xb8>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fee:	4b1e      	ldr	r3, [pc, #120]	@ (8003068 <_ZL12MX_TIM4_Initv+0xb8>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003000:	2300      	movs	r3, #0
 8003002:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003008:	2300      	movs	r3, #0
 800300a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800300c:	2301      	movs	r3, #1
 800300e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003010:	2300      	movs	r3, #0
 8003012:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003014:	2300      	movs	r3, #0
 8003016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003018:	f107 030c 	add.w	r3, r7, #12
 800301c:	4619      	mov	r1, r3
 800301e:	4812      	ldr	r0, [pc, #72]	@ (8003068 <_ZL12MX_TIM4_Initv+0xb8>)
 8003020:	f005 fc6a 	bl	80088f8 <HAL_TIM_Encoder_Init>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	bf14      	ite	ne
 800302a:	2301      	movne	r3, #1
 800302c:	2300      	moveq	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <_ZL12MX_TIM4_Initv+0x88>
  {
    Error_Handler();
 8003034:	f000 fee0 	bl	8003df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003038:	2300      	movs	r3, #0
 800303a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800303c:	2300      	movs	r3, #0
 800303e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003040:	463b      	mov	r3, r7
 8003042:	4619      	mov	r1, r3
 8003044:	4808      	ldr	r0, [pc, #32]	@ (8003068 <_ZL12MX_TIM4_Initv+0xb8>)
 8003046:	f006 faa3 	bl	8009590 <HAL_TIMEx_MasterConfigSynchronization>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	bf14      	ite	ne
 8003050:	2301      	movne	r3, #1
 8003052:	2300      	moveq	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <_ZL12MX_TIM4_Initv+0xae>
  {
    Error_Handler();
 800305a:	f000 fecd 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800305e:	bf00      	nop
 8003060:	3730      	adds	r7, #48	@ 0x30
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000314 	.word	0x20000314
 800306c:	40000800 	.word	0x40000800

08003070 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08c      	sub	sp, #48	@ 0x30
 8003074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003076:	f107 030c 	add.w	r3, r7, #12
 800307a:	2224      	movs	r2, #36	@ 0x24
 800307c:	2100      	movs	r1, #0
 800307e:	4618      	mov	r0, r3
 8003080:	f008 ffde 	bl	800c040 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003084:	463b      	mov	r3, r7
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800308e:	4b26      	ldr	r3, [pc, #152]	@ (8003128 <_ZL12MX_TIM5_Initv+0xb8>)
 8003090:	4a26      	ldr	r2, [pc, #152]	@ (800312c <_ZL12MX_TIM5_Initv+0xbc>)
 8003092:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003094:	4b24      	ldr	r3, [pc, #144]	@ (8003128 <_ZL12MX_TIM5_Initv+0xb8>)
 8003096:	2200      	movs	r2, #0
 8003098:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800309a:	4b23      	ldr	r3, [pc, #140]	@ (8003128 <_ZL12MX_TIM5_Initv+0xb8>)
 800309c:	2200      	movs	r2, #0
 800309e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80030a0:	4b21      	ldr	r3, [pc, #132]	@ (8003128 <_ZL12MX_TIM5_Initv+0xb8>)
 80030a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030a6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003128 <_ZL12MX_TIM5_Initv+0xb8>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003128 <_ZL12MX_TIM5_Initv+0xb8>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80030b4:	2301      	movs	r3, #1
 80030b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80030bc:	2301      	movs	r3, #1
 80030be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80030c8:	2300      	movs	r3, #0
 80030ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80030cc:	2301      	movs	r3, #1
 80030ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80030d0:	2300      	movs	r3, #0
 80030d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80030d8:	f107 030c 	add.w	r3, r7, #12
 80030dc:	4619      	mov	r1, r3
 80030de:	4812      	ldr	r0, [pc, #72]	@ (8003128 <_ZL12MX_TIM5_Initv+0xb8>)
 80030e0:	f005 fc0a 	bl	80088f8 <HAL_TIM_Encoder_Init>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	bf14      	ite	ne
 80030ea:	2301      	movne	r3, #1
 80030ec:	2300      	moveq	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <_ZL12MX_TIM5_Initv+0x88>
  {
    Error_Handler();
 80030f4:	f000 fe80 	bl	8003df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030f8:	2300      	movs	r3, #0
 80030fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030fc:	2300      	movs	r3, #0
 80030fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003100:	463b      	mov	r3, r7
 8003102:	4619      	mov	r1, r3
 8003104:	4808      	ldr	r0, [pc, #32]	@ (8003128 <_ZL12MX_TIM5_Initv+0xb8>)
 8003106:	f006 fa43 	bl	8009590 <HAL_TIMEx_MasterConfigSynchronization>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf14      	ite	ne
 8003110:	2301      	movne	r3, #1
 8003112:	2300      	moveq	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <_ZL12MX_TIM5_Initv+0xae>
  {
    Error_Handler();
 800311a:	f000 fe6d 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800311e:	bf00      	nop
 8003120:	3730      	adds	r7, #48	@ 0x30
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000360 	.word	0x20000360
 800312c:	40000c00 	.word	0x40000c00

08003130 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003136:	1d3b      	adds	r3, r7, #4
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003140:	4b19      	ldr	r3, [pc, #100]	@ (80031a8 <_ZL12MX_TIM6_Initv+0x78>)
 8003142:	4a1a      	ldr	r2, [pc, #104]	@ (80031ac <_ZL12MX_TIM6_Initv+0x7c>)
 8003144:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 8003146:	4b18      	ldr	r3, [pc, #96]	@ (80031a8 <_ZL12MX_TIM6_Initv+0x78>)
 8003148:	220f      	movs	r2, #15
 800314a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800314c:	4b16      	ldr	r3, [pc, #88]	@ (80031a8 <_ZL12MX_TIM6_Initv+0x78>)
 800314e:	2200      	movs	r2, #0
 8003150:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003152:	4b15      	ldr	r3, [pc, #84]	@ (80031a8 <_ZL12MX_TIM6_Initv+0x78>)
 8003154:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003158:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800315a:	4b13      	ldr	r3, [pc, #76]	@ (80031a8 <_ZL12MX_TIM6_Initv+0x78>)
 800315c:	2200      	movs	r2, #0
 800315e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003160:	4811      	ldr	r0, [pc, #68]	@ (80031a8 <_ZL12MX_TIM6_Initv+0x78>)
 8003162:	f005 f997 	bl	8008494 <HAL_TIM_Base_Init>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf14      	ite	ne
 800316c:	2301      	movne	r3, #1
 800316e:	2300      	moveq	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8003176:	f000 fe3f 	bl	8003df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800317a:	2300      	movs	r3, #0
 800317c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003182:	1d3b      	adds	r3, r7, #4
 8003184:	4619      	mov	r1, r3
 8003186:	4808      	ldr	r0, [pc, #32]	@ (80031a8 <_ZL12MX_TIM6_Initv+0x78>)
 8003188:	f006 fa02 	bl	8009590 <HAL_TIMEx_MasterConfigSynchronization>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	bf14      	ite	ne
 8003192:	2301      	movne	r3, #1
 8003194:	2300      	moveq	r3, #0
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800319c:	f000 fe2c 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80031a0:	bf00      	nop
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	200003ac 	.word	0x200003ac
 80031ac:	40001000 	.word	0x40001000

080031b0 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08c      	sub	sp, #48	@ 0x30
 80031b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80031b6:	f107 030c 	add.w	r3, r7, #12
 80031ba:	2224      	movs	r2, #36	@ 0x24
 80031bc:	2100      	movs	r1, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	f008 ff3e 	bl	800c040 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031c4:	463b      	mov	r3, r7
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	605a      	str	r2, [r3, #4]
 80031cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80031ce:	4b28      	ldr	r3, [pc, #160]	@ (8003270 <_ZL12MX_TIM8_Initv+0xc0>)
 80031d0:	4a28      	ldr	r2, [pc, #160]	@ (8003274 <_ZL12MX_TIM8_Initv+0xc4>)
 80031d2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80031d4:	4b26      	ldr	r3, [pc, #152]	@ (8003270 <_ZL12MX_TIM8_Initv+0xc0>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031da:	4b25      	ldr	r3, [pc, #148]	@ (8003270 <_ZL12MX_TIM8_Initv+0xc0>)
 80031dc:	2200      	movs	r2, #0
 80031de:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80031e0:	4b23      	ldr	r3, [pc, #140]	@ (8003270 <_ZL12MX_TIM8_Initv+0xc0>)
 80031e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031e6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031e8:	4b21      	ldr	r3, [pc, #132]	@ (8003270 <_ZL12MX_TIM8_Initv+0xc0>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80031ee:	4b20      	ldr	r3, [pc, #128]	@ (8003270 <_ZL12MX_TIM8_Initv+0xc0>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003270 <_ZL12MX_TIM8_Initv+0xc0>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80031fa:	2301      	movs	r3, #1
 80031fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80031fe:	2300      	movs	r3, #0
 8003200:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003202:	2301      	movs	r3, #1
 8003204:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003206:	2300      	movs	r3, #0
 8003208:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800320e:	2300      	movs	r3, #0
 8003210:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003212:	2301      	movs	r3, #1
 8003214:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003216:	2300      	movs	r3, #0
 8003218:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800321e:	f107 030c 	add.w	r3, r7, #12
 8003222:	4619      	mov	r1, r3
 8003224:	4812      	ldr	r0, [pc, #72]	@ (8003270 <_ZL12MX_TIM8_Initv+0xc0>)
 8003226:	f005 fb67 	bl	80088f8 <HAL_TIM_Encoder_Init>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf14      	ite	ne
 8003230:	2301      	movne	r3, #1
 8003232:	2300      	moveq	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <_ZL12MX_TIM8_Initv+0x8e>
  {
    Error_Handler();
 800323a:	f000 fddd 	bl	8003df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800323e:	2300      	movs	r3, #0
 8003240:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003242:	2300      	movs	r3, #0
 8003244:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003246:	2300      	movs	r3, #0
 8003248:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800324a:	463b      	mov	r3, r7
 800324c:	4619      	mov	r1, r3
 800324e:	4808      	ldr	r0, [pc, #32]	@ (8003270 <_ZL12MX_TIM8_Initv+0xc0>)
 8003250:	f006 f99e 	bl	8009590 <HAL_TIMEx_MasterConfigSynchronization>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	bf14      	ite	ne
 800325a:	2301      	movne	r3, #1
 800325c:	2300      	moveq	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <_ZL12MX_TIM8_Initv+0xb8>
  {
    Error_Handler();
 8003264:	f000 fdc8 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003268:	bf00      	nop
 800326a:	3730      	adds	r7, #48	@ 0x30
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	200003f8 	.word	0x200003f8
 8003274:	40013400 	.word	0x40013400

08003278 <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b094      	sub	sp, #80	@ 0x50
 800327c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800327e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	605a      	str	r2, [r3, #4]
 8003288:	609a      	str	r2, [r3, #8]
 800328a:	60da      	str	r2, [r3, #12]
 800328c:	611a      	str	r2, [r3, #16]
 800328e:	615a      	str	r2, [r3, #20]
 8003290:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003292:	463b      	mov	r3, r7
 8003294:	2234      	movs	r2, #52	@ 0x34
 8003296:	2100      	movs	r1, #0
 8003298:	4618      	mov	r0, r3
 800329a:	f008 fed1 	bl	800c040 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800329e:	4b3b      	ldr	r3, [pc, #236]	@ (800338c <_ZL13MX_TIM17_Initv+0x114>)
 80032a0:	4a3b      	ldr	r2, [pc, #236]	@ (8003390 <_ZL13MX_TIM17_Initv+0x118>)
 80032a2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80032a4:	4b39      	ldr	r3, [pc, #228]	@ (800338c <_ZL13MX_TIM17_Initv+0x114>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032aa:	4b38      	ldr	r3, [pc, #224]	@ (800338c <_ZL13MX_TIM17_Initv+0x114>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 799;
 80032b0:	4b36      	ldr	r3, [pc, #216]	@ (800338c <_ZL13MX_TIM17_Initv+0x114>)
 80032b2:	f240 321f 	movw	r2, #799	@ 0x31f
 80032b6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032b8:	4b34      	ldr	r3, [pc, #208]	@ (800338c <_ZL13MX_TIM17_Initv+0x114>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80032be:	4b33      	ldr	r3, [pc, #204]	@ (800338c <_ZL13MX_TIM17_Initv+0x114>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032c4:	4b31      	ldr	r3, [pc, #196]	@ (800338c <_ZL13MX_TIM17_Initv+0x114>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80032ca:	4830      	ldr	r0, [pc, #192]	@ (800338c <_ZL13MX_TIM17_Initv+0x114>)
 80032cc:	f005 f8e2 	bl	8008494 <HAL_TIM_Base_Init>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	bf14      	ite	ne
 80032d6:	2301      	movne	r3, #1
 80032d8:	2300      	moveq	r3, #0
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <_ZL13MX_TIM17_Initv+0x6c>
  {
    Error_Handler();
 80032e0:	f000 fd8a 	bl	8003df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80032e4:	4829      	ldr	r0, [pc, #164]	@ (800338c <_ZL13MX_TIM17_Initv+0x114>)
 80032e6:	f005 f99d 	bl	8008624 <HAL_TIM_PWM_Init>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	bf14      	ite	ne
 80032f0:	2301      	movne	r3, #1
 80032f2:	2300      	moveq	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <_ZL13MX_TIM17_Initv+0x86>
  {
    Error_Handler();
 80032fa:	f000 fd7d 	bl	8003df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032fe:	2360      	movs	r3, #96	@ 0x60
 8003300:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003306:	2300      	movs	r3, #0
 8003308:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800330a:	2300      	movs	r3, #0
 800330c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800330e:	2300      	movs	r3, #0
 8003310:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003312:	2300      	movs	r3, #0
 8003314:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003316:	2300      	movs	r3, #0
 8003318:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800331a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800331e:	2200      	movs	r2, #0
 8003320:	4619      	mov	r1, r3
 8003322:	481a      	ldr	r0, [pc, #104]	@ (800338c <_ZL13MX_TIM17_Initv+0x114>)
 8003324:	f005 fc1c 	bl	8008b60 <HAL_TIM_PWM_ConfigChannel>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	bf14      	ite	ne
 800332e:	2301      	movne	r3, #1
 8003330:	2300      	moveq	r3, #0
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <_ZL13MX_TIM17_Initv+0xc4>
  {
    Error_Handler();
 8003338:	f000 fd5e 	bl	8003df8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800333c:	2300      	movs	r3, #0
 800333e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003340:	2300      	movs	r3, #0
 8003342:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003344:	2300      	movs	r3, #0
 8003346:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800334c:	2300      	movs	r3, #0
 800334e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003350:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003354:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800335a:	2300      	movs	r3, #0
 800335c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800335e:	463b      	mov	r3, r7
 8003360:	4619      	mov	r1, r3
 8003362:	480a      	ldr	r0, [pc, #40]	@ (800338c <_ZL13MX_TIM17_Initv+0x114>)
 8003364:	f006 f9aa 	bl	80096bc <HAL_TIMEx_ConfigBreakDeadTime>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	bf14      	ite	ne
 800336e:	2301      	movne	r3, #1
 8003370:	2300      	moveq	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <_ZL13MX_TIM17_Initv+0x104>
  {
    Error_Handler();
 8003378:	f000 fd3e 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800337c:	4803      	ldr	r0, [pc, #12]	@ (800338c <_ZL13MX_TIM17_Initv+0x114>)
 800337e:	f001 fbf7 	bl	8004b70 <HAL_TIM_MspPostInit>

}
 8003382:	bf00      	nop
 8003384:	3750      	adds	r7, #80	@ 0x50
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000444 	.word	0x20000444
 8003390:	40014800 	.word	0x40014800

08003394 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003398:	4b2c      	ldr	r3, [pc, #176]	@ (800344c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800339a:	4a2d      	ldr	r2, [pc, #180]	@ (8003450 <_ZL19MX_USART1_UART_Initv+0xbc>)
 800339c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800339e:	4b2b      	ldr	r3, [pc, #172]	@ (800344c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80033a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033a6:	4b29      	ldr	r3, [pc, #164]	@ (800344c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033ac:	4b27      	ldr	r3, [pc, #156]	@ (800344c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033b2:	4b26      	ldr	r3, [pc, #152]	@ (800344c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033b8:	4b24      	ldr	r3, [pc, #144]	@ (800344c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80033ba:	220c      	movs	r2, #12
 80033bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033be:	4b23      	ldr	r3, [pc, #140]	@ (800344c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033c4:	4b21      	ldr	r3, [pc, #132]	@ (800344c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033ca:	4b20      	ldr	r3, [pc, #128]	@ (800344c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033d0:	4b1e      	ldr	r3, [pc, #120]	@ (800344c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033d6:	4b1d      	ldr	r3, [pc, #116]	@ (800344c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80033d8:	2200      	movs	r2, #0
 80033da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033dc:	481b      	ldr	r0, [pc, #108]	@ (800344c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80033de:	f006 fa01 	bl	80097e4 <HAL_UART_Init>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf14      	ite	ne
 80033e8:	2301      	movne	r3, #1
 80033ea:	2300      	moveq	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 80033f2:	f000 fd01 	bl	8003df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033f6:	2100      	movs	r1, #0
 80033f8:	4814      	ldr	r0, [pc, #80]	@ (800344c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80033fa:	f008 fa72 	bl	800b8e2 <HAL_UARTEx_SetTxFifoThreshold>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	bf14      	ite	ne
 8003404:	2301      	movne	r3, #1
 8003406:	2300      	moveq	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 800340e:	f000 fcf3 	bl	8003df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003412:	2100      	movs	r1, #0
 8003414:	480d      	ldr	r0, [pc, #52]	@ (800344c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003416:	f008 faa2 	bl	800b95e <HAL_UARTEx_SetRxFifoThreshold>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf14      	ite	ne
 8003420:	2301      	movne	r3, #1
 8003422:	2300      	moveq	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 800342a:	f000 fce5 	bl	8003df8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800342e:	4807      	ldr	r0, [pc, #28]	@ (800344c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003430:	f008 fa1e 	bl	800b870 <HAL_UARTEx_DisableFifoMode>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	bf14      	ite	ne
 800343a:	2301      	movne	r3, #1
 800343c:	2300      	moveq	r3, #0
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8003444:	f000 fcd8 	bl	8003df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003448:	bf00      	nop
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000490 	.word	0x20000490
 8003450:	40013800 	.word	0x40013800

08003454 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08a      	sub	sp, #40	@ 0x28
 8003458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800345a:	f107 0314 	add.w	r3, r7, #20
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	605a      	str	r2, [r3, #4]
 8003464:	609a      	str	r2, [r3, #8]
 8003466:	60da      	str	r2, [r3, #12]
 8003468:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800346a:	4b45      	ldr	r3, [pc, #276]	@ (8003580 <_ZL12MX_GPIO_Initv+0x12c>)
 800346c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346e:	4a44      	ldr	r2, [pc, #272]	@ (8003580 <_ZL12MX_GPIO_Initv+0x12c>)
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003476:	4b42      	ldr	r3, [pc, #264]	@ (8003580 <_ZL12MX_GPIO_Initv+0x12c>)
 8003478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003482:	4b3f      	ldr	r3, [pc, #252]	@ (8003580 <_ZL12MX_GPIO_Initv+0x12c>)
 8003484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003486:	4a3e      	ldr	r2, [pc, #248]	@ (8003580 <_ZL12MX_GPIO_Initv+0x12c>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800348e:	4b3c      	ldr	r3, [pc, #240]	@ (8003580 <_ZL12MX_GPIO_Initv+0x12c>)
 8003490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800349a:	4b39      	ldr	r3, [pc, #228]	@ (8003580 <_ZL12MX_GPIO_Initv+0x12c>)
 800349c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800349e:	4a38      	ldr	r2, [pc, #224]	@ (8003580 <_ZL12MX_GPIO_Initv+0x12c>)
 80034a0:	f043 0302 	orr.w	r3, r3, #2
 80034a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034a6:	4b36      	ldr	r3, [pc, #216]	@ (8003580 <_ZL12MX_GPIO_Initv+0x12c>)
 80034a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034b2:	4b33      	ldr	r3, [pc, #204]	@ (8003580 <_ZL12MX_GPIO_Initv+0x12c>)
 80034b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b6:	4a32      	ldr	r2, [pc, #200]	@ (8003580 <_ZL12MX_GPIO_Initv+0x12c>)
 80034b8:	f043 0308 	orr.w	r3, r3, #8
 80034bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034be:	4b30      	ldr	r3, [pc, #192]	@ (8003580 <_ZL12MX_GPIO_Initv+0x12c>)
 80034c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	607b      	str	r3, [r7, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NSLEEP_3_Pin|PH_3_Pin|NSLEEP_5_Pin, GPIO_PIN_RESET);
 80034ca:	2200      	movs	r2, #0
 80034cc:	f44f 4148 	mov.w	r1, #51200	@ 0xc800
 80034d0:	482c      	ldr	r0, [pc, #176]	@ (8003584 <_ZL12MX_GPIO_Initv+0x130>)
 80034d2:	f003 fd63 	bl	8006f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSLEEP_2_Pin|PH_2_Pin|NSLEEP_1_Pin|PH_1_Pin
 80034d6:	2200      	movs	r2, #0
 80034d8:	f24a 2143 	movw	r1, #41539	@ 0xa243
 80034dc:	482a      	ldr	r0, [pc, #168]	@ (8003588 <_ZL12MX_GPIO_Initv+0x134>)
 80034de:	f003 fd5d 	bl	8006f9c <HAL_GPIO_WritePin>
                          |NSLEEP_4_Pin|PH_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PH_5_GPIO_Port, PH_5_Pin, GPIO_PIN_RESET);
 80034e2:	2200      	movs	r2, #0
 80034e4:	2104      	movs	r1, #4
 80034e6:	4829      	ldr	r0, [pc, #164]	@ (800358c <_ZL12MX_GPIO_Initv+0x138>)
 80034e8:	f003 fd58 	bl	8006f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NFAULT_3_Pin NFAULT_2_Pin NFAULT_5_Pin */
  GPIO_InitStruct.Pin = NFAULT_3_Pin|NFAULT_2_Pin|NFAULT_5_Pin;
 80034ec:	f242 4320 	movw	r3, #9248	@ 0x2420
 80034f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034fa:	f107 0314 	add.w	r3, r7, #20
 80034fe:	4619      	mov	r1, r3
 8003500:	4820      	ldr	r0, [pc, #128]	@ (8003584 <_ZL12MX_GPIO_Initv+0x130>)
 8003502:	f003 fbc9 	bl	8006c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSLEEP_3_Pin PH_3_Pin NSLEEP_5_Pin */
  GPIO_InitStruct.Pin = NSLEEP_3_Pin|PH_3_Pin|NSLEEP_5_Pin;
 8003506:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 800350a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800350c:	2301      	movs	r3, #1
 800350e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003510:	2300      	movs	r3, #0
 8003512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003514:	2300      	movs	r3, #0
 8003516:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003518:	f107 0314 	add.w	r3, r7, #20
 800351c:	4619      	mov	r1, r3
 800351e:	4819      	ldr	r0, [pc, #100]	@ (8003584 <_ZL12MX_GPIO_Initv+0x130>)
 8003520:	f003 fbba 	bl	8006c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSLEEP_2_Pin PH_2_Pin NSLEEP_1_Pin PH_1_Pin
                           NSLEEP_4_Pin PH_4_Pin */
  GPIO_InitStruct.Pin = NSLEEP_2_Pin|PH_2_Pin|NSLEEP_1_Pin|PH_1_Pin
 8003524:	f24a 2343 	movw	r3, #41539	@ 0xa243
 8003528:	617b      	str	r3, [r7, #20]
                          |NSLEEP_4_Pin|PH_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800352a:	2301      	movs	r3, #1
 800352c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003532:	2300      	movs	r3, #0
 8003534:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003536:	f107 0314 	add.w	r3, r7, #20
 800353a:	4619      	mov	r1, r3
 800353c:	4812      	ldr	r0, [pc, #72]	@ (8003588 <_ZL12MX_GPIO_Initv+0x134>)
 800353e:	f003 fbab 	bl	8006c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : NFAULT_1_Pin NFAULT_4_Pin */
  GPIO_InitStruct.Pin = NFAULT_1_Pin|NFAULT_4_Pin;
 8003542:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8003546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003548:	2300      	movs	r3, #0
 800354a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003550:	f107 0314 	add.w	r3, r7, #20
 8003554:	4619      	mov	r1, r3
 8003556:	480c      	ldr	r0, [pc, #48]	@ (8003588 <_ZL12MX_GPIO_Initv+0x134>)
 8003558:	f003 fb9e 	bl	8006c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH_5_Pin */
  GPIO_InitStruct.Pin = PH_5_Pin;
 800355c:	2304      	movs	r3, #4
 800355e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003560:	2301      	movs	r3, #1
 8003562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003564:	2300      	movs	r3, #0
 8003566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003568:	2300      	movs	r3, #0
 800356a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PH_5_GPIO_Port, &GPIO_InitStruct);
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	4619      	mov	r1, r3
 8003572:	4806      	ldr	r0, [pc, #24]	@ (800358c <_ZL12MX_GPIO_Initv+0x138>)
 8003574:	f003 fb90 	bl	8006c98 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003578:	bf00      	nop
 800357a:	3728      	adds	r7, #40	@ 0x28
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40021000 	.word	0x40021000
 8003584:	48000800 	.word	0x48000800
 8003588:	48000400 	.word	0x48000400
 800358c:	48000c00 	.word	0x48000c00

08003590 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
/* USER CODE BEGIN 4 */
/**
 * @brief Run the command parser
 */
void cmd_parse(int* msg, std::string* command)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b09a      	sub	sp, #104	@ 0x68
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]

	if ((*command) == "ZRO") // If the command is "ZRO" home the finger
 800359a:	4982      	ldr	r1, [pc, #520]	@ (80037a4 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x214>)
 800359c:	6838      	ldr	r0, [r7, #0]
 800359e:	f000 fc31 	bl	8003e04 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d02a      	beq.n	80035fe <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e>
	{
		// Check if there is room to add the motion
		if (FINGER.motion_cnt < (sizeof(FINGER.motion_list)/sizeof(Finger_TASK::motion_t)-1))
 80035a8:	4b7f      	ldr	r3, [pc, #508]	@ (80037a8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x218>)
 80035aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80035ae:	2b12      	cmp	r3, #18
 80035b0:	d81d      	bhi.n	80035ee <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5e>
		{
			FINGER.motion_cnt++; // Increment to identify that there has been a motion added
 80035b2:	4b7d      	ldr	r3, [pc, #500]	@ (80037a8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x218>)
 80035b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80035b8:	3301      	adds	r3, #1
 80035ba:	4a7b      	ldr	r2, [pc, #492]	@ (80037a8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x218>)
 80035bc:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
			FINGER.motion_list[FINGER.motion_cnt] = {Finger_TASK::HOME,0}; // Add motion to motion list
 80035c0:	4b79      	ldr	r3, [pc, #484]	@ (80037a8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x218>)
 80035c2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80035c6:	4978      	ldr	r1, [pc, #480]	@ (80037a8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x218>)
 80035c8:	1c93      	adds	r3, r2, #2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	440b      	add	r3, r1
 80035ce:	2101      	movs	r1, #1
 80035d0:	7119      	strb	r1, [r3, #4]
 80035d2:	4975      	ldr	r1, [pc, #468]	@ (80037a8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x218>)
 80035d4:	1c93      	adds	r3, r2, #2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	440b      	add	r3, r1
 80035da:	2200      	movs	r2, #0
 80035dc:	609a      	str	r2, [r3, #8]
			(*msg) = sprintf(reply,"\r\nHoming Commenced\r\n"); // Prepare UI reply message
 80035de:	4973      	ldr	r1, [pc, #460]	@ (80037ac <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x21c>)
 80035e0:	4873      	ldr	r0, [pc, #460]	@ (80037b0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x220>)
 80035e2:	f008 fcb3 	bl	800bf4c <siprintf>
 80035e6:	4602      	mov	r2, r0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	601a      	str	r2, [r3, #0]
	else
	{
		// Prepare UI reply
		(*msg) = sprintf(reply,"\r\nInvalid Command: %s \r\n",buffer.c_str());
	}
}
 80035ec:	e33d      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
			(*msg) = sprintf(reply,"\r\nCommand List Full, you can reset the list with the 'CLR' command\r\n");
 80035ee:	4971      	ldr	r1, [pc, #452]	@ (80037b4 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x224>)
 80035f0:	486f      	ldr	r0, [pc, #444]	@ (80037b0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x220>)
 80035f2:	f008 fcab 	bl	800bf4c <siprintf>
 80035f6:	4602      	mov	r2, r0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	601a      	str	r2, [r3, #0]
}
 80035fc:	e335      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
	else if ((*command) == "FLX") // If the command is "FLX" flex the finger
 80035fe:	496e      	ldr	r1, [pc, #440]	@ (80037b8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x228>)
 8003600:	6838      	ldr	r0, [r7, #0]
 8003602:	f000 fbff 	bl	8003e04 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80ed 	beq.w	80037e8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x258>
		valid = sscanf(buffer.substr(3).c_str(),"%1d%ld",&flex,&TEMP_set);
 800360e:	f107 0008 	add.w	r0, r7, #8
 8003612:	f04f 33ff 	mov.w	r3, #4294967295
 8003616:	2203      	movs	r2, #3
 8003618:	4968      	ldr	r1, [pc, #416]	@ (80037bc <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22c>)
 800361a:	f008 fb7d 	bl	800bd18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800361e:	f107 0308 	add.w	r3, r7, #8
 8003622:	4618      	mov	r0, r3
 8003624:	f008 fb36 	bl	800bc94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8003628:	4b65      	ldr	r3, [pc, #404]	@ (80037c0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x230>)
 800362a:	4a66      	ldr	r2, [pc, #408]	@ (80037c4 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x234>)
 800362c:	4966      	ldr	r1, [pc, #408]	@ (80037c8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x238>)
 800362e:	f008 fcaf 	bl	800bf90 <siscanf>
 8003632:	4603      	mov	r3, r0
 8003634:	4a65      	ldr	r2, [pc, #404]	@ (80037cc <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x23c>)
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	f107 0308 	add.w	r3, r7, #8
 800363c:	4618      	mov	r0, r3
 800363e:	f008 fab0 	bl	800bba2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		if (valid >= 1)
 8003642:	4b62      	ldr	r3, [pc, #392]	@ (80037cc <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x23c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	f340 809f 	ble.w	800378a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1fa>
			if (valid < 2)
 800364c:	4b5f      	ldr	r3, [pc, #380]	@ (80037cc <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x23c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b01      	cmp	r3, #1
 8003652:	dc0b      	bgt.n	800366c <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdc>
				if (FINGER.FLX_set == 0)
 8003654:	4b54      	ldr	r3, [pc, #336]	@ (80037a8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x218>)
 8003656:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800365a:	2b00      	cmp	r3, #0
 800365c:	d103      	bne.n	8003666 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd6>
					TEMP_set = 100;
 800365e:	4b58      	ldr	r3, [pc, #352]	@ (80037c0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x230>)
 8003660:	2264      	movs	r2, #100	@ 0x64
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	e002      	b.n	800366c <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdc>
					TEMP_set = 0;
 8003666:	4b56      	ldr	r3, [pc, #344]	@ (80037c0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x230>)
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
			if ((TEMP_set >= 0) and (TEMP_set <= 100))
 800366c:	4b54      	ldr	r3, [pc, #336]	@ (80037c0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x230>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	db7f      	blt.n	8003774 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e4>
 8003674:	4b52      	ldr	r3, [pc, #328]	@ (80037c0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x230>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b64      	cmp	r3, #100	@ 0x64
 800367a:	dc7b      	bgt.n	8003774 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e4>
				if (FINGER.motion_cnt < (sizeof(FINGER.motion_list)/sizeof(Finger_TASK::motion_t)-1))
 800367c:	4b4a      	ldr	r3, [pc, #296]	@ (80037a8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x218>)
 800367e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003682:	2b12      	cmp	r3, #18
 8003684:	d86d      	bhi.n	8003762 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d2>
					FINGER.motion_cnt++; // Increment command count
 8003686:	4b48      	ldr	r3, [pc, #288]	@ (80037a8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x218>)
 8003688:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800368c:	3301      	adds	r3, #1
 800368e:	4a46      	ldr	r2, [pc, #280]	@ (80037a8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x218>)
 8003690:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
					switch(flex) // Switch behavior based on which flex form
 8003694:	4b4b      	ldr	r3, [pc, #300]	@ (80037c4 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x234>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b03      	cmp	r3, #3
 800369a:	d006      	beq.n	80036aa <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11a>
 800369c:	2b03      	cmp	r3, #3
 800369e:	dc55      	bgt.n	800374c <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1bc>
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d038      	beq.n	8003716 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x186>
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d01b      	beq.n	80036e0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x150>
 80036a8:	e050      	b.n	800374c <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1bc>
						FINGER.motion_list[FINGER.motion_cnt] = {Finger_TASK::FLX3,TEMP_set};
 80036aa:	4b3f      	ldr	r3, [pc, #252]	@ (80037a8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x218>)
 80036ac:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80036b0:	4b43      	ldr	r3, [pc, #268]	@ (80037c0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x230>)
 80036b2:	6819      	ldr	r1, [r3, #0]
 80036b4:	483c      	ldr	r0, [pc, #240]	@ (80037a8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x218>)
 80036b6:	1c93      	adds	r3, r2, #2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4403      	add	r3, r0
 80036bc:	2005      	movs	r0, #5
 80036be:	7118      	strb	r0, [r3, #4]
 80036c0:	4839      	ldr	r0, [pc, #228]	@ (80037a8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x218>)
 80036c2:	1c93      	adds	r3, r2, #2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4403      	add	r3, r0
 80036c8:	6099      	str	r1, [r3, #8]
						(*msg) = sprintf(reply,"\r\n%ld%% Closed in form Flexion 3\r\n",TEMP_set);
 80036ca:	4b3d      	ldr	r3, [pc, #244]	@ (80037c0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x230>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	493f      	ldr	r1, [pc, #252]	@ (80037d0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x240>)
 80036d2:	4837      	ldr	r0, [pc, #220]	@ (80037b0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x220>)
 80036d4:	f008 fc3a 	bl	800bf4c <siprintf>
 80036d8:	4602      	mov	r2, r0
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	601a      	str	r2, [r3, #0]
						break;
 80036de:	e048      	b.n	8003772 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e2>
						FINGER.motion_list[FINGER.motion_cnt] = {Finger_TASK::FLX2,TEMP_set};
 80036e0:	4b31      	ldr	r3, [pc, #196]	@ (80037a8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x218>)
 80036e2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80036e6:	4b36      	ldr	r3, [pc, #216]	@ (80037c0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x230>)
 80036e8:	6819      	ldr	r1, [r3, #0]
 80036ea:	482f      	ldr	r0, [pc, #188]	@ (80037a8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x218>)
 80036ec:	1c93      	adds	r3, r2, #2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4403      	add	r3, r0
 80036f2:	2006      	movs	r0, #6
 80036f4:	7118      	strb	r0, [r3, #4]
 80036f6:	482c      	ldr	r0, [pc, #176]	@ (80037a8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x218>)
 80036f8:	1c93      	adds	r3, r2, #2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4403      	add	r3, r0
 80036fe:	6099      	str	r1, [r3, #8]
						(*msg) = sprintf(reply,"\r\n%ld%% Closed in form Flexion 2\r\n",TEMP_set);
 8003700:	4b2f      	ldr	r3, [pc, #188]	@ (80037c0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x230>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	4933      	ldr	r1, [pc, #204]	@ (80037d4 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x244>)
 8003708:	4829      	ldr	r0, [pc, #164]	@ (80037b0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x220>)
 800370a:	f008 fc1f 	bl	800bf4c <siprintf>
 800370e:	4602      	mov	r2, r0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	601a      	str	r2, [r3, #0]
						break;
 8003714:	e02d      	b.n	8003772 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e2>
						FINGER.motion_list[FINGER.motion_cnt] = {Finger_TASK::FLX1,TEMP_set};
 8003716:	4b24      	ldr	r3, [pc, #144]	@ (80037a8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x218>)
 8003718:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800371c:	4b28      	ldr	r3, [pc, #160]	@ (80037c0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x230>)
 800371e:	6819      	ldr	r1, [r3, #0]
 8003720:	4821      	ldr	r0, [pc, #132]	@ (80037a8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x218>)
 8003722:	1c93      	adds	r3, r2, #2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	4403      	add	r3, r0
 8003728:	2007      	movs	r0, #7
 800372a:	7118      	strb	r0, [r3, #4]
 800372c:	481e      	ldr	r0, [pc, #120]	@ (80037a8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x218>)
 800372e:	1c93      	adds	r3, r2, #2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	4403      	add	r3, r0
 8003734:	6099      	str	r1, [r3, #8]
						(*msg) = sprintf(reply,"\r\n%ld%% Closed in form Flexion 1\r\n",TEMP_set);
 8003736:	4b22      	ldr	r3, [pc, #136]	@ (80037c0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x230>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	4926      	ldr	r1, [pc, #152]	@ (80037d8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x248>)
 800373e:	481c      	ldr	r0, [pc, #112]	@ (80037b0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x220>)
 8003740:	f008 fc04 	bl	800bf4c <siprintf>
 8003744:	4602      	mov	r2, r0
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	601a      	str	r2, [r3, #0]
						break;
 800374a:	e012      	b.n	8003772 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e2>
						(*msg) = sprintf(reply,"\r\nInvalid Flexion Form Entered: %d\r\n",flex);
 800374c:	4b1d      	ldr	r3, [pc, #116]	@ (80037c4 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x234>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	4922      	ldr	r1, [pc, #136]	@ (80037dc <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24c>)
 8003754:	4816      	ldr	r0, [pc, #88]	@ (80037b0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x220>)
 8003756:	f008 fbf9 	bl	800bf4c <siprintf>
 800375a:	4602      	mov	r2, r0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	601a      	str	r2, [r3, #0]
				if (FINGER.motion_cnt < (sizeof(FINGER.motion_list)/sizeof(Finger_TASK::motion_t)-1))
 8003760:	e283      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
					(*msg) = sprintf(reply,"\r\nCommand List Full, you can reset the list with the 'CLR' command\r\n");
 8003762:	4914      	ldr	r1, [pc, #80]	@ (80037b4 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x224>)
 8003764:	4812      	ldr	r0, [pc, #72]	@ (80037b0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x220>)
 8003766:	f008 fbf1 	bl	800bf4c <siprintf>
 800376a:	4602      	mov	r2, r0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	601a      	str	r2, [r3, #0]
				if (FINGER.motion_cnt < (sizeof(FINGER.motion_list)/sizeof(Finger_TASK::motion_t)-1))
 8003770:	e27b      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
 8003772:	e27a      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
				(*msg) = sprintf(reply,"\r\nInvalid %% Entered: %ld\r\n",TEMP_set);
 8003774:	4b12      	ldr	r3, [pc, #72]	@ (80037c0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x230>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	461a      	mov	r2, r3
 800377a:	4919      	ldr	r1, [pc, #100]	@ (80037e0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x250>)
 800377c:	480c      	ldr	r0, [pc, #48]	@ (80037b0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x220>)
 800377e:	f008 fbe5 	bl	800bf4c <siprintf>
 8003782:	4602      	mov	r2, r0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	601a      	str	r2, [r3, #0]
}
 8003788:	e26f      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
			(*msg) = sprintf(reply,"\r\nInvalid FLX Command Syntax: %s\r\n",buffer.c_str());
 800378a:	480c      	ldr	r0, [pc, #48]	@ (80037bc <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22c>)
 800378c:	f008 fa82 	bl	800bc94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8003790:	4603      	mov	r3, r0
 8003792:	461a      	mov	r2, r3
 8003794:	4913      	ldr	r1, [pc, #76]	@ (80037e4 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x254>)
 8003796:	4806      	ldr	r0, [pc, #24]	@ (80037b0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x220>)
 8003798:	f008 fbd8 	bl	800bf4c <siprintf>
 800379c:	4602      	mov	r2, r0
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	601a      	str	r2, [r3, #0]
}
 80037a2:	e262      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
 80037a4:	0800d18c 	.word	0x0800d18c
 80037a8:	2000068c 	.word	0x2000068c
 80037ac:	0800d190 	.word	0x0800d190
 80037b0:	20000810 	.word	0x20000810
 80037b4:	0800d1a8 	.word	0x0800d1a8
 80037b8:	0800d1f0 	.word	0x0800d1f0
 80037bc:	200007f8 	.word	0x200007f8
 80037c0:	20000878 	.word	0x20000878
 80037c4:	200007f4 	.word	0x200007f4
 80037c8:	0800d1f4 	.word	0x0800d1f4
 80037cc:	200007f0 	.word	0x200007f0
 80037d0:	0800d1fc 	.word	0x0800d1fc
 80037d4:	0800d220 	.word	0x0800d220
 80037d8:	0800d244 	.word	0x0800d244
 80037dc:	0800d268 	.word	0x0800d268
 80037e0:	0800d290 	.word	0x0800d290
 80037e4:	0800d2ac 	.word	0x0800d2ac
	else if ((*command) == "ADD") // If command is "ADD" adduct the finger
 80037e8:	49a0      	ldr	r1, [pc, #640]	@ (8003a6c <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4dc>)
 80037ea:	6838      	ldr	r0, [r7, #0]
 80037ec:	f000 fb0a 	bl	8003e04 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d06d      	beq.n	80038d2 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x342>
		valid = sscanf(buffer.substr(3).c_str(),"%ld",&TEMP_set);
 80037f6:	f107 0020 	add.w	r0, r7, #32
 80037fa:	f04f 33ff 	mov.w	r3, #4294967295
 80037fe:	2203      	movs	r2, #3
 8003800:	499b      	ldr	r1, [pc, #620]	@ (8003a70 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e0>)
 8003802:	f008 fa89 	bl	800bd18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8003806:	f107 0320 	add.w	r3, r7, #32
 800380a:	4618      	mov	r0, r3
 800380c:	f008 fa42 	bl	800bc94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8003810:	4603      	mov	r3, r0
 8003812:	4a98      	ldr	r2, [pc, #608]	@ (8003a74 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e4>)
 8003814:	4998      	ldr	r1, [pc, #608]	@ (8003a78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e8>)
 8003816:	4618      	mov	r0, r3
 8003818:	f008 fbba 	bl	800bf90 <siscanf>
 800381c:	4603      	mov	r3, r0
 800381e:	4a97      	ldr	r2, [pc, #604]	@ (8003a7c <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4ec>)
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	f107 0320 	add.w	r3, r7, #32
 8003826:	4618      	mov	r0, r3
 8003828:	f008 f9bb 	bl	800bba2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		if (valid == 1) // If it is valid
 800382c:	4b93      	ldr	r3, [pc, #588]	@ (8003a7c <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4ec>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d141      	bne.n	80038b8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x328>
			if ((TEMP_set >= 0) and (TEMP_set <= 100))
 8003834:	4b8f      	ldr	r3, [pc, #572]	@ (8003a74 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	db32      	blt.n	80038a2 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x312>
 800383c:	4b8d      	ldr	r3, [pc, #564]	@ (8003a74 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e4>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b64      	cmp	r3, #100	@ 0x64
 8003842:	dc2e      	bgt.n	80038a2 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x312>
				if (FINGER.motion_cnt < (sizeof(FINGER.motion_list)/sizeof(Finger_TASK::motion_t)-1))
 8003844:	4b8e      	ldr	r3, [pc, #568]	@ (8003a80 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f0>)
 8003846:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800384a:	2b12      	cmp	r3, #18
 800384c:	d821      	bhi.n	8003892 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x302>
					FINGER.motion_cnt++; // Increment command count
 800384e:	4b8c      	ldr	r3, [pc, #560]	@ (8003a80 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f0>)
 8003850:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003854:	3301      	adds	r3, #1
 8003856:	4a8a      	ldr	r2, [pc, #552]	@ (8003a80 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f0>)
 8003858:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
					FINGER.motion_list[FINGER.motion_cnt] = {Finger_TASK::ADDN,TEMP_set};
 800385c:	4b88      	ldr	r3, [pc, #544]	@ (8003a80 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f0>)
 800385e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8003862:	4b84      	ldr	r3, [pc, #528]	@ (8003a74 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e4>)
 8003864:	6819      	ldr	r1, [r3, #0]
 8003866:	4886      	ldr	r0, [pc, #536]	@ (8003a80 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f0>)
 8003868:	1c93      	adds	r3, r2, #2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4403      	add	r3, r0
 800386e:	2008      	movs	r0, #8
 8003870:	7118      	strb	r0, [r3, #4]
 8003872:	4883      	ldr	r0, [pc, #524]	@ (8003a80 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f0>)
 8003874:	1c93      	adds	r3, r2, #2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4403      	add	r3, r0
 800387a:	6099      	str	r1, [r3, #8]
					(*msg) = sprintf(reply,"\r\n%ld%% Adducted\r\n",TEMP_set);
 800387c:	4b7d      	ldr	r3, [pc, #500]	@ (8003a74 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	461a      	mov	r2, r3
 8003882:	4980      	ldr	r1, [pc, #512]	@ (8003a84 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f4>)
 8003884:	4880      	ldr	r0, [pc, #512]	@ (8003a88 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f8>)
 8003886:	f008 fb61 	bl	800bf4c <siprintf>
 800388a:	4602      	mov	r2, r0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	601a      	str	r2, [r3, #0]
				if (FINGER.motion_cnt < (sizeof(FINGER.motion_list)/sizeof(Finger_TASK::motion_t)-1))
 8003890:	e1eb      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
					(*msg) = sprintf(reply,"\r\nCommand List Full, you can reset the list with the 'CLR' command\r\n");
 8003892:	497e      	ldr	r1, [pc, #504]	@ (8003a8c <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4fc>)
 8003894:	487c      	ldr	r0, [pc, #496]	@ (8003a88 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f8>)
 8003896:	f008 fb59 	bl	800bf4c <siprintf>
 800389a:	4602      	mov	r2, r0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	601a      	str	r2, [r3, #0]
				if (FINGER.motion_cnt < (sizeof(FINGER.motion_list)/sizeof(Finger_TASK::motion_t)-1))
 80038a0:	e1e3      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
				(*msg) = sprintf(reply,"\r\nInvalid Adduction %%: %ld\r\n",TEMP_set);
 80038a2:	4b74      	ldr	r3, [pc, #464]	@ (8003a74 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	4979      	ldr	r1, [pc, #484]	@ (8003a90 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x500>)
 80038aa:	4877      	ldr	r0, [pc, #476]	@ (8003a88 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f8>)
 80038ac:	f008 fb4e 	bl	800bf4c <siprintf>
 80038b0:	4602      	mov	r2, r0
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	601a      	str	r2, [r3, #0]
}
 80038b6:	e1d8      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
			(*msg) = sprintf(reply,"\r\nInvalid ADD Command Syntax: %s\r\n",buffer.c_str());
 80038b8:	486d      	ldr	r0, [pc, #436]	@ (8003a70 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e0>)
 80038ba:	f008 f9eb 	bl	800bc94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80038be:	4603      	mov	r3, r0
 80038c0:	461a      	mov	r2, r3
 80038c2:	4974      	ldr	r1, [pc, #464]	@ (8003a94 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x504>)
 80038c4:	4870      	ldr	r0, [pc, #448]	@ (8003a88 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f8>)
 80038c6:	f008 fb41 	bl	800bf4c <siprintf>
 80038ca:	4602      	mov	r2, r0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	601a      	str	r2, [r3, #0]
}
 80038d0:	e1cb      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
	else if ((*command) == "ABD") // If command is "ABD" abduct the finger
 80038d2:	4971      	ldr	r1, [pc, #452]	@ (8003a98 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x508>)
 80038d4:	6838      	ldr	r0, [r7, #0]
 80038d6:	f000 fa95 	bl	8003e04 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d06d      	beq.n	80039bc <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42c>
		valid = sscanf(buffer.substr(3).c_str(),"%ld",&TEMP_set);
 80038e0:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80038e4:	f04f 33ff 	mov.w	r3, #4294967295
 80038e8:	2203      	movs	r2, #3
 80038ea:	4961      	ldr	r1, [pc, #388]	@ (8003a70 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e0>)
 80038ec:	f008 fa14 	bl	800bd18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80038f0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80038f4:	4618      	mov	r0, r3
 80038f6:	f008 f9cd 	bl	800bc94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80038fa:	4603      	mov	r3, r0
 80038fc:	4a5d      	ldr	r2, [pc, #372]	@ (8003a74 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e4>)
 80038fe:	495e      	ldr	r1, [pc, #376]	@ (8003a78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e8>)
 8003900:	4618      	mov	r0, r3
 8003902:	f008 fb45 	bl	800bf90 <siscanf>
 8003906:	4603      	mov	r3, r0
 8003908:	4a5c      	ldr	r2, [pc, #368]	@ (8003a7c <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4ec>)
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003910:	4618      	mov	r0, r3
 8003912:	f008 f946 	bl	800bba2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		if (valid == 1) // If it is valid
 8003916:	4b59      	ldr	r3, [pc, #356]	@ (8003a7c <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4ec>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d141      	bne.n	80039a2 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x412>
			if ((TEMP_set >= 0) and (TEMP_set <= 100))
 800391e:	4b55      	ldr	r3, [pc, #340]	@ (8003a74 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	db32      	blt.n	800398c <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3fc>
 8003926:	4b53      	ldr	r3, [pc, #332]	@ (8003a74 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b64      	cmp	r3, #100	@ 0x64
 800392c:	dc2e      	bgt.n	800398c <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3fc>
				if (FINGER.motion_cnt < (sizeof(FINGER.motion_list)/sizeof(Finger_TASK::motion_t)-1))
 800392e:	4b54      	ldr	r3, [pc, #336]	@ (8003a80 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f0>)
 8003930:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003934:	2b12      	cmp	r3, #18
 8003936:	d821      	bhi.n	800397c <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3ec>
					FINGER.motion_cnt++; // Increment command count
 8003938:	4b51      	ldr	r3, [pc, #324]	@ (8003a80 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f0>)
 800393a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800393e:	3301      	adds	r3, #1
 8003940:	4a4f      	ldr	r2, [pc, #316]	@ (8003a80 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f0>)
 8003942:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
					FINGER.motion_list[FINGER.motion_cnt] = {Finger_TASK::ABDN,TEMP_set};
 8003946:	4b4e      	ldr	r3, [pc, #312]	@ (8003a80 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f0>)
 8003948:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800394c:	4b49      	ldr	r3, [pc, #292]	@ (8003a74 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e4>)
 800394e:	6819      	ldr	r1, [r3, #0]
 8003950:	484b      	ldr	r0, [pc, #300]	@ (8003a80 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f0>)
 8003952:	1c93      	adds	r3, r2, #2
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	4403      	add	r3, r0
 8003958:	2009      	movs	r0, #9
 800395a:	7118      	strb	r0, [r3, #4]
 800395c:	4848      	ldr	r0, [pc, #288]	@ (8003a80 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f0>)
 800395e:	1c93      	adds	r3, r2, #2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	4403      	add	r3, r0
 8003964:	6099      	str	r1, [r3, #8]
					(*msg) = sprintf(reply,"\r\n%ld%% Abducted\r\n",TEMP_set);
 8003966:	4b43      	ldr	r3, [pc, #268]	@ (8003a74 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	494b      	ldr	r1, [pc, #300]	@ (8003a9c <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x50c>)
 800396e:	4846      	ldr	r0, [pc, #280]	@ (8003a88 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f8>)
 8003970:	f008 faec 	bl	800bf4c <siprintf>
 8003974:	4602      	mov	r2, r0
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	601a      	str	r2, [r3, #0]
				if (FINGER.motion_cnt < (sizeof(FINGER.motion_list)/sizeof(Finger_TASK::motion_t)-1))
 800397a:	e176      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
					(*msg) = sprintf(reply,"\r\nCommand List Full, you can reset the list with the 'CLR' command\r\n");
 800397c:	4943      	ldr	r1, [pc, #268]	@ (8003a8c <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4fc>)
 800397e:	4842      	ldr	r0, [pc, #264]	@ (8003a88 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f8>)
 8003980:	f008 fae4 	bl	800bf4c <siprintf>
 8003984:	4602      	mov	r2, r0
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	601a      	str	r2, [r3, #0]
				if (FINGER.motion_cnt < (sizeof(FINGER.motion_list)/sizeof(Finger_TASK::motion_t)-1))
 800398a:	e16e      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
				(*msg) = sprintf(reply,"\r\nInvalid Abduction %%: %ld\r\n",TEMP_set);
 800398c:	4b39      	ldr	r3, [pc, #228]	@ (8003a74 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	461a      	mov	r2, r3
 8003992:	4943      	ldr	r1, [pc, #268]	@ (8003aa0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x510>)
 8003994:	483c      	ldr	r0, [pc, #240]	@ (8003a88 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f8>)
 8003996:	f008 fad9 	bl	800bf4c <siprintf>
 800399a:	4602      	mov	r2, r0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	601a      	str	r2, [r3, #0]
}
 80039a0:	e163      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
			(*msg) = sprintf(reply,"\r\nInvalid ABD Command Syntax: %s\r\n",buffer.c_str());
 80039a2:	4833      	ldr	r0, [pc, #204]	@ (8003a70 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e0>)
 80039a4:	f008 f976 	bl	800bc94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80039a8:	4603      	mov	r3, r0
 80039aa:	461a      	mov	r2, r3
 80039ac:	493d      	ldr	r1, [pc, #244]	@ (8003aa4 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x514>)
 80039ae:	4836      	ldr	r0, [pc, #216]	@ (8003a88 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f8>)
 80039b0:	f008 facc 	bl	800bf4c <siprintf>
 80039b4:	4602      	mov	r2, r0
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	601a      	str	r2, [r3, #0]
}
 80039ba:	e156      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
	else if ((*command) == "DLY") // If the command is "DLY" change the delay between instructions
 80039bc:	493a      	ldr	r1, [pc, #232]	@ (8003aa8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x518>)
 80039be:	6838      	ldr	r0, [r7, #0]
 80039c0:	f000 fa20 	bl	8003e04 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d03c      	beq.n	8003a44 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4b4>
		valid = sscanf(buffer.substr(3).c_str(),"%ld",&TEMP_set);
 80039ca:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80039ce:	f04f 33ff 	mov.w	r3, #4294967295
 80039d2:	2203      	movs	r2, #3
 80039d4:	4926      	ldr	r1, [pc, #152]	@ (8003a70 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e0>)
 80039d6:	f008 f99f 	bl	800bd18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80039da:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80039de:	4618      	mov	r0, r3
 80039e0:	f008 f958 	bl	800bc94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80039e4:	4603      	mov	r3, r0
 80039e6:	4a23      	ldr	r2, [pc, #140]	@ (8003a74 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e4>)
 80039e8:	4923      	ldr	r1, [pc, #140]	@ (8003a78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e8>)
 80039ea:	4618      	mov	r0, r3
 80039ec:	f008 fad0 	bl	800bf90 <siscanf>
 80039f0:	4603      	mov	r3, r0
 80039f2:	4a22      	ldr	r2, [pc, #136]	@ (8003a7c <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4ec>)
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80039fa:	4618      	mov	r0, r3
 80039fc:	f008 f8d1 	bl	800bba2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		if (valid == 1)
 8003a00:	4b1e      	ldr	r3, [pc, #120]	@ (8003a7c <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4ec>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d110      	bne.n	8003a2a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x49a>
			FINGER.motion_delay = TEMP_set; // Update the delay
 8003a08:	4b1a      	ldr	r3, [pc, #104]	@ (8003a74 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8003a80 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f0>)
 8003a10:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
			(*msg) = sprintf(reply,"\r\nDelay set to %ld milliseconds\r\n",TEMP_set); // Prepare UI reply
 8003a14:	4b17      	ldr	r3, [pc, #92]	@ (8003a74 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4924      	ldr	r1, [pc, #144]	@ (8003aac <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x51c>)
 8003a1c:	481a      	ldr	r0, [pc, #104]	@ (8003a88 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f8>)
 8003a1e:	f008 fa95 	bl	800bf4c <siprintf>
 8003a22:	4602      	mov	r2, r0
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	601a      	str	r2, [r3, #0]
}
 8003a28:	e11f      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
			(*msg) = sprintf(reply,"\r\nInvalid SPD Command Syntax: %s\r\n",buffer.c_str());
 8003a2a:	4811      	ldr	r0, [pc, #68]	@ (8003a70 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e0>)
 8003a2c:	f008 f932 	bl	800bc94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8003a30:	4603      	mov	r3, r0
 8003a32:	461a      	mov	r2, r3
 8003a34:	491e      	ldr	r1, [pc, #120]	@ (8003ab0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x520>)
 8003a36:	4814      	ldr	r0, [pc, #80]	@ (8003a88 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f8>)
 8003a38:	f008 fa88 	bl	800bf4c <siprintf>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	601a      	str	r2, [r3, #0]
}
 8003a42:	e112      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
	else if ((*command) == "RUN") // If the command is "RUN" run the sequence once
 8003a44:	491b      	ldr	r1, [pc, #108]	@ (8003ab4 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x524>)
 8003a46:	6838      	ldr	r0, [r7, #0]
 8003a48:	f000 f9dc 	bl	8003e04 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d034      	beq.n	8003abc <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x52c>
		FINGER.motion_index = 0; // Set the index back to 0
 8003a52:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f0>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		(*msg) = sprintf(reply,"\r\nRunning Commands\r\n"); // Prepare UI reply
 8003a5a:	4917      	ldr	r1, [pc, #92]	@ (8003ab8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x528>)
 8003a5c:	480a      	ldr	r0, [pc, #40]	@ (8003a88 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4f8>)
 8003a5e:	f008 fa75 	bl	800bf4c <siprintf>
 8003a62:	4602      	mov	r2, r0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	601a      	str	r2, [r3, #0]
}
 8003a68:	e0ff      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
 8003a6a:	bf00      	nop
 8003a6c:	0800d2d0 	.word	0x0800d2d0
 8003a70:	200007f8 	.word	0x200007f8
 8003a74:	20000878 	.word	0x20000878
 8003a78:	0800d2d4 	.word	0x0800d2d4
 8003a7c:	200007f0 	.word	0x200007f0
 8003a80:	2000068c 	.word	0x2000068c
 8003a84:	0800d2d8 	.word	0x0800d2d8
 8003a88:	20000810 	.word	0x20000810
 8003a8c:	0800d1a8 	.word	0x0800d1a8
 8003a90:	0800d2ec 	.word	0x0800d2ec
 8003a94:	0800d30c 	.word	0x0800d30c
 8003a98:	0800d330 	.word	0x0800d330
 8003a9c:	0800d334 	.word	0x0800d334
 8003aa0:	0800d348 	.word	0x0800d348
 8003aa4:	0800d368 	.word	0x0800d368
 8003aa8:	0800d38c 	.word	0x0800d38c
 8003aac:	0800d390 	.word	0x0800d390
 8003ab0:	0800d3b4 	.word	0x0800d3b4
 8003ab4:	0800d3d8 	.word	0x0800d3d8
 8003ab8:	0800d3dc 	.word	0x0800d3dc
	else if ((*command) == "LPG") // If the command is "LPG" loop the sequence indefinitely
 8003abc:	496d      	ldr	r1, [pc, #436]	@ (8003c74 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e4>)
 8003abe:	6838      	ldr	r0, [r7, #0]
 8003ac0:	f000 f9a0 	bl	8003e04 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d02a      	beq.n	8003b20 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x590>
		if (FINGER.motion_cnt < (sizeof(FINGER.motion_list)/sizeof(Finger_TASK::motion_t)-1))
 8003aca:	4b6b      	ldr	r3, [pc, #428]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003acc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003ad0:	2b12      	cmp	r3, #18
 8003ad2:	d81d      	bhi.n	8003b10 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x580>
			FINGER.motion_cnt++;  // Increment command count
 8003ad4:	4b68      	ldr	r3, [pc, #416]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003ad6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003ada:	3301      	adds	r3, #1
 8003adc:	4a66      	ldr	r2, [pc, #408]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003ade:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
			FINGER.motion_list[FINGER.motion_cnt] = {Finger_TASK::HUB,0};
 8003ae2:	4b65      	ldr	r3, [pc, #404]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003ae4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8003ae8:	4963      	ldr	r1, [pc, #396]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003aea:	1c93      	adds	r3, r2, #2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	440b      	add	r3, r1
 8003af0:	2104      	movs	r1, #4
 8003af2:	7119      	strb	r1, [r3, #4]
 8003af4:	4960      	ldr	r1, [pc, #384]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003af6:	1c93      	adds	r3, r2, #2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	440b      	add	r3, r1
 8003afc:	2200      	movs	r2, #0
 8003afe:	609a      	str	r2, [r3, #8]
			(*msg) = sprintf(reply,"\r\nLooping Commands\r\n");
 8003b00:	495e      	ldr	r1, [pc, #376]	@ (8003c7c <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6ec>)
 8003b02:	485f      	ldr	r0, [pc, #380]	@ (8003c80 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6f0>)
 8003b04:	f008 fa22 	bl	800bf4c <siprintf>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	601a      	str	r2, [r3, #0]
}
 8003b0e:	e0ac      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
			(*msg) = sprintf(reply,"\r\nCommand List Full, you can reset the list with the 'CLR' command\r\n");
 8003b10:	495c      	ldr	r1, [pc, #368]	@ (8003c84 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6f4>)
 8003b12:	485b      	ldr	r0, [pc, #364]	@ (8003c80 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6f0>)
 8003b14:	f008 fa1a 	bl	800bf4c <siprintf>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	601a      	str	r2, [r3, #0]
}
 8003b1e:	e0a4      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
	else if ((*command) == "STP") // If command is "STP" stop the loop
 8003b20:	4959      	ldr	r1, [pc, #356]	@ (8003c88 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6f8>)
 8003b22:	6838      	ldr	r0, [r7, #0]
 8003b24:	f000 f96e 	bl	8003e04 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00e      	beq.n	8003b4c <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5bc>
		FINGER.motion_cnt--; // Remove the HUB command from the list (Can also be used to undo)
 8003b2e:	4b52      	ldr	r3, [pc, #328]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003b30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003b34:	3b01      	subs	r3, #1
 8003b36:	4a50      	ldr	r2, [pc, #320]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003b38:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
		(*msg) = sprintf(reply,"\r\nStopping Loop\r\n"); // Prepare UI reply
 8003b3c:	4953      	ldr	r1, [pc, #332]	@ (8003c8c <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6fc>)
 8003b3e:	4850      	ldr	r0, [pc, #320]	@ (8003c80 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6f0>)
 8003b40:	f008 fa04 	bl	800bf4c <siprintf>
 8003b44:	4602      	mov	r2, r0
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	601a      	str	r2, [r3, #0]
}
 8003b4a:	e08e      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
	else if ((*command) == "CLR") // If commad is "CLR" cleat the sequence
 8003b4c:	4950      	ldr	r1, [pc, #320]	@ (8003c90 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x700>)
 8003b4e:	6838      	ldr	r0, [r7, #0]
 8003b50:	f000 f958 	bl	8003e04 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d01e      	beq.n	8003b98 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x608>
		FINGER.motion_index = 0; // Send back to start
 8003b5a:	4b47      	ldr	r3, [pc, #284]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		FINGER.motion_cnt = 0; // Remove all commands from list
 8003b62:	4b45      	ldr	r3, [pc, #276]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		FINGER.motion_list[FINGER.motion_cnt] = {Finger_TASK::HUB,0}; // Make sure first command is hub
 8003b6a:	4b43      	ldr	r3, [pc, #268]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003b6c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8003b70:	4941      	ldr	r1, [pc, #260]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003b72:	1c93      	adds	r3, r2, #2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	440b      	add	r3, r1
 8003b78:	2104      	movs	r1, #4
 8003b7a:	7119      	strb	r1, [r3, #4]
 8003b7c:	493e      	ldr	r1, [pc, #248]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003b7e:	1c93      	adds	r3, r2, #2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	440b      	add	r3, r1
 8003b84:	2200      	movs	r2, #0
 8003b86:	609a      	str	r2, [r3, #8]
		(*msg) = sprintf(reply,"\r\nCommand List Cleared\r\n"); // Prepare UI reply
 8003b88:	4942      	ldr	r1, [pc, #264]	@ (8003c94 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x704>)
 8003b8a:	483d      	ldr	r0, [pc, #244]	@ (8003c80 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6f0>)
 8003b8c:	f008 f9de 	bl	800bf4c <siprintf>
 8003b90:	4602      	mov	r2, r0
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	601a      	str	r2, [r3, #0]
}
 8003b96:	e068      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
	else if ((*command) == "DMO") // If command is "DMO" start pre-programmed demo
 8003b98:	493f      	ldr	r1, [pc, #252]	@ (8003c98 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x708>)
 8003b9a:	6838      	ldr	r0, [r7, #0]
 8003b9c:	f000 f932 	bl	8003e04 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d054      	beq.n	8003c50 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6c0>
		FINGER.motion_index = 0; // Send back to start
 8003ba6:	4b34      	ldr	r3, [pc, #208]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
			FINGER.motion_list[0] = {Finger_TASK::HUB,0};
 8003bae:	4b32      	ldr	r3, [pc, #200]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003bb0:	2204      	movs	r2, #4
 8003bb2:	751a      	strb	r2, [r3, #20]
 8003bb4:	4b30      	ldr	r3, [pc, #192]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	619a      	str	r2, [r3, #24]
			FINGER.motion_list[1] = {Finger_TASK::ABDN,100};
 8003bba:	4b2f      	ldr	r3, [pc, #188]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003bbc:	4a37      	ldr	r2, [pc, #220]	@ (8003c9c <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x70c>)
 8003bbe:	331c      	adds	r3, #28
 8003bc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bc4:	e883 0003 	stmia.w	r3, {r0, r1}
			FINGER.motion_list[2] = {Finger_TASK::FLX3,100};
 8003bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003bca:	4a35      	ldr	r2, [pc, #212]	@ (8003ca0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x710>)
 8003bcc:	3324      	adds	r3, #36	@ 0x24
 8003bce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bd2:	e883 0003 	stmia.w	r3, {r0, r1}
			FINGER.motion_list[3] = {Finger_TASK::ADDN,75};
 8003bd6:	4b28      	ldr	r3, [pc, #160]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003bd8:	4a32      	ldr	r2, [pc, #200]	@ (8003ca4 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x714>)
 8003bda:	332c      	adds	r3, #44	@ 0x2c
 8003bdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003be0:	e883 0003 	stmia.w	r3, {r0, r1}
			FINGER.motion_list[4] = {Finger_TASK::FLX2,100};
 8003be4:	4b24      	ldr	r3, [pc, #144]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003be6:	4a30      	ldr	r2, [pc, #192]	@ (8003ca8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x718>)
 8003be8:	3334      	adds	r3, #52	@ 0x34
 8003bea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bee:	e883 0003 	stmia.w	r3, {r0, r1}
			FINGER.motion_list[5] = {Finger_TASK::FLX1,25};
 8003bf2:	4b21      	ldr	r3, [pc, #132]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8003cac <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x71c>)
 8003bf6:	333c      	adds	r3, #60	@ 0x3c
 8003bf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bfc:	e883 0003 	stmia.w	r3, {r0, r1}
			FINGER.motion_list[6] = {Finger_TASK::ADDN,25};
 8003c00:	4b1d      	ldr	r3, [pc, #116]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003c02:	4a2b      	ldr	r2, [pc, #172]	@ (8003cb0 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x720>)
 8003c04:	3344      	adds	r3, #68	@ 0x44
 8003c06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c0a:	e883 0003 	stmia.w	r3, {r0, r1}
			FINGER.motion_list[7] = {Finger_TASK::FLX1,0};
 8003c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003c10:	2207      	movs	r2, #7
 8003c12:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8003c16:	4b18      	ldr	r3, [pc, #96]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	651a      	str	r2, [r3, #80]	@ 0x50
			FINGER.motion_list[8] = {Finger_TASK::ADDN,0};
 8003c1c:	4b16      	ldr	r3, [pc, #88]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003c1e:	2208      	movs	r2, #8
 8003c20:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003c24:	4b14      	ldr	r3, [pc, #80]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	659a      	str	r2, [r3, #88]	@ 0x58
			FINGER.motion_list[9] = {Finger_TASK::HUB,0};
 8003c2a:	4b13      	ldr	r3, [pc, #76]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003c32:	4b11      	ldr	r3, [pc, #68]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	661a      	str	r2, [r3, #96]	@ 0x60
			FINGER.motion_cnt = 9;
 8003c38:	4b0f      	ldr	r3, [pc, #60]	@ (8003c78 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e8>)
 8003c3a:	2209      	movs	r2, #9
 8003c3c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		(*msg) = sprintf(reply,"\r\nBegin demo motion sequence\r\n");
 8003c40:	491c      	ldr	r1, [pc, #112]	@ (8003cb4 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x724>)
 8003c42:	480f      	ldr	r0, [pc, #60]	@ (8003c80 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6f0>)
 8003c44:	f008 f982 	bl	800bf4c <siprintf>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	601a      	str	r2, [r3, #0]
}
 8003c4e:	e00c      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
		(*msg) = sprintf(reply,"\r\nInvalid Command: %s \r\n",buffer.c_str());
 8003c50:	4819      	ldr	r0, [pc, #100]	@ (8003cb8 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x728>)
 8003c52:	f008 f81f 	bl	800bc94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8003c56:	4603      	mov	r3, r0
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4918      	ldr	r1, [pc, #96]	@ (8003cbc <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x72c>)
 8003c5c:	4808      	ldr	r0, [pc, #32]	@ (8003c80 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6f0>)
 8003c5e:	f008 f975 	bl	800bf4c <siprintf>
 8003c62:	4602      	mov	r2, r0
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	601a      	str	r2, [r3, #0]
}
 8003c68:	e7ff      	b.n	8003c6a <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6da>
 8003c6a:	bf00      	nop
 8003c6c:	3768      	adds	r7, #104	@ 0x68
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	0800d3f4 	.word	0x0800d3f4
 8003c78:	2000068c 	.word	0x2000068c
 8003c7c:	0800d3f8 	.word	0x0800d3f8
 8003c80:	20000810 	.word	0x20000810
 8003c84:	0800d1a8 	.word	0x0800d1a8
 8003c88:	0800d410 	.word	0x0800d410
 8003c8c:	0800d414 	.word	0x0800d414
 8003c90:	0800d428 	.word	0x0800d428
 8003c94:	0800d42c 	.word	0x0800d42c
 8003c98:	0800d448 	.word	0x0800d448
 8003c9c:	0800d488 	.word	0x0800d488
 8003ca0:	0800d490 	.word	0x0800d490
 8003ca4:	0800d498 	.word	0x0800d498
 8003ca8:	0800d4a0 	.word	0x0800d4a0
 8003cac:	0800d4a8 	.word	0x0800d4a8
 8003cb0:	0800d4b0 	.word	0x0800d4b0
 8003cb4:	0800d44c 	.word	0x0800d44c
 8003cb8:	200007f8 	.word	0x200007f8
 8003cbc:	0800d46c 	.word	0x0800d46c

08003cc0 <HAL_UART_RxCpltCallback>:

/**
 * @brief UART Callback
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08a      	sub	sp, #40	@ 0x28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,&buf,sizeof(buf),1000); // Echo keys
 8003cc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ccc:	2201      	movs	r2, #1
 8003cce:	4926      	ldr	r1, [pc, #152]	@ (8003d68 <HAL_UART_RxCpltCallback+0xa8>)
 8003cd0:	4826      	ldr	r0, [pc, #152]	@ (8003d6c <HAL_UART_RxCpltCallback+0xac>)
 8003cd2:	f005 fdd7 	bl	8009884 <HAL_UART_Transmit>

	// If enter is pressed
	if ((buf == '\n') || (buf == '\r'))
 8003cd6:	4b24      	ldr	r3, [pc, #144]	@ (8003d68 <HAL_UART_RxCpltCallback+0xa8>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b0a      	cmp	r3, #10
 8003cdc:	d003      	beq.n	8003ce6 <HAL_UART_RxCpltCallback+0x26>
 8003cde:	4b22      	ldr	r3, [pc, #136]	@ (8003d68 <HAL_UART_RxCpltCallback+0xa8>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b0d      	cmp	r3, #13
 8003ce4:	d11f      	bne.n	8003d26 <HAL_UART_RxCpltCallback+0x66>
	{
		int msg; // creat message variable

		std::string command = buffer.substr(0,3); // Isolate the command
 8003ce6:	f107 000c 	add.w	r0, r7, #12
 8003cea:	2303      	movs	r3, #3
 8003cec:	2200      	movs	r2, #0
 8003cee:	4920      	ldr	r1, [pc, #128]	@ (8003d70 <HAL_UART_RxCpltCallback+0xb0>)
 8003cf0:	f008 f812 	bl	800bd18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>

		cmd_parse(&msg,&command); // Parse the command
 8003cf4:	f107 020c 	add.w	r2, r7, #12
 8003cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff fc46 	bl	8003590 <_Z9cmd_parsePiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>

		HAL_UART_Transmit(&huart1,(unsigned char*)reply,msg,1000); // Transmit UI reply
 8003d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d0c:	4919      	ldr	r1, [pc, #100]	@ (8003d74 <HAL_UART_RxCpltCallback+0xb4>)
 8003d0e:	4817      	ldr	r0, [pc, #92]	@ (8003d6c <HAL_UART_RxCpltCallback+0xac>)
 8003d10:	f005 fdb8 	bl	8009884 <HAL_UART_Transmit>
		buffer.clear(); // Clear the buffer to prevent re-running same command
 8003d14:	4816      	ldr	r0, [pc, #88]	@ (8003d70 <HAL_UART_RxCpltCallback+0xb0>)
 8003d16:	f007 ff8d 	bl	800bc34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
	}
 8003d1a:	f107 030c 	add.w	r3, r7, #12
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f007 ff3f 	bl	800bba2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003d24:	e016      	b.n	8003d54 <HAL_UART_RxCpltCallback+0x94>
	else if (buf == '\177') // IF backspace pressed
 8003d26:	4b10      	ldr	r3, [pc, #64]	@ (8003d68 <HAL_UART_RxCpltCallback+0xa8>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d2c:	d10c      	bne.n	8003d48 <HAL_UART_RxCpltCallback+0x88>
	{
		if (not buffer.empty()) // Make sure the string isnt empty
 8003d2e:	4810      	ldr	r0, [pc, #64]	@ (8003d70 <HAL_UART_RxCpltCallback+0xb0>)
 8003d30:	f007 ff85 	bl	800bc3e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f083 0301 	eor.w	r3, r3, #1
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d009      	beq.n	8003d54 <HAL_UART_RxCpltCallback+0x94>
		{
			buffer.pop_back(); // Remove the most recent character
 8003d40:	480b      	ldr	r0, [pc, #44]	@ (8003d70 <HAL_UART_RxCpltCallback+0xb0>)
 8003d42:	f007 ffa0 	bl	800bc86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8pop_backEv>
 8003d46:	e005      	b.n	8003d54 <HAL_UART_RxCpltCallback+0x94>
		}
	}
	else // Otherwise
	{
		buffer += buf; // Add buf to buffer
 8003d48:	4b07      	ldr	r3, [pc, #28]	@ (8003d68 <HAL_UART_RxCpltCallback+0xa8>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4808      	ldr	r0, [pc, #32]	@ (8003d70 <HAL_UART_RxCpltCallback+0xb0>)
 8003d50:	f007 ff93 	bl	800bc7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	}

	HAL_UART_Receive_IT(&huart1,&buf,sizeof(buf)); // Set up to recieve again
 8003d54:	2201      	movs	r2, #1
 8003d56:	4904      	ldr	r1, [pc, #16]	@ (8003d68 <HAL_UART_RxCpltCallback+0xa8>)
 8003d58:	4804      	ldr	r0, [pc, #16]	@ (8003d6c <HAL_UART_RxCpltCallback+0xac>)
 8003d5a:	f005 fe21 	bl	80099a0 <HAL_UART_Receive_IT>
}
 8003d5e:	bf00      	nop
 8003d60:	3728      	adds	r7, #40	@ 0x28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	20000874 	.word	0x20000874
 8003d6c:	20000490 	.word	0x20000490
 8003d70:	200007f8 	.word	0x200007f8
 8003d74:	20000810 	.word	0x20000810

08003d78 <_Z6microsv>:
/**
 * @brief Get the current time in microseconds
 * @return Count of microseconds timer
 */
uint16_t micros(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
	return (&htim6)->Instance->CNT; // Get the microseconds timer count
 8003d7c:	4b04      	ldr	r3, [pc, #16]	@ (8003d90 <_Z6microsv+0x18>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d82:	b29b      	uxth	r3, r3
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	200003ac 	.word	0x200003ac

08003d94 <_Z9time_difftt>:
 * @param initial_t Initial Time in microseconds
 * @param final_t Final Time in microseconds
 * @return Difference between initial and final time in microseconds
 */
uint16_t time_diff(uint16_t initial_t, uint16_t final_t)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	460a      	mov	r2, r1
 8003d9e:	80fb      	strh	r3, [r7, #6]
 8003da0:	4613      	mov	r3, r2
 8003da2:	80bb      	strh	r3, [r7, #4]
	uint16_t dt = final_t - initial_t; // Calculate the change in time
 8003da4:	88ba      	ldrh	r2, [r7, #4]
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	81fb      	strh	r3, [r7, #14]

	uint16_t AR = __HAL_TIM_GET_AUTORELOAD(&htim6); // Retrieve AR for CLK
 8003dac:	4b11      	ldr	r3, [pc, #68]	@ (8003df4 <_Z9time_difftt+0x60>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db2:	81bb      	strh	r3, [r7, #12]

	if (abs(dt) > (AR + 1)/2) // Account for overflow
 8003db4:	89fa      	ldrh	r2, [r7, #14]
 8003db6:	89bb      	ldrh	r3, [r7, #12]
 8003db8:	3301      	adds	r3, #1
 8003dba:	0fd9      	lsrs	r1, r3, #31
 8003dbc:	440b      	add	r3, r1
 8003dbe:	105b      	asrs	r3, r3, #1
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	dd0f      	ble.n	8003de4 <_Z9time_difftt+0x50>
	{
		if (dt > 0)
 8003dc4:	89fb      	ldrh	r3, [r7, #14]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d006      	beq.n	8003dd8 <_Z9time_difftt+0x44>
		{
			dt -= (AR + 1);
 8003dca:	89fa      	ldrh	r2, [r7, #14]
 8003dcc:	89bb      	ldrh	r3, [r7, #12]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	81fb      	strh	r3, [r7, #14]
 8003dd6:	e005      	b.n	8003de4 <_Z9time_difftt+0x50>
		}
		else
		{
			dt += (AR + 1);
 8003dd8:	89ba      	ldrh	r2, [r7, #12]
 8003dda:	89fb      	ldrh	r3, [r7, #14]
 8003ddc:	4413      	add	r3, r2
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3301      	adds	r3, #1
 8003de2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return dt;
 8003de4:	89fb      	ldrh	r3, [r7, #14]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	200003ac 	.word	0x200003ac

08003df8 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  */
void Error_Handler(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003dfc:	b672      	cpsid	i
}
 8003dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e00:	bf00      	nop
 8003e02:	e7fd      	b.n	8003e00 <Error_Handler+0x8>

08003e04 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
   *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8003e04:	b590      	push	{r4, r7, lr}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
	       const _CharT* __rhs)
    {
      return __lhs.size() == _Traits::length(__rhs)
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f007 fecd 	bl	800bbae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8003e14:	4604      	mov	r4, r0
 8003e16:	6838      	ldr	r0, [r7, #0]
 8003e18:	f7fe fbce 	bl	80025b8 <_ZNSt11char_traitsIcE6lengthEPKc>
 8003e1c:	4603      	mov	r3, r0
	       && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());
 8003e1e:	429c      	cmp	r4, r3
 8003e20:	d111      	bne.n	8003e46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_+0x42>
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f007 ff38 	bl	800bc98 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 8003e28:	4604      	mov	r4, r0
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f007 febf 	bl	800bbae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8003e30:	4603      	mov	r3, r0
 8003e32:	461a      	mov	r2, r3
 8003e34:	6839      	ldr	r1, [r7, #0]
 8003e36:	4620      	mov	r0, r4
 8003e38:	f7fe fba8 	bl	800258c <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_+0x42>
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_+0x44>
 8003e46:	2300      	movs	r3, #0
    }
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd90      	pop	{r4, r7, pc}

08003e50 <_ZNSt15__new_allocatorIcED1Ev>:
#if __cplusplus >= 201103L
      __new_allocator& operator=(const __new_allocator&) = default;
#endif

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
	...

08003e68 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08a      	sub	sp, #40	@ 0x28
 8003e6c:	af08      	add	r7, sp, #32
				  ,&hdac1,DAC_CHANNEL_1);
 8003e6e:	2300      	movs	r3, #0
 8003e70:	9307      	str	r3, [sp, #28]
 8003e72:	4b54      	ldr	r3, [pc, #336]	@ (8003fc4 <_Z41__static_initialization_and_destruction_0v+0x15c>)
 8003e74:	9306      	str	r3, [sp, #24]
 8003e76:	4b54      	ldr	r3, [pc, #336]	@ (8003fc8 <_Z41__static_initialization_and_destruction_0v+0x160>)
 8003e78:	9305      	str	r3, [sp, #20]
 8003e7a:	4b54      	ldr	r3, [pc, #336]	@ (8003fcc <_Z41__static_initialization_and_destruction_0v+0x164>)
 8003e7c:	9304      	str	r3, [sp, #16]
 8003e7e:	4b54      	ldr	r3, [pc, #336]	@ (8003fd0 <_Z41__static_initialization_and_destruction_0v+0x168>)
 8003e80:	9303      	str	r3, [sp, #12]
 8003e82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e86:	9302      	str	r3, [sp, #8]
 8003e88:	4b52      	ldr	r3, [pc, #328]	@ (8003fd4 <_Z41__static_initialization_and_destruction_0v+0x16c>)
 8003e8a:	9301      	str	r3, [sp, #4]
 8003e8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	4b50      	ldr	r3, [pc, #320]	@ (8003fd4 <_Z41__static_initialization_and_destruction_0v+0x16c>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	4950      	ldr	r1, [pc, #320]	@ (8003fd8 <_Z41__static_initialization_and_destruction_0v+0x170>)
 8003e98:	4850      	ldr	r0, [pc, #320]	@ (8003fdc <_Z41__static_initialization_and_destruction_0v+0x174>)
 8003e9a:	f000 f8eb 	bl	8004074 <_ZN5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_tS1_P17ADC_HandleTypeDefmP17DAC_HandleTypeDefm>
				  ,&hdac1,DAC_CHANNEL_2);
 8003e9e:	2310      	movs	r3, #16
 8003ea0:	9307      	str	r3, [sp, #28]
 8003ea2:	4b48      	ldr	r3, [pc, #288]	@ (8003fc4 <_Z41__static_initialization_and_destruction_0v+0x15c>)
 8003ea4:	9306      	str	r3, [sp, #24]
 8003ea6:	4b4e      	ldr	r3, [pc, #312]	@ (8003fe0 <_Z41__static_initialization_and_destruction_0v+0x178>)
 8003ea8:	9305      	str	r3, [sp, #20]
 8003eaa:	4b48      	ldr	r3, [pc, #288]	@ (8003fcc <_Z41__static_initialization_and_destruction_0v+0x164>)
 8003eac:	9304      	str	r3, [sp, #16]
 8003eae:	4b4d      	ldr	r3, [pc, #308]	@ (8003fe4 <_Z41__static_initialization_and_destruction_0v+0x17c>)
 8003eb0:	9303      	str	r3, [sp, #12]
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	9302      	str	r3, [sp, #8]
 8003eb6:	4b47      	ldr	r3, [pc, #284]	@ (8003fd4 <_Z41__static_initialization_and_destruction_0v+0x16c>)
 8003eb8:	9301      	str	r3, [sp, #4]
 8003eba:	2301      	movs	r3, #1
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	4b45      	ldr	r3, [pc, #276]	@ (8003fd4 <_Z41__static_initialization_and_destruction_0v+0x16c>)
 8003ec0:	2204      	movs	r2, #4
 8003ec2:	4945      	ldr	r1, [pc, #276]	@ (8003fd8 <_Z41__static_initialization_and_destruction_0v+0x170>)
 8003ec4:	4848      	ldr	r0, [pc, #288]	@ (8003fe8 <_Z41__static_initialization_and_destruction_0v+0x180>)
 8003ec6:	f000 f8d5 	bl	8004074 <_ZN5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_tS1_P17ADC_HandleTypeDefmP17DAC_HandleTypeDefm>
				  ,&hdac2,DAC_CHANNEL_1);
 8003eca:	2300      	movs	r3, #0
 8003ecc:	9307      	str	r3, [sp, #28]
 8003ece:	4b47      	ldr	r3, [pc, #284]	@ (8003fec <_Z41__static_initialization_and_destruction_0v+0x184>)
 8003ed0:	9306      	str	r3, [sp, #24]
 8003ed2:	4b47      	ldr	r3, [pc, #284]	@ (8003ff0 <_Z41__static_initialization_and_destruction_0v+0x188>)
 8003ed4:	9305      	str	r3, [sp, #20]
 8003ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8003fcc <_Z41__static_initialization_and_destruction_0v+0x164>)
 8003ed8:	9304      	str	r3, [sp, #16]
 8003eda:	4b46      	ldr	r3, [pc, #280]	@ (8003ff4 <_Z41__static_initialization_and_destruction_0v+0x18c>)
 8003edc:	9303      	str	r3, [sp, #12]
 8003ede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ee2:	9302      	str	r3, [sp, #8]
 8003ee4:	4b44      	ldr	r3, [pc, #272]	@ (8003ff8 <_Z41__static_initialization_and_destruction_0v+0x190>)
 8003ee6:	9301      	str	r3, [sp, #4]
 8003ee8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	4b42      	ldr	r3, [pc, #264]	@ (8003ff8 <_Z41__static_initialization_and_destruction_0v+0x190>)
 8003ef0:	2208      	movs	r2, #8
 8003ef2:	4939      	ldr	r1, [pc, #228]	@ (8003fd8 <_Z41__static_initialization_and_destruction_0v+0x170>)
 8003ef4:	4841      	ldr	r0, [pc, #260]	@ (8003ffc <_Z41__static_initialization_and_destruction_0v+0x194>)
 8003ef6:	f000 f8bd 	bl	8004074 <_ZN5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_tS1_P17ADC_HandleTypeDefmP17DAC_HandleTypeDefm>
				  ,&hdac3,DAC_CHANNEL_1);
 8003efa:	2300      	movs	r3, #0
 8003efc:	9307      	str	r3, [sp, #28]
 8003efe:	4b40      	ldr	r3, [pc, #256]	@ (8004000 <_Z41__static_initialization_and_destruction_0v+0x198>)
 8003f00:	9306      	str	r3, [sp, #24]
 8003f02:	4b40      	ldr	r3, [pc, #256]	@ (8004004 <_Z41__static_initialization_and_destruction_0v+0x19c>)
 8003f04:	9305      	str	r3, [sp, #20]
 8003f06:	4b31      	ldr	r3, [pc, #196]	@ (8003fcc <_Z41__static_initialization_and_destruction_0v+0x164>)
 8003f08:	9304      	str	r3, [sp, #16]
 8003f0a:	4b3f      	ldr	r3, [pc, #252]	@ (8004008 <_Z41__static_initialization_and_destruction_0v+0x1a0>)
 8003f0c:	9303      	str	r3, [sp, #12]
 8003f0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f12:	9302      	str	r3, [sp, #8]
 8003f14:	4b2f      	ldr	r3, [pc, #188]	@ (8003fd4 <_Z41__static_initialization_and_destruction_0v+0x16c>)
 8003f16:	9301      	str	r3, [sp, #4]
 8003f18:	2340      	movs	r3, #64	@ 0x40
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003fd4 <_Z41__static_initialization_and_destruction_0v+0x16c>)
 8003f1e:	220c      	movs	r2, #12
 8003f20:	492d      	ldr	r1, [pc, #180]	@ (8003fd8 <_Z41__static_initialization_and_destruction_0v+0x170>)
 8003f22:	483a      	ldr	r0, [pc, #232]	@ (800400c <_Z41__static_initialization_and_destruction_0v+0x1a4>)
 8003f24:	f000 f8a6 	bl	8004074 <_ZN5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_tS1_P17ADC_HandleTypeDefmP17DAC_HandleTypeDefm>
				  ,&hdac4,DAC_CHANNEL_1);
 8003f28:	2300      	movs	r3, #0
 8003f2a:	9307      	str	r3, [sp, #28]
 8003f2c:	4b38      	ldr	r3, [pc, #224]	@ (8004010 <_Z41__static_initialization_and_destruction_0v+0x1a8>)
 8003f2e:	9306      	str	r3, [sp, #24]
 8003f30:	4b38      	ldr	r3, [pc, #224]	@ (8004014 <_Z41__static_initialization_and_destruction_0v+0x1ac>)
 8003f32:	9305      	str	r3, [sp, #20]
 8003f34:	4b25      	ldr	r3, [pc, #148]	@ (8003fcc <_Z41__static_initialization_and_destruction_0v+0x164>)
 8003f36:	9304      	str	r3, [sp, #16]
 8003f38:	4b37      	ldr	r3, [pc, #220]	@ (8004018 <_Z41__static_initialization_and_destruction_0v+0x1b0>)
 8003f3a:	9303      	str	r3, [sp, #12]
 8003f3c:	2304      	movs	r3, #4
 8003f3e:	9302      	str	r3, [sp, #8]
 8003f40:	4b36      	ldr	r3, [pc, #216]	@ (800401c <_Z41__static_initialization_and_destruction_0v+0x1b4>)
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff8 <_Z41__static_initialization_and_destruction_0v+0x190>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	4934      	ldr	r1, [pc, #208]	@ (8004020 <_Z41__static_initialization_and_destruction_0v+0x1b8>)
 8003f50:	4834      	ldr	r0, [pc, #208]	@ (8004024 <_Z41__static_initialization_and_destruction_0v+0x1bc>)
 8003f52:	f000 f88f 	bl	8004074 <_ZN5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_tS1_P17ADC_HandleTypeDefmP17DAC_HandleTypeDefm>
							    ,2.0,0.0,0.01,0.001);
 8003f56:	23e1      	movs	r3, #225	@ 0xe1
 8003f58:	9307      	str	r3, [sp, #28]
 8003f5a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8003f5e:	9306      	str	r3, [sp, #24]
 8003f60:	4b30      	ldr	r3, [pc, #192]	@ (8004024 <_Z41__static_initialization_and_destruction_0v+0x1bc>)
 8003f62:	9305      	str	r3, [sp, #20]
 8003f64:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8003f68:	9304      	str	r3, [sp, #16]
 8003f6a:	4b28      	ldr	r3, [pc, #160]	@ (800400c <_Z41__static_initialization_and_destruction_0v+0x1a4>)
 8003f6c:	9303      	str	r3, [sp, #12]
 8003f6e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003f72:	9302      	str	r3, [sp, #8]
 8003f74:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8003f78:	9301      	str	r3, [sp, #4]
 8003f7a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	eddf 1a29 	vldr	s3, [pc, #164]	@ 8004028 <_Z41__static_initialization_and_destruction_0v+0x1c0>
 8003f84:	ed9f 1a29 	vldr	s2, [pc, #164]	@ 800402c <_Z41__static_initialization_and_destruction_0v+0x1c4>
 8003f88:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8004030 <_Z41__static_initialization_and_destruction_0v+0x1c8>
 8003f8c:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8003f90:	4b1a      	ldr	r3, [pc, #104]	@ (8003ffc <_Z41__static_initialization_and_destruction_0v+0x194>)
 8003f92:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003f96:	4914      	ldr	r1, [pc, #80]	@ (8003fe8 <_Z41__static_initialization_and_destruction_0v+0x180>)
 8003f98:	4826      	ldr	r0, [pc, #152]	@ (8004034 <_Z41__static_initialization_and_destruction_0v+0x1cc>)
 8003f9a:	f7fc ff97 	bl	8000ecc <_ZN11Finger_TASKC1EP5MotorlS1_lllS1_lS1_llffff>
std::string buffer; /**< @brief UART entire entered message buffer*/
 8003f9e:	4826      	ldr	r0, [pc, #152]	@ (8004038 <_Z41__static_initialization_and_destruction_0v+0x1d0>)
 8003fa0:	f007 fdf8 	bl	800bb94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003fa4:	463b      	mov	r3, r7
 8003fa6:	607b      	str	r3, [r7, #4]
		                   "\n\r\n\r";
 8003fa8:	463b      	mov	r3, r7
 8003faa:	461a      	mov	r2, r3
 8003fac:	4923      	ldr	r1, [pc, #140]	@ (800403c <_Z41__static_initialization_and_destruction_0v+0x1d4>)
 8003fae:	4824      	ldr	r0, [pc, #144]	@ (8004040 <_Z41__static_initialization_and_destruction_0v+0x1d8>)
 8003fb0:	f007 fec6 	bl	800bd40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8003fb4:	463b      	mov	r3, r7
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff ff4a 	bl	8003e50 <_ZNSt15__new_allocatorIcED1Ev>
}
 8003fbc:	bf00      	nop
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20000114 	.word	0x20000114
 8003fc8:	10c00010 	.word	0x10c00010
 8003fcc:	200000a8 	.word	0x200000a8
 8003fd0:	2000027c 	.word	0x2000027c
 8003fd4:	48000400 	.word	0x48000400
 8003fd8:	20000230 	.word	0x20000230
 8003fdc:	20000524 	.word	0x20000524
 8003fe0:	14f00020 	.word	0x14f00020
 8003fe4:	200002c8 	.word	0x200002c8
 8003fe8:	2000056c 	.word	0x2000056c
 8003fec:	20000128 	.word	0x20000128
 8003ff0:	19200040 	.word	0x19200040
 8003ff4:	20000314 	.word	0x20000314
 8003ff8:	48000800 	.word	0x48000800
 8003ffc:	200005b4 	.word	0x200005b4
 8004000:	2000013c 	.word	0x2000013c
 8004004:	1d500080 	.word	0x1d500080
 8004008:	20000360 	.word	0x20000360
 800400c:	200005fc 	.word	0x200005fc
 8004010:	20000150 	.word	0x20000150
 8004014:	21800100 	.word	0x21800100
 8004018:	200003f8 	.word	0x200003f8
 800401c:	48000c00 	.word	0x48000c00
 8004020:	20000444 	.word	0x20000444
 8004024:	20000644 	.word	0x20000644
 8004028:	3a83126f 	.word	0x3a83126f
 800402c:	3c23d70a 	.word	0x3c23d70a
 8004030:	00000000 	.word	0x00000000
 8004034:	2000068c 	.word	0x2000068c
 8004038:	200007f8 	.word	0x200007f8
 800403c:	0800d4b8 	.word	0x0800d4b8
 8004040:	2000087c 	.word	0x2000087c

08004044 <_Z41__static_initialization_and_destruction_1v>:
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
std::string command_list = "\n\rCommands:"
 8004048:	4803      	ldr	r0, [pc, #12]	@ (8004058 <_Z41__static_initialization_and_destruction_1v+0x14>)
 800404a:	f007 fdaa 	bl	800bba2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
std::string buffer; /**< @brief UART entire entered message buffer*/
 800404e:	4803      	ldr	r0, [pc, #12]	@ (800405c <_Z41__static_initialization_and_destruction_1v+0x18>)
 8004050:	f007 fda7 	bl	800bba2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8004054:	bf00      	nop
 8004056:	bd80      	pop	{r7, pc}
 8004058:	2000087c 	.word	0x2000087c
 800405c:	200007f8 	.word	0x200007f8

08004060 <_GLOBAL__sub_I_hadc1>:
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
 8004064:	f7ff ff00 	bl	8003e68 <_Z41__static_initialization_and_destruction_0v>
 8004068:	bd80      	pop	{r7, pc}

0800406a <_GLOBAL__sub_D_hadc1>:
 800406a:	b580      	push	{r7, lr}
 800406c:	af00      	add	r7, sp, #0
 800406e:	f7ff ffe9 	bl	8004044 <_Z41__static_initialization_and_destruction_1v>
 8004072:	bd80      	pop	{r7, pc}

08004074 <_ZN5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_tS1_P17ADC_HandleTypeDefmP17DAC_HandleTypeDefm>:
 * @param DAC_Channel The selected DAC channel
 *         This parameter can be one of the following values:
 *           @arg DAC_CHANNEL_1: DAC Channel1 selected
 *           @arg DAC_CHANNEL_2: DAC Channel2 selected
 */
Motor::Motor(TIM_HandleTypeDef *htim_PWM
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
,_PH_Pin(PH_Pin)
,_htim_ENC(htim_ENC)
,_hadc(hadc)
,_ADC_Channel(ADC_Channel)
,_hdac(hdac)
,_DAC_Channel(DAC_Channel)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	605a      	str	r2, [r3, #4]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	609a      	str	r2, [r3, #8]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	819a      	strh	r2, [r3, #12]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80040a0:	81da      	strh	r2, [r3, #14]
:_htim_PWM(htim_PWM)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	611a      	str	r2, [r3, #16]
,_PWM_Channel(PWM_Channel)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	615a      	str	r2, [r3, #20]
,_NSLEEP_GPIO_Port(NSLEEP_GPIO_Port)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	619a      	str	r2, [r3, #24]
,_NSLEEP_Pin(NSLEEP_Pin)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8b3a      	ldrh	r2, [r7, #24]
 80040b8:	839a      	strh	r2, [r3, #28]
,_PH_GPIO_Port(PH_GPIO_Port)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	621a      	str	r2, [r3, #32]
,_PH_Pin(PH_Pin)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8c3a      	ldrh	r2, [r7, #32]
 80040c4:	849a      	strh	r2, [r3, #36]	@ 0x24
,_htim_ENC(htim_ENC)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ca:	629a      	str	r2, [r3, #40]	@ 0x28
,_hadc(hadc)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040d0:	62da      	str	r2, [r3, #44]	@ 0x2c
,_ADC_Channel(ADC_Channel)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040d6:	631a      	str	r2, [r3, #48]	@ 0x30
,_hdac(hdac)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040dc:	635a      	str	r2, [r3, #52]	@ 0x34
,_DAC_Channel(DAC_Channel)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	645a      	str	r2, [r3, #68]	@ 0x44
{}
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4618      	mov	r0, r3
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <_ZN5Motor5startEv>:

/**
 * @brief Start motor and associated peripherals
 */
void Motor::start(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
	disable(); // Disable Motor
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f83c 	bl	800418a <_ZN5Motor7disableEv>
	HAL_TIM_PWM_Start(_htim_PWM,_PWM_Channel); // Start PWM Timer
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	4619      	mov	r1, r3
 800411c:	4610      	mov	r0, r2
 800411e:	f004 fad9 	bl	80086d4 <HAL_TIM_PWM_Start>
	set_effort(0); // Set motor effort to 0
 8004122:	2100      	movs	r1, #0
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f83f 	bl	80041a8 <_ZN5Motor10set_effortEl>
	HAL_TIM_Encoder_Start(_htim_ENC, TIM_CHANNEL_ALL); // Start Encoder Timer
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412e:	213c      	movs	r1, #60	@ 0x3c
 8004130:	4618      	mov	r0, r3
 8004132:	f004 fc87 	bl	8008a44 <HAL_TIM_Encoder_Start>
	HAL_DAC_Start(_hdac,_DAC_Channel); // Start DAC
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413e:	4619      	mov	r1, r3
 8004140:	4610      	mov	r0, r2
 8004142:	f002 fa95 	bl	8006670 <HAL_DAC_Start>
	HAL_DAC_SetValue(_hdac,_DAC_Channel,DAC_ALIGN_12B_R,current_lim); // Set current limit to max
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	89db      	ldrh	r3, [r3, #14]
 8004152:	2200      	movs	r2, #0
 8004154:	f002 faf8 	bl	8006748 <HAL_DAC_SetValue>
	HAL_ADCEx_Calibration_Start(_hadc,ADC_SINGLE_ENDED); // Calibrate ADC
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415c:	217f      	movs	r1, #127	@ 0x7f
 800415e:	4618      	mov	r0, r3
 8004160:	f001 ffea 	bl	8006138 <HAL_ADCEx_Calibration_Start>
}
 8004164:	bf00      	nop
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <_ZN5Motor6enableEv>:

/**
 * @brief Enable the motor
 */
void Motor::enable(void)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	_NSLEEP_GPIO_Port->BSRR = _NSLEEP_Pin; // Set NSLEEP Pin
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	8b9a      	ldrh	r2, [r3, #28]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	619a      	str	r2, [r3, #24]
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <_ZN5Motor7disableEv>:

/**
 * @brief Disable the motor
 */
void Motor::disable(void)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
	_NSLEEP_GPIO_Port->BRR = _NSLEEP_Pin; // Reset NSLEEP Pin
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	8b9a      	ldrh	r2, [r3, #28]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <_ZN5Motor10set_effortEl>:
/**
 * @brief Set motor effort between -100 and 100
 * @param duty Desired duty cycle of the motor
 */
void Motor::set_effort(int32_t duty)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
	effort = std::max(int32_t(-100), std::min(int32_t(100), duty)); // Constrain -100 < effort < 100
 80041b2:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80041b6:	60bb      	str	r3, [r7, #8]
 80041b8:	2364      	movs	r3, #100	@ 0x64
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	463a      	mov	r2, r7
 80041be:	f107 030c 	add.w	r3, r7, #12
 80041c2:	4611      	mov	r1, r2
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fc fe4b 	bl	8000e60 <_ZSt3minIlERKT_S2_S2_>
 80041ca:	4602      	mov	r2, r0
 80041cc:	f107 0308 	add.w	r3, r7, #8
 80041d0:	4611      	mov	r1, r2
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fc fe58 	bl	8000e88 <_ZSt3maxIlERKT_S2_S2_>
 80041d8:	4603      	mov	r3, r0
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	b25a      	sxtb	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	701a      	strb	r2, [r3, #0]
	uint16_t AR = __HAL_TIM_GET_AUTORELOAD(_htim_PWM); // Retrieve AR for PWM
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ea:	82fb      	strh	r3, [r7, #22]
	int compare = abs((int8_t(effort)*AR)/100); // Convert duty cycle to compare value
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f993 3000 	ldrsb.w	r3, [r3]
 80041f2:	461a      	mov	r2, r3
 80041f4:	8afb      	ldrh	r3, [r7, #22]
 80041f6:	fb02 f303 	mul.w	r3, r2, r3
 80041fa:	4a2a      	ldr	r2, [pc, #168]	@ (80042a4 <_ZN5Motor10set_effortEl+0xfc>)
 80041fc:	fb82 1203 	smull	r1, r2, r2, r3
 8004200:	1152      	asrs	r2, r2, #5
 8004202:	17db      	asrs	r3, r3, #31
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	bfb8      	it	lt
 800420a:	425b      	neglt	r3, r3
 800420c:	613b      	str	r3, [r7, #16]

	if (effort > 0)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f993 3000 	ldrsb.w	r3, [r3]
 8004214:	2b00      	cmp	r3, #0
 8004216:	dd05      	ble.n	8004224 <_ZN5Motor10set_effortEl+0x7c>
	{
		_PH_GPIO_Port->BSRR = _PH_Pin; // Set PH Pin
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	619a      	str	r2, [r3, #24]
 8004222:	e004      	b.n	800422e <_ZN5Motor10set_effortEl+0x86>
	}
	else
	{
		_PH_GPIO_Port->BRR = _PH_Pin; // Reset PH Pin
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	629a      	str	r2, [r3, #40]	@ 0x28
	}

	__HAL_TIM_SET_COMPARE(_htim_PWM,_PWM_Channel,compare); // Change compare value
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d105      	bne.n	8004242 <_ZN5Motor10set_effortEl+0x9a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004240:	e02c      	b.n	800429c <_ZN5Motor10set_effortEl+0xf4>
	__HAL_TIM_SET_COMPARE(_htim_PWM,_PWM_Channel,compare); // Change compare value
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	2b04      	cmp	r3, #4
 8004248:	d105      	bne.n	8004256 <_ZN5Motor10set_effortEl+0xae>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8004254:	e022      	b.n	800429c <_ZN5Motor10set_effortEl+0xf4>
	__HAL_TIM_SET_COMPARE(_htim_PWM,_PWM_Channel,compare); // Change compare value
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	2b08      	cmp	r3, #8
 800425c:	d105      	bne.n	800426a <_ZN5Motor10set_effortEl+0xc2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004268:	e018      	b.n	800429c <_ZN5Motor10set_effortEl+0xf4>
	__HAL_TIM_SET_COMPARE(_htim_PWM,_PWM_Channel,compare); // Change compare value
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	2b0c      	cmp	r3, #12
 8004270:	d105      	bne.n	800427e <_ZN5Motor10set_effortEl+0xd6>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800427c:	e00e      	b.n	800429c <_ZN5Motor10set_effortEl+0xf4>
	__HAL_TIM_SET_COMPARE(_htim_PWM,_PWM_Channel,compare); // Change compare value
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	2b10      	cmp	r3, #16
 8004284:	d105      	bne.n	8004292 <_ZN5Motor10set_effortEl+0xea>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8004290:	e004      	b.n	800429c <_ZN5Motor10set_effortEl+0xf4>
	__HAL_TIM_SET_COMPARE(_htim_PWM,_PWM_Channel,compare); // Change compare value
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800429c:	bf00      	nop
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	51eb851f 	.word	0x51eb851f

080042a8 <_ZN5Motor10update_encEv>:

/**
 * @brief Update encoder count and check for counter reload
 */
void Motor::update_enc(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	uint16_t count = (_htim_ENC)->Instance->CNT; // Get the current encoder count
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b8:	81fb      	strh	r3, [r7, #14]
	_delta = count - _prev_cnt; // Calculate the change in count
 80042ba:	89fb      	ldrh	r3, [r7, #14]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	8f92      	ldrh	r2, [r2, #60]	@ 0x3c
 80042c0:	1a9a      	subs	r2, r3, r2
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	641a      	str	r2, [r3, #64]	@ 0x40
	uint16_t time = micros(); // Get the current time
 80042c6:	f7ff fd57 	bl	8003d78 <_Z6microsv>
 80042ca:	4603      	mov	r3, r0
 80042cc:	81bb      	strh	r3, [r7, #12]
	_dt = time_diff(_prev_time,time); // Calculate the change in time
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042d2:	89ba      	ldrh	r2, [r7, #12]
 80042d4:	4611      	mov	r1, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff fd5c 	bl	8003d94 <_Z9time_difftt>
 80042dc:	4603      	mov	r3, r0
 80042de:	461a      	mov	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	645a      	str	r2, [r3, #68]	@ 0x44

	uint16_t AR = __HAL_TIM_GET_AUTORELOAD(_htim_ENC); // Retrieve AR for ENC
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ec:	817b      	strh	r3, [r7, #10]

	if (abs(_delta) > (AR + 1)/2) // Account for overflow
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80042f6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80042fa:	897b      	ldrh	r3, [r7, #10]
 80042fc:	3301      	adds	r3, #1
 80042fe:	0fd9      	lsrs	r1, r3, #31
 8004300:	440b      	add	r3, r1
 8004302:	105b      	asrs	r3, r3, #1
 8004304:	429a      	cmp	r2, r3
 8004306:	dd12      	ble.n	800432e <_ZN5Motor10update_encEv+0x86>
	{
		if (_delta > 0)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430c:	2b00      	cmp	r3, #0
 800430e:	dd07      	ble.n	8004320 <_ZN5Motor10update_encEv+0x78>
		{
			_delta -= (AR + 1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004314:	897b      	ldrh	r3, [r7, #10]
 8004316:	3301      	adds	r3, #1
 8004318:	1ad2      	subs	r2, r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	641a      	str	r2, [r3, #64]	@ 0x40
 800431e:	e006      	b.n	800432e <_ZN5Motor10update_encEv+0x86>
		}
		else
		{
			_delta += (AR + 1);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004324:	897b      	ldrh	r3, [r7, #10]
 8004326:	3301      	adds	r3, #1
 8004328:	441a      	add	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	641a      	str	r2, [r3, #64]	@ 0x40
		}
	}

	// Update Position and Velocity
	position += _delta;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004336:	441a      	add	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	605a      	str	r2, [r3, #4]
	velocity = (_delta*1000000)/_dt;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004340:	4a09      	ldr	r2, [pc, #36]	@ (8004368 <_ZN5Motor10update_encEv+0xc0>)
 8004342:	fb03 f202 	mul.w	r2, r3, r2
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434a:	fb92 f2f3 	sdiv	r2, r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	609a      	str	r2, [r3, #8]

	// Update the previous values to be the most recent values
	_prev_cnt = count;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	89fa      	ldrh	r2, [r7, #14]
 8004356:	879a      	strh	r2, [r3, #60]	@ 0x3c
	_prev_time = time;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	89ba      	ldrh	r2, [r7, #12]
 800435c:	87da      	strh	r2, [r3, #62]	@ 0x3e
}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	000f4240 	.word	0x000f4240

0800436c <_ZN5Motor8set_zeroEv>:

/**
 * @brief Update encoder and set current position to zero
 */
void Motor::set_zero(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
	update_enc(); // Update encoder
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff ff97 	bl	80042a8 <_ZN5Motor10update_encEv>
	position = 0; // Reset position to 0
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	605a      	str	r2, [r3, #4]
}
 8004380:	bf00      	nop
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <_ZN5Motor11set_currentEt>:
/**
 * @brief Set the Current Limit using DAC
 * @param current Desired current limit as a 12-bit Right-Aligned number
 */
void Motor::set_current(uint16_t current)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	807b      	strh	r3, [r7, #2]
	current_lim = std::max(uint16_t(0), std::min(uint16_t(4095), current)); // Constrain 0 < current_lim < 4095
 8004394:	2300      	movs	r3, #0
 8004396:	81bb      	strh	r3, [r7, #12]
 8004398:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800439c:	81fb      	strh	r3, [r7, #14]
 800439e:	1cba      	adds	r2, r7, #2
 80043a0:	f107 030e 	add.w	r3, r7, #14
 80043a4:	4611      	mov	r1, r2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 f818 	bl	80043dc <_ZSt3minItERKT_S2_S2_>
 80043ac:	4602      	mov	r2, r0
 80043ae:	f107 030c 	add.w	r3, r7, #12
 80043b2:	4611      	mov	r1, r2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 f825 	bl	8004404 <_ZSt3maxItERKT_S2_S2_>
 80043ba:	4603      	mov	r3, r0
 80043bc:	881a      	ldrh	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	81da      	strh	r2, [r3, #14]
	HAL_DAC_SetValue(_hdac,_DAC_Channel,DAC_ALIGN_12B_R,current_lim); // Set DAC Value
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	89db      	ldrh	r3, [r3, #14]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f002 f9ba 	bl	8006748 <HAL_DAC_SetValue>
}
 80043d4:	bf00      	nop
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <_ZSt3minItERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	881a      	ldrh	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d201      	bcs.n	80043f6 <_ZSt3minItERKT_S2_S2_+0x1a>
	return __b;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	e000      	b.n	80043f8 <_ZSt3minItERKT_S2_S2_+0x1c>
      return __a;
 80043f6:	687b      	ldr	r3, [r7, #4]
    }
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <_ZSt3maxItERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	881a      	ldrh	r2, [r3, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d201      	bcs.n	800441e <_ZSt3maxItERKT_S2_S2_+0x1a>
	return __b;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	e000      	b.n	8004420 <_ZSt3maxItERKT_S2_S2_+0x1c>
      return __a;
 800441e:	687b      	ldr	r3, [r7, #4]
    }
 8004420:	4618      	mov	r0, r3
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004432:	4b0f      	ldr	r3, [pc, #60]	@ (8004470 <HAL_MspInit+0x44>)
 8004434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004436:	4a0e      	ldr	r2, [pc, #56]	@ (8004470 <HAL_MspInit+0x44>)
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	6613      	str	r3, [r2, #96]	@ 0x60
 800443e:	4b0c      	ldr	r3, [pc, #48]	@ (8004470 <HAL_MspInit+0x44>)
 8004440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	607b      	str	r3, [r7, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800444a:	4b09      	ldr	r3, [pc, #36]	@ (8004470 <HAL_MspInit+0x44>)
 800444c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800444e:	4a08      	ldr	r2, [pc, #32]	@ (8004470 <HAL_MspInit+0x44>)
 8004450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004454:	6593      	str	r3, [r2, #88]	@ 0x58
 8004456:	4b06      	ldr	r3, [pc, #24]	@ (8004470 <HAL_MspInit+0x44>)
 8004458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800445a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004462:	f003 f88b 	bl	800757c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40021000 	.word	0x40021000

08004474 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b0a0      	sub	sp, #128	@ 0x80
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800447c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	605a      	str	r2, [r3, #4]
 8004486:	609a      	str	r2, [r3, #8]
 8004488:	60da      	str	r2, [r3, #12]
 800448a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800448c:	f107 0318 	add.w	r3, r7, #24
 8004490:	2254      	movs	r2, #84	@ 0x54
 8004492:	2100      	movs	r1, #0
 8004494:	4618      	mov	r0, r3
 8004496:	f007 fdd3 	bl	800c040 <memset>
  if(hadc->Instance==ADC1)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044a2:	d165      	bne.n	8004570 <HAL_ADC_MspInit+0xfc>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80044a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80044aa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80044ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044b0:	f107 0318 	add.w	r3, r7, #24
 80044b4:	4618      	mov	r0, r3
 80044b6:	f003 fd9f 	bl	8007ff8 <HAL_RCCEx_PeriphCLKConfig>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80044c0:	f7ff fc9a 	bl	8003df8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80044c4:	4b2c      	ldr	r3, [pc, #176]	@ (8004578 <HAL_ADC_MspInit+0x104>)
 80044c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004578 <HAL_ADC_MspInit+0x104>)
 80044ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80044ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044d0:	4b29      	ldr	r3, [pc, #164]	@ (8004578 <HAL_ADC_MspInit+0x104>)
 80044d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044dc:	4b26      	ldr	r3, [pc, #152]	@ (8004578 <HAL_ADC_MspInit+0x104>)
 80044de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044e0:	4a25      	ldr	r2, [pc, #148]	@ (8004578 <HAL_ADC_MspInit+0x104>)
 80044e2:	f043 0304 	orr.w	r3, r3, #4
 80044e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044e8:	4b23      	ldr	r3, [pc, #140]	@ (8004578 <HAL_ADC_MspInit+0x104>)
 80044ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044f4:	4b20      	ldr	r3, [pc, #128]	@ (8004578 <HAL_ADC_MspInit+0x104>)
 80044f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004578 <HAL_ADC_MspInit+0x104>)
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004500:	4b1d      	ldr	r3, [pc, #116]	@ (8004578 <HAL_ADC_MspInit+0x104>)
 8004502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800450c:	4b1a      	ldr	r3, [pc, #104]	@ (8004578 <HAL_ADC_MspInit+0x104>)
 800450e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004510:	4a19      	ldr	r2, [pc, #100]	@ (8004578 <HAL_ADC_MspInit+0x104>)
 8004512:	f043 0302 	orr.w	r3, r3, #2
 8004516:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004518:	4b17      	ldr	r3, [pc, #92]	@ (8004578 <HAL_ADC_MspInit+0x104>)
 800451a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN8
    PA3     ------> ADC1_IN4
    PB11     ------> ADC1_IN14
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8004524:	2307      	movs	r3, #7
 8004526:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004528:	2303      	movs	r3, #3
 800452a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452c:	2300      	movs	r3, #0
 800452e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004530:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004534:	4619      	mov	r1, r3
 8004536:	4811      	ldr	r0, [pc, #68]	@ (800457c <HAL_ADC_MspInit+0x108>)
 8004538:	f002 fbae 	bl	8006c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800453c:	2308      	movs	r3, #8
 800453e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004540:	2303      	movs	r3, #3
 8004542:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004544:	2300      	movs	r3, #0
 8004546:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004548:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800454c:	4619      	mov	r1, r3
 800454e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004552:	f002 fba1 	bl	8006c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14;
 8004556:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800455a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800455c:	2303      	movs	r3, #3
 800455e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004560:	2300      	movs	r3, #0
 8004562:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004564:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004568:	4619      	mov	r1, r3
 800456a:	4805      	ldr	r0, [pc, #20]	@ (8004580 <HAL_ADC_MspInit+0x10c>)
 800456c:	f002 fb94 	bl	8006c98 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004570:	bf00      	nop
 8004572:	3780      	adds	r7, #128	@ 0x80
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40021000 	.word	0x40021000
 800457c:	48000800 	.word	0x48000800
 8004580:	48000400 	.word	0x48000400

08004584 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08e      	sub	sp, #56	@ 0x38
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800458c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	605a      	str	r2, [r3, #4]
 8004596:	609a      	str	r2, [r3, #8]
 8004598:	60da      	str	r2, [r3, #12]
 800459a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a3d      	ldr	r2, [pc, #244]	@ (8004698 <HAL_DAC_MspInit+0x114>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d125      	bne.n	80045f2 <HAL_DAC_MspInit+0x6e>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80045a6:	4b3d      	ldr	r3, [pc, #244]	@ (800469c <HAL_DAC_MspInit+0x118>)
 80045a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045aa:	4a3c      	ldr	r2, [pc, #240]	@ (800469c <HAL_DAC_MspInit+0x118>)
 80045ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045b2:	4b3a      	ldr	r3, [pc, #232]	@ (800469c <HAL_DAC_MspInit+0x118>)
 80045b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045ba:	623b      	str	r3, [r7, #32]
 80045bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045be:	4b37      	ldr	r3, [pc, #220]	@ (800469c <HAL_DAC_MspInit+0x118>)
 80045c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045c2:	4a36      	ldr	r2, [pc, #216]	@ (800469c <HAL_DAC_MspInit+0x118>)
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045ca:	4b34      	ldr	r3, [pc, #208]	@ (800469c <HAL_DAC_MspInit+0x118>)
 80045cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	61fb      	str	r3, [r7, #28]
 80045d4:	69fb      	ldr	r3, [r7, #28]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80045d6:	2330      	movs	r3, #48	@ 0x30
 80045d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045da:	2303      	movs	r3, #3
 80045dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045de:	2300      	movs	r3, #0
 80045e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045e6:	4619      	mov	r1, r3
 80045e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80045ec:	f002 fb54 	bl	8006c98 <HAL_GPIO_Init>
    /* USER CODE BEGIN DAC4_MspInit 1 */

    /* USER CODE END DAC4_MspInit 1 */
  }

}
 80045f0:	e04d      	b.n	800468e <HAL_DAC_MspInit+0x10a>
  else if(hdac->Instance==DAC2)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a2a      	ldr	r2, [pc, #168]	@ (80046a0 <HAL_DAC_MspInit+0x11c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d125      	bne.n	8004648 <HAL_DAC_MspInit+0xc4>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80045fc:	4b27      	ldr	r3, [pc, #156]	@ (800469c <HAL_DAC_MspInit+0x118>)
 80045fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004600:	4a26      	ldr	r2, [pc, #152]	@ (800469c <HAL_DAC_MspInit+0x118>)
 8004602:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004606:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004608:	4b24      	ldr	r3, [pc, #144]	@ (800469c <HAL_DAC_MspInit+0x118>)
 800460a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800460c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004610:	61bb      	str	r3, [r7, #24]
 8004612:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004614:	4b21      	ldr	r3, [pc, #132]	@ (800469c <HAL_DAC_MspInit+0x118>)
 8004616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004618:	4a20      	ldr	r2, [pc, #128]	@ (800469c <HAL_DAC_MspInit+0x118>)
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004620:	4b1e      	ldr	r3, [pc, #120]	@ (800469c <HAL_DAC_MspInit+0x118>)
 8004622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800462c:	2340      	movs	r3, #64	@ 0x40
 800462e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004630:	2303      	movs	r3, #3
 8004632:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004634:	2300      	movs	r3, #0
 8004636:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004638:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800463c:	4619      	mov	r1, r3
 800463e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004642:	f002 fb29 	bl	8006c98 <HAL_GPIO_Init>
}
 8004646:	e022      	b.n	800468e <HAL_DAC_MspInit+0x10a>
  else if(hdac->Instance==DAC3)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a15      	ldr	r2, [pc, #84]	@ (80046a4 <HAL_DAC_MspInit+0x120>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d10c      	bne.n	800466c <HAL_DAC_MspInit+0xe8>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8004652:	4b12      	ldr	r3, [pc, #72]	@ (800469c <HAL_DAC_MspInit+0x118>)
 8004654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004656:	4a11      	ldr	r2, [pc, #68]	@ (800469c <HAL_DAC_MspInit+0x118>)
 8004658:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800465c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800465e:	4b0f      	ldr	r3, [pc, #60]	@ (800469c <HAL_DAC_MspInit+0x118>)
 8004660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004662:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004666:	613b      	str	r3, [r7, #16]
 8004668:	693b      	ldr	r3, [r7, #16]
}
 800466a:	e010      	b.n	800468e <HAL_DAC_MspInit+0x10a>
  else if(hdac->Instance==DAC4)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a0d      	ldr	r2, [pc, #52]	@ (80046a8 <HAL_DAC_MspInit+0x124>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d10b      	bne.n	800468e <HAL_DAC_MspInit+0x10a>
    __HAL_RCC_DAC4_CLK_ENABLE();
 8004676:	4b09      	ldr	r3, [pc, #36]	@ (800469c <HAL_DAC_MspInit+0x118>)
 8004678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800467a:	4a08      	ldr	r2, [pc, #32]	@ (800469c <HAL_DAC_MspInit+0x118>)
 800467c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004680:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004682:	4b06      	ldr	r3, [pc, #24]	@ (800469c <HAL_DAC_MspInit+0x118>)
 8004684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004686:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]
}
 800468e:	bf00      	nop
 8004690:	3738      	adds	r7, #56	@ 0x38
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	50000800 	.word	0x50000800
 800469c:	40021000 	.word	0x40021000
 80046a0:	50000c00 	.word	0x50000c00
 80046a4:	50001000 	.word	0x50001000
 80046a8:	50001400 	.word	0x50001400

080046ac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b09e      	sub	sp, #120	@ 0x78
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	605a      	str	r2, [r3, #4]
 80046be:	609a      	str	r2, [r3, #8]
 80046c0:	60da      	str	r2, [r3, #12]
 80046c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80046c4:	f107 0310 	add.w	r3, r7, #16
 80046c8:	2254      	movs	r2, #84	@ 0x54
 80046ca:	2100      	movs	r1, #0
 80046cc:	4618      	mov	r0, r3
 80046ce:	f007 fcb7 	bl	800c040 <memset>
  if(hi2c->Instance==I2C3)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004754 <HAL_I2C_MspInit+0xa8>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d137      	bne.n	800474c <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80046dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80046e0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80046e2:	2300      	movs	r3, #0
 80046e4:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046e6:	f107 0310 	add.w	r3, r7, #16
 80046ea:	4618      	mov	r0, r3
 80046ec:	f003 fc84 	bl	8007ff8 <HAL_RCCEx_PeriphCLKConfig>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80046f6:	f7ff fb7f 	bl	8003df8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046fa:	4b17      	ldr	r3, [pc, #92]	@ (8004758 <HAL_I2C_MspInit+0xac>)
 80046fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046fe:	4a16      	ldr	r2, [pc, #88]	@ (8004758 <HAL_I2C_MspInit+0xac>)
 8004700:	f043 0304 	orr.w	r3, r3, #4
 8004704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004706:	4b14      	ldr	r3, [pc, #80]	@ (8004758 <HAL_I2C_MspInit+0xac>)
 8004708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004712:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004716:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004718:	2312      	movs	r3, #18
 800471a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471c:	2300      	movs	r3, #0
 800471e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004720:	2300      	movs	r3, #0
 8004722:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8004724:	2308      	movs	r3, #8
 8004726:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004728:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800472c:	4619      	mov	r1, r3
 800472e:	480b      	ldr	r0, [pc, #44]	@ (800475c <HAL_I2C_MspInit+0xb0>)
 8004730:	f002 fab2 	bl	8006c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004734:	4b08      	ldr	r3, [pc, #32]	@ (8004758 <HAL_I2C_MspInit+0xac>)
 8004736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004738:	4a07      	ldr	r2, [pc, #28]	@ (8004758 <HAL_I2C_MspInit+0xac>)
 800473a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800473e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004740:	4b05      	ldr	r3, [pc, #20]	@ (8004758 <HAL_I2C_MspInit+0xac>)
 8004742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004744:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 800474c:	bf00      	nop
 800474e:	3778      	adds	r7, #120	@ 0x78
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40007800 	.word	0x40007800
 8004758:	40021000 	.word	0x40021000
 800475c:	48000800 	.word	0x48000800

08004760 <HAL_OPAMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hopamp: OPAMP handle pointer
  * @retval None
  */
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08a      	sub	sp, #40	@ 0x28
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004768:	f107 0314 	add.w	r3, r7, #20
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	605a      	str	r2, [r3, #4]
 8004772:	609a      	str	r2, [r3, #8]
 8004774:	60da      	str	r2, [r3, #12]
 8004776:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1f      	ldr	r2, [pc, #124]	@ (80047fc <HAL_OPAMP_MspInit+0x9c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d119      	bne.n	80047b6 <HAL_OPAMP_MspInit+0x56>
  {
    /* USER CODE BEGIN OPAMP1_MspInit 0 */

    /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004782:	4b1f      	ldr	r3, [pc, #124]	@ (8004800 <HAL_OPAMP_MspInit+0xa0>)
 8004784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004786:	4a1e      	ldr	r2, [pc, #120]	@ (8004800 <HAL_OPAMP_MspInit+0xa0>)
 8004788:	f043 0301 	orr.w	r3, r3, #1
 800478c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800478e:	4b1c      	ldr	r3, [pc, #112]	@ (8004800 <HAL_OPAMP_MspInit+0xa0>)
 8004790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800479a:	2304      	movs	r3, #4
 800479c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800479e:	2303      	movs	r3, #3
 80047a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a6:	f107 0314 	add.w	r3, r7, #20
 80047aa:	4619      	mov	r1, r3
 80047ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80047b0:	f002 fa72 	bl	8006c98 <HAL_GPIO_Init>
    /* USER CODE BEGIN OPAMP4_MspInit 1 */

    /* USER CODE END OPAMP4_MspInit 1 */
  }

}
 80047b4:	e01d      	b.n	80047f2 <HAL_OPAMP_MspInit+0x92>
  else if(hopamp->Instance==OPAMP4)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a12      	ldr	r2, [pc, #72]	@ (8004804 <HAL_OPAMP_MspInit+0xa4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d118      	bne.n	80047f2 <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004800 <HAL_OPAMP_MspInit+0xa0>)
 80047c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047c4:	4a0e      	ldr	r2, [pc, #56]	@ (8004800 <HAL_OPAMP_MspInit+0xa0>)
 80047c6:	f043 0302 	orr.w	r3, r3, #2
 80047ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004800 <HAL_OPAMP_MspInit+0xa0>)
 80047ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80047d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80047dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047de:	2303      	movs	r3, #3
 80047e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e2:	2300      	movs	r3, #0
 80047e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047e6:	f107 0314 	add.w	r3, r7, #20
 80047ea:	4619      	mov	r1, r3
 80047ec:	4806      	ldr	r0, [pc, #24]	@ (8004808 <HAL_OPAMP_MspInit+0xa8>)
 80047ee:	f002 fa53 	bl	8006c98 <HAL_GPIO_Init>
}
 80047f2:	bf00      	nop
 80047f4:	3728      	adds	r7, #40	@ 0x28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40010300 	.word	0x40010300
 8004800:	40021000 	.word	0x40021000
 8004804:	4001030c 	.word	0x4001030c
 8004808:	48000400 	.word	0x48000400

0800480c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a0a      	ldr	r2, [pc, #40]	@ (8004844 <HAL_TIM_PWM_MspInit+0x38>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d10b      	bne.n	8004836 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800481e:	4b0a      	ldr	r3, [pc, #40]	@ (8004848 <HAL_TIM_PWM_MspInit+0x3c>)
 8004820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004822:	4a09      	ldr	r2, [pc, #36]	@ (8004848 <HAL_TIM_PWM_MspInit+0x3c>)
 8004824:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004828:	6613      	str	r3, [r2, #96]	@ 0x60
 800482a:	4b07      	ldr	r3, [pc, #28]	@ (8004848 <HAL_TIM_PWM_MspInit+0x3c>)
 800482c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8004836:	bf00      	nop
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40012c00 	.word	0x40012c00
 8004848:	40021000 	.word	0x40021000

0800484c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b094      	sub	sp, #80	@ 0x50
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004854:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	605a      	str	r2, [r3, #4]
 800485e:	609a      	str	r2, [r3, #8]
 8004860:	60da      	str	r2, [r3, #12]
 8004862:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800486c:	d129      	bne.n	80048c2 <HAL_TIM_Encoder_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800486e:	4b9f      	ldr	r3, [pc, #636]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 8004870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004872:	4a9e      	ldr	r2, [pc, #632]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 8004874:	f043 0301 	orr.w	r3, r3, #1
 8004878:	6593      	str	r3, [r2, #88]	@ 0x58
 800487a:	4b9c      	ldr	r3, [pc, #624]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 800487c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004886:	4b99      	ldr	r3, [pc, #612]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 8004888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800488a:	4a98      	ldr	r2, [pc, #608]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004892:	4b96      	ldr	r3, [pc, #600]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 8004894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	637b      	str	r3, [r7, #52]	@ 0x34
 800489c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800489e:	2303      	movs	r3, #3
 80048a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a2:	2302      	movs	r3, #2
 80048a4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048a6:	2301      	movs	r3, #1
 80048a8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048aa:	2300      	movs	r3, #0
 80048ac:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80048ae:	2301      	movs	r3, #1
 80048b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048b2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80048b6:	4619      	mov	r1, r3
 80048b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048bc:	f002 f9ec 	bl	8006c98 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 80048c0:	e110      	b.n	8004ae4 <HAL_TIM_Encoder_MspInit+0x298>
  else if(htim_encoder->Instance==TIM3)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a8a      	ldr	r2, [pc, #552]	@ (8004af0 <HAL_TIM_Encoder_MspInit+0x2a4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d145      	bne.n	8004958 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80048cc:	4b87      	ldr	r3, [pc, #540]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 80048ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d0:	4a86      	ldr	r2, [pc, #536]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 80048d2:	f043 0302 	orr.w	r3, r3, #2
 80048d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80048d8:	4b84      	ldr	r3, [pc, #528]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 80048da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80048e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048e4:	4b81      	ldr	r3, [pc, #516]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 80048e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048e8:	4a80      	ldr	r2, [pc, #512]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 80048ea:	f043 0301 	orr.w	r3, r3, #1
 80048ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048f0:	4b7e      	ldr	r3, [pc, #504]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 80048f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048fc:	4b7b      	ldr	r3, [pc, #492]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 80048fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004900:	4a7a      	ldr	r2, [pc, #488]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 8004902:	f043 0304 	orr.w	r3, r3, #4
 8004906:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004908:	4b78      	ldr	r3, [pc, #480]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 800490a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004914:	2380      	movs	r3, #128	@ 0x80
 8004916:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004918:	2302      	movs	r3, #2
 800491a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800491c:	2301      	movs	r3, #1
 800491e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004920:	2300      	movs	r3, #0
 8004922:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004924:	2302      	movs	r3, #2
 8004926:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004928:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800492c:	4619      	mov	r1, r3
 800492e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004932:	f002 f9b1 	bl	8006c98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004936:	2340      	movs	r3, #64	@ 0x40
 8004938:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800493a:	2302      	movs	r3, #2
 800493c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800493e:	2301      	movs	r3, #1
 8004940:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004942:	2300      	movs	r3, #0
 8004944:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004946:	2302      	movs	r3, #2
 8004948:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800494a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800494e:	4619      	mov	r1, r3
 8004950:	4868      	ldr	r0, [pc, #416]	@ (8004af4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004952:	f002 f9a1 	bl	8006c98 <HAL_GPIO_Init>
}
 8004956:	e0c5      	b.n	8004ae4 <HAL_TIM_Encoder_MspInit+0x298>
  else if(htim_encoder->Instance==TIM4)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a66      	ldr	r2, [pc, #408]	@ (8004af8 <HAL_TIM_Encoder_MspInit+0x2ac>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d12a      	bne.n	80049b8 <HAL_TIM_Encoder_MspInit+0x16c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004962:	4b62      	ldr	r3, [pc, #392]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 8004964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004966:	4a61      	ldr	r2, [pc, #388]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 8004968:	f043 0304 	orr.w	r3, r3, #4
 800496c:	6593      	str	r3, [r2, #88]	@ 0x58
 800496e:	4b5f      	ldr	r3, [pc, #380]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 8004970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	627b      	str	r3, [r7, #36]	@ 0x24
 8004978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800497a:	4b5c      	ldr	r3, [pc, #368]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 800497c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800497e:	4a5b      	ldr	r2, [pc, #364]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 8004980:	f043 0301 	orr.w	r3, r3, #1
 8004984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004986:	4b59      	ldr	r3, [pc, #356]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 8004988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	623b      	str	r3, [r7, #32]
 8004990:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004992:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004996:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004998:	2302      	movs	r3, #2
 800499a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800499c:	2301      	movs	r3, #1
 800499e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049a0:	2300      	movs	r3, #0
 80049a2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80049a4:	230a      	movs	r3, #10
 80049a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80049ac:	4619      	mov	r1, r3
 80049ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049b2:	f002 f971 	bl	8006c98 <HAL_GPIO_Init>
}
 80049b6:	e095      	b.n	8004ae4 <HAL_TIM_Encoder_MspInit+0x298>
  else if(htim_encoder->Instance==TIM5)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a4f      	ldr	r2, [pc, #316]	@ (8004afc <HAL_TIM_Encoder_MspInit+0x2b0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d145      	bne.n	8004a4e <HAL_TIM_Encoder_MspInit+0x202>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80049c2:	4b4a      	ldr	r3, [pc, #296]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 80049c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c6:	4a49      	ldr	r2, [pc, #292]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 80049c8:	f043 0308 	orr.w	r3, r3, #8
 80049cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80049ce:	4b47      	ldr	r3, [pc, #284]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 80049d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	61fb      	str	r3, [r7, #28]
 80049d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049da:	4b44      	ldr	r3, [pc, #272]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 80049dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049de:	4a43      	ldr	r2, [pc, #268]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 80049e0:	f043 0302 	orr.w	r3, r3, #2
 80049e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049e6:	4b41      	ldr	r3, [pc, #260]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 80049e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049f2:	4b3e      	ldr	r3, [pc, #248]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 80049f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f6:	4a3d      	ldr	r2, [pc, #244]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 80049f8:	f043 0304 	orr.w	r3, r3, #4
 80049fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049fe:	4b3b      	ldr	r3, [pc, #236]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 8004a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a02:	f003 0304 	and.w	r3, r3, #4
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004a0a:	2304      	movs	r3, #4
 8004a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a0e:	2302      	movs	r3, #2
 8004a10:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a12:	2301      	movs	r3, #1
 8004a14:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a16:	2300      	movs	r3, #0
 8004a18:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a1e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004a22:	4619      	mov	r1, r3
 8004a24:	4836      	ldr	r0, [pc, #216]	@ (8004b00 <HAL_TIM_Encoder_MspInit+0x2b4>)
 8004a26:	f002 f937 	bl	8006c98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004a2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a30:	2302      	movs	r3, #2
 8004a32:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a34:	2301      	movs	r3, #1
 8004a36:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a40:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004a44:	4619      	mov	r1, r3
 8004a46:	482b      	ldr	r0, [pc, #172]	@ (8004af4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004a48:	f002 f926 	bl	8006c98 <HAL_GPIO_Init>
}
 8004a4c:	e04a      	b.n	8004ae4 <HAL_TIM_Encoder_MspInit+0x298>
  else if(htim_encoder->Instance==TIM8)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a2c      	ldr	r2, [pc, #176]	@ (8004b04 <HAL_TIM_Encoder_MspInit+0x2b8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d145      	bne.n	8004ae4 <HAL_TIM_Encoder_MspInit+0x298>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004a58:	4b24      	ldr	r3, [pc, #144]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 8004a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a5c:	4a23      	ldr	r2, [pc, #140]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 8004a5e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004a62:	6613      	str	r3, [r2, #96]	@ 0x60
 8004a64:	4b21      	ldr	r3, [pc, #132]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 8004a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a6c:	613b      	str	r3, [r7, #16]
 8004a6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a70:	4b1e      	ldr	r3, [pc, #120]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 8004a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a74:	4a1d      	ldr	r2, [pc, #116]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 8004a76:	f043 0304 	orr.w	r3, r3, #4
 8004a7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 8004a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a88:	4b18      	ldr	r3, [pc, #96]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 8004a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a8c:	4a17      	ldr	r2, [pc, #92]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 8004a8e:	f043 0301 	orr.w	r3, r3, #1
 8004a92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a94:	4b15      	ldr	r3, [pc, #84]	@ (8004aec <HAL_TIM_Encoder_MspInit+0x2a0>)
 8004a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004aa0:	2380      	movs	r3, #128	@ 0x80
 8004aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aac:	2300      	movs	r3, #0
 8004aae:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ab4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004ab8:	4619      	mov	r1, r3
 8004aba:	480e      	ldr	r0, [pc, #56]	@ (8004af4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004abc:	f002 f8ec 	bl	8006c98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004ac0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004aca:	2301      	movs	r3, #1
 8004acc:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ad6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004ada:	4619      	mov	r1, r3
 8004adc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ae0:	f002 f8da 	bl	8006c98 <HAL_GPIO_Init>
}
 8004ae4:	bf00      	nop
 8004ae6:	3750      	adds	r7, #80	@ 0x50
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40021000 	.word	0x40021000
 8004af0:	40000400 	.word	0x40000400
 8004af4:	48000800 	.word	0x48000800
 8004af8:	40000800 	.word	0x40000800
 8004afc:	40000c00 	.word	0x40000c00
 8004b00:	48000400 	.word	0x48000400
 8004b04:	40013400 	.word	0x40013400

08004b08 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a13      	ldr	r2, [pc, #76]	@ (8004b64 <HAL_TIM_Base_MspInit+0x5c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d10c      	bne.n	8004b34 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004b1a:	4b13      	ldr	r3, [pc, #76]	@ (8004b68 <HAL_TIM_Base_MspInit+0x60>)
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b1e:	4a12      	ldr	r2, [pc, #72]	@ (8004b68 <HAL_TIM_Base_MspInit+0x60>)
 8004b20:	f043 0310 	orr.w	r3, r3, #16
 8004b24:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b26:	4b10      	ldr	r3, [pc, #64]	@ (8004b68 <HAL_TIM_Base_MspInit+0x60>)
 8004b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b2a:	f003 0310 	and.w	r3, r3, #16
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8004b32:	e010      	b.n	8004b56 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a0c      	ldr	r2, [pc, #48]	@ (8004b6c <HAL_TIM_Base_MspInit+0x64>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d10b      	bne.n	8004b56 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b68 <HAL_TIM_Base_MspInit+0x60>)
 8004b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b42:	4a09      	ldr	r2, [pc, #36]	@ (8004b68 <HAL_TIM_Base_MspInit+0x60>)
 8004b44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b48:	6613      	str	r3, [r2, #96]	@ 0x60
 8004b4a:	4b07      	ldr	r3, [pc, #28]	@ (8004b68 <HAL_TIM_Base_MspInit+0x60>)
 8004b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b52:	60bb      	str	r3, [r7, #8]
 8004b54:	68bb      	ldr	r3, [r7, #8]
}
 8004b56:	bf00      	nop
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40001000 	.word	0x40001000
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	40014800 	.word	0x40014800

08004b70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08a      	sub	sp, #40	@ 0x28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b78:	f107 0314 	add.w	r3, r7, #20
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	605a      	str	r2, [r3, #4]
 8004b82:	609a      	str	r2, [r3, #8]
 8004b84:	60da      	str	r2, [r3, #12]
 8004b86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a31      	ldr	r2, [pc, #196]	@ (8004c54 <HAL_TIM_MspPostInit+0xe4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d13a      	bne.n	8004c08 <HAL_TIM_MspPostInit+0x98>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b92:	4b31      	ldr	r3, [pc, #196]	@ (8004c58 <HAL_TIM_MspPostInit+0xe8>)
 8004b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b96:	4a30      	ldr	r2, [pc, #192]	@ (8004c58 <HAL_TIM_MspPostInit+0xe8>)
 8004b98:	f043 0304 	orr.w	r3, r3, #4
 8004b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b9e:	4b2e      	ldr	r3, [pc, #184]	@ (8004c58 <HAL_TIM_MspPostInit+0xe8>)
 8004ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ba2:	f003 0304 	and.w	r3, r3, #4
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004baa:	4b2b      	ldr	r3, [pc, #172]	@ (8004c58 <HAL_TIM_MspPostInit+0xe8>)
 8004bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bae:	4a2a      	ldr	r2, [pc, #168]	@ (8004c58 <HAL_TIM_MspPostInit+0xe8>)
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bb6:	4b28      	ldr	r3, [pc, #160]	@ (8004c58 <HAL_TIM_MspPostInit+0xe8>)
 8004bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004bc2:	2308      	movs	r3, #8
 8004bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bd6:	f107 0314 	add.w	r3, r7, #20
 8004bda:	4619      	mov	r1, r3
 8004bdc:	481f      	ldr	r0, [pc, #124]	@ (8004c5c <HAL_TIM_MspPostInit+0xec>)
 8004bde:	f002 f85b 	bl	8006c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004be2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8004be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be8:	2302      	movs	r3, #2
 8004bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004bf4:	2306      	movs	r3, #6
 8004bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bf8:	f107 0314 	add.w	r3, r7, #20
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c02:	f002 f849 	bl	8006c98 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8004c06:	e020      	b.n	8004c4a <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM17)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a14      	ldr	r2, [pc, #80]	@ (8004c60 <HAL_TIM_MspPostInit+0xf0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d11b      	bne.n	8004c4a <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c12:	4b11      	ldr	r3, [pc, #68]	@ (8004c58 <HAL_TIM_MspPostInit+0xe8>)
 8004c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c16:	4a10      	ldr	r2, [pc, #64]	@ (8004c58 <HAL_TIM_MspPostInit+0xe8>)
 8004c18:	f043 0302 	orr.w	r3, r3, #2
 8004c1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c58 <HAL_TIM_MspPostInit+0xe8>)
 8004c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	60bb      	str	r3, [r7, #8]
 8004c28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004c2a:	2320      	movs	r3, #32
 8004c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c36:	2300      	movs	r3, #0
 8004c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8004c3a:	230a      	movs	r3, #10
 8004c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c3e:	f107 0314 	add.w	r3, r7, #20
 8004c42:	4619      	mov	r1, r3
 8004c44:	4807      	ldr	r0, [pc, #28]	@ (8004c64 <HAL_TIM_MspPostInit+0xf4>)
 8004c46:	f002 f827 	bl	8006c98 <HAL_GPIO_Init>
}
 8004c4a:	bf00      	nop
 8004c4c:	3728      	adds	r7, #40	@ 0x28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40012c00 	.word	0x40012c00
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	48000800 	.word	0x48000800
 8004c60:	40014800 	.word	0x40014800
 8004c64:	48000400 	.word	0x48000400

08004c68 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b0a0      	sub	sp, #128	@ 0x80
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c70:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	605a      	str	r2, [r3, #4]
 8004c7a:	609a      	str	r2, [r3, #8]
 8004c7c:	60da      	str	r2, [r3, #12]
 8004c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c80:	f107 0318 	add.w	r3, r7, #24
 8004c84:	2254      	movs	r2, #84	@ 0x54
 8004c86:	2100      	movs	r1, #0
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f007 f9d9 	bl	800c040 <memset>
  if(huart->Instance==USART1)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a30      	ldr	r2, [pc, #192]	@ (8004d54 <HAL_UART_MspInit+0xec>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d159      	bne.n	8004d4c <HAL_UART_MspInit+0xe4>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ca0:	f107 0318 	add.w	r3, r7, #24
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f003 f9a7 	bl	8007ff8 <HAL_RCCEx_PeriphCLKConfig>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004cb0:	f7ff f8a2 	bl	8003df8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004cb4:	4b28      	ldr	r3, [pc, #160]	@ (8004d58 <HAL_UART_MspInit+0xf0>)
 8004cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cb8:	4a27      	ldr	r2, [pc, #156]	@ (8004d58 <HAL_UART_MspInit+0xf0>)
 8004cba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cbe:	6613      	str	r3, [r2, #96]	@ 0x60
 8004cc0:	4b25      	ldr	r3, [pc, #148]	@ (8004d58 <HAL_UART_MspInit+0xf0>)
 8004cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ccc:	4b22      	ldr	r3, [pc, #136]	@ (8004d58 <HAL_UART_MspInit+0xf0>)
 8004cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cd0:	4a21      	ldr	r2, [pc, #132]	@ (8004d58 <HAL_UART_MspInit+0xf0>)
 8004cd2:	f043 0304 	orr.w	r3, r3, #4
 8004cd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8004d58 <HAL_UART_MspInit+0xf0>)
 8004cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8004d58 <HAL_UART_MspInit+0xf0>)
 8004ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8004d58 <HAL_UART_MspInit+0xf0>)
 8004cea:	f043 0302 	orr.w	r3, r3, #2
 8004cee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cf0:	4b19      	ldr	r3, [pc, #100]	@ (8004d58 <HAL_UART_MspInit+0xf0>)
 8004cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004cfc:	2310      	movs	r3, #16
 8004cfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d00:	2302      	movs	r3, #2
 8004d02:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d04:	2300      	movs	r3, #0
 8004d06:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d0c:	2307      	movs	r3, #7
 8004d0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d10:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004d14:	4619      	mov	r1, r3
 8004d16:	4811      	ldr	r0, [pc, #68]	@ (8004d5c <HAL_UART_MspInit+0xf4>)
 8004d18:	f001 ffbe 	bl	8006c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004d1c:	2380      	movs	r3, #128	@ 0x80
 8004d1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d20:	2302      	movs	r3, #2
 8004d22:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d2c:	2307      	movs	r3, #7
 8004d2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d30:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004d34:	4619      	mov	r1, r3
 8004d36:	480a      	ldr	r0, [pc, #40]	@ (8004d60 <HAL_UART_MspInit+0xf8>)
 8004d38:	f001 ffae 	bl	8006c98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2100      	movs	r1, #0
 8004d40:	2025      	movs	r0, #37	@ 0x25
 8004d42:	f001 fc3e 	bl	80065c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004d46:	2025      	movs	r0, #37	@ 0x25
 8004d48:	f001 fc55 	bl	80065f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8004d4c:	bf00      	nop
 8004d4e:	3780      	adds	r7, #128	@ 0x80
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40013800 	.word	0x40013800
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	48000800 	.word	0x48000800
 8004d60:	48000400 	.word	0x48000400

08004d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d68:	bf00      	nop
 8004d6a:	e7fd      	b.n	8004d68 <NMI_Handler+0x4>

08004d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d70:	bf00      	nop
 8004d72:	e7fd      	b.n	8004d70 <HardFault_Handler+0x4>

08004d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d78:	bf00      	nop
 8004d7a:	e7fd      	b.n	8004d78 <MemManage_Handler+0x4>

08004d7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d80:	bf00      	nop
 8004d82:	e7fd      	b.n	8004d80 <BusFault_Handler+0x4>

08004d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d88:	bf00      	nop
 8004d8a:	e7fd      	b.n	8004d88 <UsageFault_Handler+0x4>

08004d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d90:	bf00      	nop
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d9e:	bf00      	nop
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dac:	bf00      	nop
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dba:	f000 f8f5 	bl	8004fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dbe:	bf00      	nop
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004dc8:	4802      	ldr	r0, [pc, #8]	@ (8004dd4 <USART1_IRQHandler+0x10>)
 8004dca:	f004 fe35 	bl	8009a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004dce:	bf00      	nop
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000490 	.word	0x20000490

08004dd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  return 1;
 8004ddc:	2301      	movs	r3, #1
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <_kill>:

int _kill(int pid, int sig)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004df2:	f007 f981 	bl	800c0f8 <__errno>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2216      	movs	r2, #22
 8004dfa:	601a      	str	r2, [r3, #0]
  return -1;
 8004dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <_exit>:

void _exit (int status)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e10:	f04f 31ff 	mov.w	r1, #4294967295
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff ffe7 	bl	8004de8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e1a:	bf00      	nop
 8004e1c:	e7fd      	b.n	8004e1a <_exit+0x12>
	...

08004e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e28:	4a14      	ldr	r2, [pc, #80]	@ (8004e7c <_sbrk+0x5c>)
 8004e2a:	4b15      	ldr	r3, [pc, #84]	@ (8004e80 <_sbrk+0x60>)
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e34:	4b13      	ldr	r3, [pc, #76]	@ (8004e84 <_sbrk+0x64>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d102      	bne.n	8004e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e3c:	4b11      	ldr	r3, [pc, #68]	@ (8004e84 <_sbrk+0x64>)
 8004e3e:	4a12      	ldr	r2, [pc, #72]	@ (8004e88 <_sbrk+0x68>)
 8004e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e42:	4b10      	ldr	r3, [pc, #64]	@ (8004e84 <_sbrk+0x64>)
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4413      	add	r3, r2
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d207      	bcs.n	8004e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e50:	f007 f952 	bl	800c0f8 <__errno>
 8004e54:	4603      	mov	r3, r0
 8004e56:	220c      	movs	r2, #12
 8004e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e5e:	e009      	b.n	8004e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e60:	4b08      	ldr	r3, [pc, #32]	@ (8004e84 <_sbrk+0x64>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e66:	4b07      	ldr	r3, [pc, #28]	@ (8004e84 <_sbrk+0x64>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	4a05      	ldr	r2, [pc, #20]	@ (8004e84 <_sbrk+0x64>)
 8004e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e72:	68fb      	ldr	r3, [r7, #12]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	20020000 	.word	0x20020000
 8004e80:	00000400 	.word	0x00000400
 8004e84:	20000894 	.word	0x20000894
 8004e88:	200009e8 	.word	0x200009e8

08004e8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004e90:	4b06      	ldr	r3, [pc, #24]	@ (8004eac <SystemInit+0x20>)
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e96:	4a05      	ldr	r2, [pc, #20]	@ (8004eac <SystemInit+0x20>)
 8004e98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ea0:	bf00      	nop
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	e000ed00 	.word	0xe000ed00

08004eb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004eb0:	480d      	ldr	r0, [pc, #52]	@ (8004ee8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004eb2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004eb4:	f7ff ffea 	bl	8004e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004eb8:	480c      	ldr	r0, [pc, #48]	@ (8004eec <LoopForever+0x6>)
  ldr r1, =_edata
 8004eba:	490d      	ldr	r1, [pc, #52]	@ (8004ef0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8004ef4 <LoopForever+0xe>)
  movs r3, #0
 8004ebe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004ec0:	e002      	b.n	8004ec8 <LoopCopyDataInit>

08004ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ec6:	3304      	adds	r3, #4

08004ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ecc:	d3f9      	bcc.n	8004ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ece:	4a0a      	ldr	r2, [pc, #40]	@ (8004ef8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004ed0:	4c0a      	ldr	r4, [pc, #40]	@ (8004efc <LoopForever+0x16>)
  movs r3, #0
 8004ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ed4:	e001      	b.n	8004eda <LoopFillZerobss>

08004ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ed8:	3204      	adds	r2, #4

08004eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004edc:	d3fb      	bcc.n	8004ed6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004ede:	f007 f911 	bl	800c104 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004ee2:	f7fd fb75 	bl	80025d0 <main>

08004ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8004ee6:	e7fe      	b.n	8004ee6 <LoopForever>
  ldr   r0, =_estack
 8004ee8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ef0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8004ef4:	0800d98c 	.word	0x0800d98c
  ldr r2, =_sbss
 8004ef8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8004efc:	200009e8 	.word	0x200009e8

08004f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004f00:	e7fe      	b.n	8004f00 <ADC1_2_IRQHandler>

08004f02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b082      	sub	sp, #8
 8004f06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f0c:	2003      	movs	r0, #3
 8004f0e:	f001 fb4d 	bl	80065ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004f12:	200f      	movs	r0, #15
 8004f14:	f000 f80e 	bl	8004f34 <HAL_InitTick>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	71fb      	strb	r3, [r7, #7]
 8004f22:	e001      	b.n	8004f28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004f24:	f7ff fa82 	bl	800442c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004f28:	79fb      	ldrb	r3, [r7, #7]

}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004f40:	4b16      	ldr	r3, [pc, #88]	@ (8004f9c <HAL_InitTick+0x68>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d022      	beq.n	8004f8e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004f48:	4b15      	ldr	r3, [pc, #84]	@ (8004fa0 <HAL_InitTick+0x6c>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	4b13      	ldr	r3, [pc, #76]	@ (8004f9c <HAL_InitTick+0x68>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004f54:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f001 fb58 	bl	8006612 <HAL_SYSTICK_Config>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10f      	bne.n	8004f88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b0f      	cmp	r3, #15
 8004f6c:	d809      	bhi.n	8004f82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f6e:	2200      	movs	r2, #0
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	f04f 30ff 	mov.w	r0, #4294967295
 8004f76:	f001 fb24 	bl	80065c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004fa4 <HAL_InitTick+0x70>)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	e007      	b.n	8004f92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	73fb      	strb	r3, [r7, #15]
 8004f86:	e004      	b.n	8004f92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	73fb      	strb	r3, [r7, #15]
 8004f8c:	e001      	b.n	8004f92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	2000000c 	.word	0x2000000c
 8004fa0:	20000004 	.word	0x20000004
 8004fa4:	20000008 	.word	0x20000008

08004fa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fac:	4b05      	ldr	r3, [pc, #20]	@ (8004fc4 <HAL_IncTick+0x1c>)
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	4b05      	ldr	r3, [pc, #20]	@ (8004fc8 <HAL_IncTick+0x20>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	4a03      	ldr	r2, [pc, #12]	@ (8004fc4 <HAL_IncTick+0x1c>)
 8004fb8:	6013      	str	r3, [r2, #0]
}
 8004fba:	bf00      	nop
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	20000898 	.word	0x20000898
 8004fc8:	2000000c 	.word	0x2000000c

08004fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  return uwTick;
 8004fd0:	4b03      	ldr	r3, [pc, #12]	@ (8004fe0 <HAL_GetTick+0x14>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	20000898 	.word	0x20000898

08004fe4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	609a      	str	r2, [r3, #8]
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	609a      	str	r2, [r3, #8]
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005040:	4618      	mov	r0, r3
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3360      	adds	r3, #96	@ 0x60
 800505e:	461a      	mov	r2, r3
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	4b08      	ldr	r3, [pc, #32]	@ (8005090 <LL_ADC_SetOffset+0x44>)
 800506e:	4013      	ands	r3, r2
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	4313      	orrs	r3, r2
 800507c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005084:	bf00      	nop
 8005086:	371c      	adds	r7, #28
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	03fff000 	.word	0x03fff000

08005094 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	3360      	adds	r3, #96	@ 0x60
 80050a2:	461a      	mov	r2, r3
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	3360      	adds	r3, #96	@ 0x60
 80050d0:	461a      	mov	r2, r3
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	431a      	orrs	r2, r3
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80050ea:	bf00      	nop
 80050ec:	371c      	adds	r7, #28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b087      	sub	sp, #28
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3360      	adds	r3, #96	@ 0x60
 8005106:	461a      	mov	r2, r3
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	431a      	orrs	r2, r3
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005120:	bf00      	nop
 8005122:	371c      	adds	r7, #28
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	3360      	adds	r3, #96	@ 0x60
 800513c:	461a      	mov	r2, r3
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	431a      	orrs	r2, r3
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005156:	bf00      	nop
 8005158:	371c      	adds	r7, #28
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	615a      	str	r2, [r3, #20]
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3330      	adds	r3, #48	@ 0x30
 8005198:	461a      	mov	r2, r3
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	0a1b      	lsrs	r3, r3, #8
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	f003 030c 	and.w	r3, r3, #12
 80051a4:	4413      	add	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f003 031f 	and.w	r3, r3, #31
 80051b2:	211f      	movs	r1, #31
 80051b4:	fa01 f303 	lsl.w	r3, r1, r3
 80051b8:	43db      	mvns	r3, r3
 80051ba:	401a      	ands	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	0e9b      	lsrs	r3, r3, #26
 80051c0:	f003 011f 	and.w	r1, r3, #31
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f003 031f 	and.w	r3, r3, #31
 80051ca:	fa01 f303 	lsl.w	r3, r1, r3
 80051ce:	431a      	orrs	r2, r3
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80051d4:	bf00      	nop
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3314      	adds	r3, #20
 80051f0:	461a      	mov	r2, r3
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	0e5b      	lsrs	r3, r3, #25
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	4413      	add	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	0d1b      	lsrs	r3, r3, #20
 8005208:	f003 031f 	and.w	r3, r3, #31
 800520c:	2107      	movs	r1, #7
 800520e:	fa01 f303 	lsl.w	r3, r1, r3
 8005212:	43db      	mvns	r3, r3
 8005214:	401a      	ands	r2, r3
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	0d1b      	lsrs	r3, r3, #20
 800521a:	f003 031f 	and.w	r3, r3, #31
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	fa01 f303 	lsl.w	r3, r1, r3
 8005224:	431a      	orrs	r2, r3
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800522a:	bf00      	nop
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
	...

08005238 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005250:	43db      	mvns	r3, r3
 8005252:	401a      	ands	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f003 0318 	and.w	r3, r3, #24
 800525a:	4908      	ldr	r1, [pc, #32]	@ (800527c <LL_ADC_SetChannelSingleDiff+0x44>)
 800525c:	40d9      	lsrs	r1, r3
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	400b      	ands	r3, r1
 8005262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005266:	431a      	orrs	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800526e:	bf00      	nop
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	0007ffff 	.word	0x0007ffff

08005280 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005290:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6093      	str	r3, [r2, #8]
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052b8:	d101      	bne.n	80052be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e000      	b.n	80052c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80052dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80052e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005304:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005308:	d101      	bne.n	800530e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800532c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005330:	f043 0202 	orr.w	r2, r3, #2
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <LL_ADC_IsEnabled+0x18>
 8005358:	2301      	movs	r3, #1
 800535a:	e000      	b.n	800535e <LL_ADC_IsEnabled+0x1a>
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b02      	cmp	r3, #2
 800537c:	d101      	bne.n	8005382 <LL_ADC_IsDisableOngoing+0x18>
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <LL_ADC_IsDisableOngoing+0x1a>
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d101      	bne.n	80053a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d101      	bne.n	80053ce <LL_ADC_INJ_IsConversionOngoing+0x18>
 80053ca:	2301      	movs	r3, #1
 80053cc:	e000      	b.n	80053d0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80053dc:	b590      	push	{r4, r7, lr}
 80053de:	b089      	sub	sp, #36	@ 0x24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053e4:	2300      	movs	r3, #0
 80053e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e1a9      	b.n	800574a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005400:	2b00      	cmp	r3, #0
 8005402:	d109      	bne.n	8005418 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7ff f835 	bl	8004474 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff ff41 	bl	80052a4 <LL_ADC_IsDeepPowerDownEnabled>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d004      	beq.n	8005432 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff ff27 	bl	8005280 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff ff5c 	bl	80052f4 <LL_ADC_IsInternalRegulatorEnabled>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d115      	bne.n	800546e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff ff40 	bl	80052cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800544c:	4b9c      	ldr	r3, [pc, #624]	@ (80056c0 <HAL_ADC_Init+0x2e4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	099b      	lsrs	r3, r3, #6
 8005452:	4a9c      	ldr	r2, [pc, #624]	@ (80056c4 <HAL_ADC_Init+0x2e8>)
 8005454:	fba2 2303 	umull	r2, r3, r2, r3
 8005458:	099b      	lsrs	r3, r3, #6
 800545a:	3301      	adds	r3, #1
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005460:	e002      	b.n	8005468 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	3b01      	subs	r3, #1
 8005466:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1f9      	bne.n	8005462 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff ff3e 	bl	80052f4 <LL_ADC_IsInternalRegulatorEnabled>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10d      	bne.n	800549a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005482:	f043 0210 	orr.w	r2, r3, #16
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800548e:	f043 0201 	orr.w	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7ff ff76 	bl	8005390 <LL_ADC_REG_IsConversionOngoing>
 80054a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054aa:	f003 0310 	and.w	r3, r3, #16
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f040 8142 	bne.w	8005738 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f040 813e 	bne.w	8005738 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054c0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80054c4:	f043 0202 	orr.w	r2, r3, #2
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff ff37 	bl	8005344 <LL_ADC_IsEnabled>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d141      	bne.n	8005560 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054e4:	d004      	beq.n	80054f0 <HAL_ADC_Init+0x114>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a77      	ldr	r2, [pc, #476]	@ (80056c8 <HAL_ADC_Init+0x2ec>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d10f      	bne.n	8005510 <HAL_ADC_Init+0x134>
 80054f0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80054f4:	f7ff ff26 	bl	8005344 <LL_ADC_IsEnabled>
 80054f8:	4604      	mov	r4, r0
 80054fa:	4873      	ldr	r0, [pc, #460]	@ (80056c8 <HAL_ADC_Init+0x2ec>)
 80054fc:	f7ff ff22 	bl	8005344 <LL_ADC_IsEnabled>
 8005500:	4603      	mov	r3, r0
 8005502:	4323      	orrs	r3, r4
 8005504:	2b00      	cmp	r3, #0
 8005506:	bf0c      	ite	eq
 8005508:	2301      	moveq	r3, #1
 800550a:	2300      	movne	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	e012      	b.n	8005536 <HAL_ADC_Init+0x15a>
 8005510:	486e      	ldr	r0, [pc, #440]	@ (80056cc <HAL_ADC_Init+0x2f0>)
 8005512:	f7ff ff17 	bl	8005344 <LL_ADC_IsEnabled>
 8005516:	4604      	mov	r4, r0
 8005518:	486d      	ldr	r0, [pc, #436]	@ (80056d0 <HAL_ADC_Init+0x2f4>)
 800551a:	f7ff ff13 	bl	8005344 <LL_ADC_IsEnabled>
 800551e:	4603      	mov	r3, r0
 8005520:	431c      	orrs	r4, r3
 8005522:	486c      	ldr	r0, [pc, #432]	@ (80056d4 <HAL_ADC_Init+0x2f8>)
 8005524:	f7ff ff0e 	bl	8005344 <LL_ADC_IsEnabled>
 8005528:	4603      	mov	r3, r0
 800552a:	4323      	orrs	r3, r4
 800552c:	2b00      	cmp	r3, #0
 800552e:	bf0c      	ite	eq
 8005530:	2301      	moveq	r3, #1
 8005532:	2300      	movne	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d012      	beq.n	8005560 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005542:	d004      	beq.n	800554e <HAL_ADC_Init+0x172>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a5f      	ldr	r2, [pc, #380]	@ (80056c8 <HAL_ADC_Init+0x2ec>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d101      	bne.n	8005552 <HAL_ADC_Init+0x176>
 800554e:	4a62      	ldr	r2, [pc, #392]	@ (80056d8 <HAL_ADC_Init+0x2fc>)
 8005550:	e000      	b.n	8005554 <HAL_ADC_Init+0x178>
 8005552:	4a62      	ldr	r2, [pc, #392]	@ (80056dc <HAL_ADC_Init+0x300>)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	4619      	mov	r1, r3
 800555a:	4610      	mov	r0, r2
 800555c:	f7ff fd42 	bl	8004fe4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	7f5b      	ldrb	r3, [r3, #29]
 8005564:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800556a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005570:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005576:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800557e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005580:	4313      	orrs	r3, r2
 8005582:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800558a:	2b01      	cmp	r3, #1
 800558c:	d106      	bne.n	800559c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005592:	3b01      	subs	r3, #1
 8005594:	045b      	lsls	r3, r3, #17
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	4313      	orrs	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d009      	beq.n	80055b8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	4b48      	ldr	r3, [pc, #288]	@ (80056e0 <HAL_ADC_Init+0x304>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6812      	ldr	r2, [r2, #0]
 80055c6:	69b9      	ldr	r1, [r7, #24]
 80055c8:	430b      	orrs	r3, r1
 80055ca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7ff fee5 	bl	80053b6 <LL_ADC_INJ_IsConversionOngoing>
 80055ec:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d17f      	bne.n	80056f4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d17c      	bne.n	80056f4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80055fe:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005606:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005608:	4313      	orrs	r3, r2
 800560a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005616:	f023 0302 	bic.w	r3, r3, #2
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6812      	ldr	r2, [r2, #0]
 800561e:	69b9      	ldr	r1, [r7, #24]
 8005620:	430b      	orrs	r3, r1
 8005622:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d017      	beq.n	800565c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691a      	ldr	r2, [r3, #16]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800563a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005644:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005648:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	6911      	ldr	r1, [r2, #16]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6812      	ldr	r2, [r2, #0]
 8005654:	430b      	orrs	r3, r1
 8005656:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800565a:	e013      	b.n	8005684 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691a      	ldr	r2, [r3, #16]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800566a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6812      	ldr	r2, [r2, #0]
 8005678:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800567c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005680:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800568a:	2b01      	cmp	r3, #1
 800568c:	d12a      	bne.n	80056e4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005698:	f023 0304 	bic.w	r3, r3, #4
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80056a4:	4311      	orrs	r1, r2
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80056aa:	4311      	orrs	r1, r2
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80056b0:	430a      	orrs	r2, r1
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0201 	orr.w	r2, r2, #1
 80056bc:	611a      	str	r2, [r3, #16]
 80056be:	e019      	b.n	80056f4 <HAL_ADC_Init+0x318>
 80056c0:	20000004 	.word	0x20000004
 80056c4:	053e2d63 	.word	0x053e2d63
 80056c8:	50000100 	.word	0x50000100
 80056cc:	50000400 	.word	0x50000400
 80056d0:	50000500 	.word	0x50000500
 80056d4:	50000600 	.word	0x50000600
 80056d8:	50000300 	.word	0x50000300
 80056dc:	50000700 	.word	0x50000700
 80056e0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691a      	ldr	r2, [r3, #16]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0201 	bic.w	r2, r2, #1
 80056f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d10c      	bne.n	8005716 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005702:	f023 010f 	bic.w	r1, r3, #15
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	1e5a      	subs	r2, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	631a      	str	r2, [r3, #48]	@ 0x30
 8005714:	e007      	b.n	8005726 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 020f 	bic.w	r2, r2, #15
 8005724:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800572a:	f023 0303 	bic.w	r3, r3, #3
 800572e:	f043 0201 	orr.w	r2, r3, #1
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005736:	e007      	b.n	8005748 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800573c:	f043 0210 	orr.w	r2, r3, #16
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005748:	7ffb      	ldrb	r3, [r7, #31]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3724      	adds	r7, #36	@ 0x24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd90      	pop	{r4, r7, pc}
 8005752:	bf00      	nop

08005754 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b0b6      	sub	sp, #216	@ 0xd8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005764:	2300      	movs	r3, #0
 8005766:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800576e:	2b01      	cmp	r3, #1
 8005770:	d102      	bne.n	8005778 <HAL_ADC_ConfigChannel+0x24>
 8005772:	2302      	movs	r3, #2
 8005774:	f000 bc13 	b.w	8005f9e <HAL_ADC_ConfigChannel+0x84a>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff fe03 	bl	8005390 <LL_ADC_REG_IsConversionOngoing>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	f040 83f3 	bne.w	8005f78 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6818      	ldr	r0, [r3, #0]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	6859      	ldr	r1, [r3, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	f7ff fcf2 	bl	8005188 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff fdf1 	bl	8005390 <LL_ADC_REG_IsConversionOngoing>
 80057ae:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff fdfd 	bl	80053b6 <LL_ADC_INJ_IsConversionOngoing>
 80057bc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80057c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f040 81d9 	bne.w	8005b7c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80057ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f040 81d4 	bne.w	8005b7c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057dc:	d10f      	bne.n	80057fe <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6818      	ldr	r0, [r3, #0]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2200      	movs	r2, #0
 80057e8:	4619      	mov	r1, r3
 80057ea:	f7ff fcf9 	bl	80051e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7ff fcb3 	bl	8005162 <LL_ADC_SetSamplingTimeCommonConfig>
 80057fc:	e00e      	b.n	800581c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6818      	ldr	r0, [r3, #0]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	6819      	ldr	r1, [r3, #0]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	461a      	mov	r2, r3
 800580c:	f7ff fce8 	bl	80051e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2100      	movs	r1, #0
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff fca3 	bl	8005162 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	695a      	ldr	r2, [r3, #20]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	08db      	lsrs	r3, r3, #3
 8005828:	f003 0303 	and.w	r3, r3, #3
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	2b04      	cmp	r3, #4
 800583c:	d022      	beq.n	8005884 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6919      	ldr	r1, [r3, #16]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800584e:	f7ff fbfd 	bl	800504c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6818      	ldr	r0, [r3, #0]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	6919      	ldr	r1, [r3, #16]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	461a      	mov	r2, r3
 8005860:	f7ff fc49 	bl	80050f6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6818      	ldr	r0, [r3, #0]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005870:	2b01      	cmp	r3, #1
 8005872:	d102      	bne.n	800587a <HAL_ADC_ConfigChannel+0x126>
 8005874:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005878:	e000      	b.n	800587c <HAL_ADC_ConfigChannel+0x128>
 800587a:	2300      	movs	r3, #0
 800587c:	461a      	mov	r2, r3
 800587e:	f7ff fc55 	bl	800512c <LL_ADC_SetOffsetSaturation>
 8005882:	e17b      	b.n	8005b7c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2100      	movs	r1, #0
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff fc02 	bl	8005094 <LL_ADC_GetOffsetChannel>
 8005890:	4603      	mov	r3, r0
 8005892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10a      	bne.n	80058b0 <HAL_ADC_ConfigChannel+0x15c>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2100      	movs	r1, #0
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7ff fbf7 	bl	8005094 <LL_ADC_GetOffsetChannel>
 80058a6:	4603      	mov	r3, r0
 80058a8:	0e9b      	lsrs	r3, r3, #26
 80058aa:	f003 021f 	and.w	r2, r3, #31
 80058ae:	e01e      	b.n	80058ee <HAL_ADC_ConfigChannel+0x19a>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2100      	movs	r1, #0
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff fbec 	bl	8005094 <LL_ADC_GetOffsetChannel>
 80058bc:	4603      	mov	r3, r0
 80058be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80058c6:	fa93 f3a3 	rbit	r3, r3
 80058ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80058ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80058d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80058d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80058de:	2320      	movs	r3, #32
 80058e0:	e004      	b.n	80058ec <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80058e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80058e6:	fab3 f383 	clz	r3, r3
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d105      	bne.n	8005906 <HAL_ADC_ConfigChannel+0x1b2>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	0e9b      	lsrs	r3, r3, #26
 8005900:	f003 031f 	and.w	r3, r3, #31
 8005904:	e018      	b.n	8005938 <HAL_ADC_ConfigChannel+0x1e4>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005912:	fa93 f3a3 	rbit	r3, r3
 8005916:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800591a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800591e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005922:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800592a:	2320      	movs	r3, #32
 800592c:	e004      	b.n	8005938 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800592e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005932:	fab3 f383 	clz	r3, r3
 8005936:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005938:	429a      	cmp	r2, r3
 800593a:	d106      	bne.n	800594a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2200      	movs	r2, #0
 8005942:	2100      	movs	r1, #0
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff fbbb 	bl	80050c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2101      	movs	r1, #1
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff fb9f 	bl	8005094 <LL_ADC_GetOffsetChannel>
 8005956:	4603      	mov	r3, r0
 8005958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10a      	bne.n	8005976 <HAL_ADC_ConfigChannel+0x222>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2101      	movs	r1, #1
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff fb94 	bl	8005094 <LL_ADC_GetOffsetChannel>
 800596c:	4603      	mov	r3, r0
 800596e:	0e9b      	lsrs	r3, r3, #26
 8005970:	f003 021f 	and.w	r2, r3, #31
 8005974:	e01e      	b.n	80059b4 <HAL_ADC_ConfigChannel+0x260>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2101      	movs	r1, #1
 800597c:	4618      	mov	r0, r3
 800597e:	f7ff fb89 	bl	8005094 <LL_ADC_GetOffsetChannel>
 8005982:	4603      	mov	r3, r0
 8005984:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005988:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800598c:	fa93 f3a3 	rbit	r3, r3
 8005990:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005994:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005998:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800599c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80059a4:	2320      	movs	r3, #32
 80059a6:	e004      	b.n	80059b2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80059a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80059ac:	fab3 f383 	clz	r3, r3
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d105      	bne.n	80059cc <HAL_ADC_ConfigChannel+0x278>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	0e9b      	lsrs	r3, r3, #26
 80059c6:	f003 031f 	and.w	r3, r3, #31
 80059ca:	e018      	b.n	80059fe <HAL_ADC_ConfigChannel+0x2aa>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059d8:	fa93 f3a3 	rbit	r3, r3
 80059dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80059e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80059e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80059f0:	2320      	movs	r3, #32
 80059f2:	e004      	b.n	80059fe <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80059f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059f8:	fab3 f383 	clz	r3, r3
 80059fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d106      	bne.n	8005a10 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2200      	movs	r2, #0
 8005a08:	2101      	movs	r1, #1
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7ff fb58 	bl	80050c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2102      	movs	r1, #2
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff fb3c 	bl	8005094 <LL_ADC_GetOffsetChannel>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10a      	bne.n	8005a3c <HAL_ADC_ConfigChannel+0x2e8>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2102      	movs	r1, #2
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff fb31 	bl	8005094 <LL_ADC_GetOffsetChannel>
 8005a32:	4603      	mov	r3, r0
 8005a34:	0e9b      	lsrs	r3, r3, #26
 8005a36:	f003 021f 	and.w	r2, r3, #31
 8005a3a:	e01e      	b.n	8005a7a <HAL_ADC_ConfigChannel+0x326>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2102      	movs	r1, #2
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff fb26 	bl	8005094 <LL_ADC_GetOffsetChannel>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a52:	fa93 f3a3 	rbit	r3, r3
 8005a56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005a5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005a62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005a6a:	2320      	movs	r3, #32
 8005a6c:	e004      	b.n	8005a78 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005a6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a72:	fab3 f383 	clz	r3, r3
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d105      	bne.n	8005a92 <HAL_ADC_ConfigChannel+0x33e>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	0e9b      	lsrs	r3, r3, #26
 8005a8c:	f003 031f 	and.w	r3, r3, #31
 8005a90:	e016      	b.n	8005ac0 <HAL_ADC_ConfigChannel+0x36c>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a9e:	fa93 f3a3 	rbit	r3, r3
 8005aa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005aa4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005aa6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005aaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005ab2:	2320      	movs	r3, #32
 8005ab4:	e004      	b.n	8005ac0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005ab6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005aba:	fab3 f383 	clz	r3, r3
 8005abe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d106      	bne.n	8005ad2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2102      	movs	r1, #2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff faf7 	bl	80050c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2103      	movs	r1, #3
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7ff fadb 	bl	8005094 <LL_ADC_GetOffsetChannel>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10a      	bne.n	8005afe <HAL_ADC_ConfigChannel+0x3aa>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2103      	movs	r1, #3
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff fad0 	bl	8005094 <LL_ADC_GetOffsetChannel>
 8005af4:	4603      	mov	r3, r0
 8005af6:	0e9b      	lsrs	r3, r3, #26
 8005af8:	f003 021f 	and.w	r2, r3, #31
 8005afc:	e017      	b.n	8005b2e <HAL_ADC_ConfigChannel+0x3da>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2103      	movs	r1, #3
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7ff fac5 	bl	8005094 <LL_ADC_GetOffsetChannel>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b10:	fa93 f3a3 	rbit	r3, r3
 8005b14:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005b16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b18:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005b1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005b20:	2320      	movs	r3, #32
 8005b22:	e003      	b.n	8005b2c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005b24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b26:	fab3 f383 	clz	r3, r3
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d105      	bne.n	8005b46 <HAL_ADC_ConfigChannel+0x3f2>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	0e9b      	lsrs	r3, r3, #26
 8005b40:	f003 031f 	and.w	r3, r3, #31
 8005b44:	e011      	b.n	8005b6a <HAL_ADC_ConfigChannel+0x416>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b4e:	fa93 f3a3 	rbit	r3, r3
 8005b52:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005b54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b56:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005b58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005b5e:	2320      	movs	r3, #32
 8005b60:	e003      	b.n	8005b6a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005b62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b64:	fab3 f383 	clz	r3, r3
 8005b68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d106      	bne.n	8005b7c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2200      	movs	r2, #0
 8005b74:	2103      	movs	r1, #3
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff faa2 	bl	80050c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff fbdf 	bl	8005344 <LL_ADC_IsEnabled>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f040 813d 	bne.w	8005e08 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6818      	ldr	r0, [r3, #0]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	6819      	ldr	r1, [r3, #0]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f7ff fb4c 	bl	8005238 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	4aa2      	ldr	r2, [pc, #648]	@ (8005e30 <HAL_ADC_ConfigChannel+0x6dc>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	f040 812e 	bne.w	8005e08 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10b      	bne.n	8005bd4 <HAL_ADC_ConfigChannel+0x480>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	0e9b      	lsrs	r3, r3, #26
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	f003 031f 	and.w	r3, r3, #31
 8005bc8:	2b09      	cmp	r3, #9
 8005bca:	bf94      	ite	ls
 8005bcc:	2301      	movls	r3, #1
 8005bce:	2300      	movhi	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	e019      	b.n	8005c08 <HAL_ADC_ConfigChannel+0x4b4>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bdc:	fa93 f3a3 	rbit	r3, r3
 8005be0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005be2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005be4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005be6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005bec:	2320      	movs	r3, #32
 8005bee:	e003      	b.n	8005bf8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005bf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bf2:	fab3 f383 	clz	r3, r3
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	f003 031f 	and.w	r3, r3, #31
 8005bfe:	2b09      	cmp	r3, #9
 8005c00:	bf94      	ite	ls
 8005c02:	2301      	movls	r3, #1
 8005c04:	2300      	movhi	r3, #0
 8005c06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d079      	beq.n	8005d00 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d107      	bne.n	8005c28 <HAL_ADC_ConfigChannel+0x4d4>
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	0e9b      	lsrs	r3, r3, #26
 8005c1e:	3301      	adds	r3, #1
 8005c20:	069b      	lsls	r3, r3, #26
 8005c22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005c26:	e015      	b.n	8005c54 <HAL_ADC_ConfigChannel+0x500>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c30:	fa93 f3a3 	rbit	r3, r3
 8005c34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005c36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c38:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005c40:	2320      	movs	r3, #32
 8005c42:	e003      	b.n	8005c4c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c46:	fab3 f383 	clz	r3, r3
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	069b      	lsls	r3, r3, #26
 8005c50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d109      	bne.n	8005c74 <HAL_ADC_ConfigChannel+0x520>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	0e9b      	lsrs	r3, r3, #26
 8005c66:	3301      	adds	r3, #1
 8005c68:	f003 031f 	and.w	r3, r3, #31
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c72:	e017      	b.n	8005ca4 <HAL_ADC_ConfigChannel+0x550>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c7c:	fa93 f3a3 	rbit	r3, r3
 8005c80:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005c82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c84:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005c86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005c8c:	2320      	movs	r3, #32
 8005c8e:	e003      	b.n	8005c98 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005c90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c92:	fab3 f383 	clz	r3, r3
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	3301      	adds	r3, #1
 8005c9a:	f003 031f 	and.w	r3, r3, #31
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca4:	ea42 0103 	orr.w	r1, r2, r3
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10a      	bne.n	8005cca <HAL_ADC_ConfigChannel+0x576>
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	0e9b      	lsrs	r3, r3, #26
 8005cba:	3301      	adds	r3, #1
 8005cbc:	f003 021f 	and.w	r2, r3, #31
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	4413      	add	r3, r2
 8005cc6:	051b      	lsls	r3, r3, #20
 8005cc8:	e018      	b.n	8005cfc <HAL_ADC_ConfigChannel+0x5a8>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd2:	fa93 f3a3 	rbit	r3, r3
 8005cd6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005ce2:	2320      	movs	r3, #32
 8005ce4:	e003      	b.n	8005cee <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce8:	fab3 f383 	clz	r3, r3
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	3301      	adds	r3, #1
 8005cf0:	f003 021f 	and.w	r2, r3, #31
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	4413      	add	r3, r2
 8005cfa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	e07e      	b.n	8005dfe <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d107      	bne.n	8005d1c <HAL_ADC_ConfigChannel+0x5c8>
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	0e9b      	lsrs	r3, r3, #26
 8005d12:	3301      	adds	r3, #1
 8005d14:	069b      	lsls	r3, r3, #26
 8005d16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005d1a:	e015      	b.n	8005d48 <HAL_ADC_ConfigChannel+0x5f4>
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d24:	fa93 f3a3 	rbit	r3, r3
 8005d28:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005d34:	2320      	movs	r3, #32
 8005d36:	e003      	b.n	8005d40 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3a:	fab3 f383 	clz	r3, r3
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	3301      	adds	r3, #1
 8005d42:	069b      	lsls	r3, r3, #26
 8005d44:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d109      	bne.n	8005d68 <HAL_ADC_ConfigChannel+0x614>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	0e9b      	lsrs	r3, r3, #26
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	f003 031f 	and.w	r3, r3, #31
 8005d60:	2101      	movs	r1, #1
 8005d62:	fa01 f303 	lsl.w	r3, r1, r3
 8005d66:	e017      	b.n	8005d98 <HAL_ADC_ConfigChannel+0x644>
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	fa93 f3a3 	rbit	r3, r3
 8005d74:	61fb      	str	r3, [r7, #28]
  return result;
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005d80:	2320      	movs	r3, #32
 8005d82:	e003      	b.n	8005d8c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d86:	fab3 f383 	clz	r3, r3
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	f003 031f 	and.w	r3, r3, #31
 8005d92:	2101      	movs	r1, #1
 8005d94:	fa01 f303 	lsl.w	r3, r1, r3
 8005d98:	ea42 0103 	orr.w	r1, r2, r3
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10d      	bne.n	8005dc4 <HAL_ADC_ConfigChannel+0x670>
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	0e9b      	lsrs	r3, r3, #26
 8005dae:	3301      	adds	r3, #1
 8005db0:	f003 021f 	and.w	r2, r3, #31
 8005db4:	4613      	mov	r3, r2
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	4413      	add	r3, r2
 8005dba:	3b1e      	subs	r3, #30
 8005dbc:	051b      	lsls	r3, r3, #20
 8005dbe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005dc2:	e01b      	b.n	8005dfc <HAL_ADC_ConfigChannel+0x6a8>
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	fa93 f3a3 	rbit	r3, r3
 8005dd0:	613b      	str	r3, [r7, #16]
  return result;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d101      	bne.n	8005de0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005ddc:	2320      	movs	r3, #32
 8005dde:	e003      	b.n	8005de8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	fab3 f383 	clz	r3, r3
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	3301      	adds	r3, #1
 8005dea:	f003 021f 	and.w	r2, r3, #31
 8005dee:	4613      	mov	r3, r2
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	4413      	add	r3, r2
 8005df4:	3b1e      	subs	r3, #30
 8005df6:	051b      	lsls	r3, r3, #20
 8005df8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005dfc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e02:	4619      	mov	r1, r3
 8005e04:	f7ff f9ec 	bl	80051e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	4b09      	ldr	r3, [pc, #36]	@ (8005e34 <HAL_ADC_ConfigChannel+0x6e0>)
 8005e0e:	4013      	ands	r3, r2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 80be 	beq.w	8005f92 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e1e:	d004      	beq.n	8005e2a <HAL_ADC_ConfigChannel+0x6d6>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a04      	ldr	r2, [pc, #16]	@ (8005e38 <HAL_ADC_ConfigChannel+0x6e4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d10a      	bne.n	8005e40 <HAL_ADC_ConfigChannel+0x6ec>
 8005e2a:	4b04      	ldr	r3, [pc, #16]	@ (8005e3c <HAL_ADC_ConfigChannel+0x6e8>)
 8005e2c:	e009      	b.n	8005e42 <HAL_ADC_ConfigChannel+0x6ee>
 8005e2e:	bf00      	nop
 8005e30:	407f0000 	.word	0x407f0000
 8005e34:	80080000 	.word	0x80080000
 8005e38:	50000100 	.word	0x50000100
 8005e3c:	50000300 	.word	0x50000300
 8005e40:	4b59      	ldr	r3, [pc, #356]	@ (8005fa8 <HAL_ADC_ConfigChannel+0x854>)
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7ff f8f4 	bl	8005030 <LL_ADC_GetCommonPathInternalCh>
 8005e48:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a56      	ldr	r2, [pc, #344]	@ (8005fac <HAL_ADC_ConfigChannel+0x858>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d004      	beq.n	8005e60 <HAL_ADC_ConfigChannel+0x70c>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a55      	ldr	r2, [pc, #340]	@ (8005fb0 <HAL_ADC_ConfigChannel+0x85c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d13a      	bne.n	8005ed6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005e60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d134      	bne.n	8005ed6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e74:	d005      	beq.n	8005e82 <HAL_ADC_ConfigChannel+0x72e>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a4e      	ldr	r2, [pc, #312]	@ (8005fb4 <HAL_ADC_ConfigChannel+0x860>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	f040 8085 	bne.w	8005f8c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e8a:	d004      	beq.n	8005e96 <HAL_ADC_ConfigChannel+0x742>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a49      	ldr	r2, [pc, #292]	@ (8005fb8 <HAL_ADC_ConfigChannel+0x864>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d101      	bne.n	8005e9a <HAL_ADC_ConfigChannel+0x746>
 8005e96:	4a49      	ldr	r2, [pc, #292]	@ (8005fbc <HAL_ADC_ConfigChannel+0x868>)
 8005e98:	e000      	b.n	8005e9c <HAL_ADC_ConfigChannel+0x748>
 8005e9a:	4a43      	ldr	r2, [pc, #268]	@ (8005fa8 <HAL_ADC_ConfigChannel+0x854>)
 8005e9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ea0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	f7ff f8af 	bl	800500a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005eac:	4b44      	ldr	r3, [pc, #272]	@ (8005fc0 <HAL_ADC_ConfigChannel+0x86c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	099b      	lsrs	r3, r3, #6
 8005eb2:	4a44      	ldr	r2, [pc, #272]	@ (8005fc4 <HAL_ADC_ConfigChannel+0x870>)
 8005eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb8:	099b      	lsrs	r3, r3, #6
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	4413      	add	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005ec6:	e002      	b.n	8005ece <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1f9      	bne.n	8005ec8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ed4:	e05a      	b.n	8005f8c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a3b      	ldr	r2, [pc, #236]	@ (8005fc8 <HAL_ADC_ConfigChannel+0x874>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d125      	bne.n	8005f2c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005ee0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ee4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d11f      	bne.n	8005f2c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a31      	ldr	r2, [pc, #196]	@ (8005fb8 <HAL_ADC_ConfigChannel+0x864>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d104      	bne.n	8005f00 <HAL_ADC_ConfigChannel+0x7ac>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a34      	ldr	r2, [pc, #208]	@ (8005fcc <HAL_ADC_ConfigChannel+0x878>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d047      	beq.n	8005f90 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f08:	d004      	beq.n	8005f14 <HAL_ADC_ConfigChannel+0x7c0>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a2a      	ldr	r2, [pc, #168]	@ (8005fb8 <HAL_ADC_ConfigChannel+0x864>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d101      	bne.n	8005f18 <HAL_ADC_ConfigChannel+0x7c4>
 8005f14:	4a29      	ldr	r2, [pc, #164]	@ (8005fbc <HAL_ADC_ConfigChannel+0x868>)
 8005f16:	e000      	b.n	8005f1a <HAL_ADC_ConfigChannel+0x7c6>
 8005f18:	4a23      	ldr	r2, [pc, #140]	@ (8005fa8 <HAL_ADC_ConfigChannel+0x854>)
 8005f1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f22:	4619      	mov	r1, r3
 8005f24:	4610      	mov	r0, r2
 8005f26:	f7ff f870 	bl	800500a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005f2a:	e031      	b.n	8005f90 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a27      	ldr	r2, [pc, #156]	@ (8005fd0 <HAL_ADC_ConfigChannel+0x87c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d12d      	bne.n	8005f92 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005f36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d127      	bne.n	8005f92 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a1c      	ldr	r2, [pc, #112]	@ (8005fb8 <HAL_ADC_ConfigChannel+0x864>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d022      	beq.n	8005f92 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f54:	d004      	beq.n	8005f60 <HAL_ADC_ConfigChannel+0x80c>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a17      	ldr	r2, [pc, #92]	@ (8005fb8 <HAL_ADC_ConfigChannel+0x864>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d101      	bne.n	8005f64 <HAL_ADC_ConfigChannel+0x810>
 8005f60:	4a16      	ldr	r2, [pc, #88]	@ (8005fbc <HAL_ADC_ConfigChannel+0x868>)
 8005f62:	e000      	b.n	8005f66 <HAL_ADC_ConfigChannel+0x812>
 8005f64:	4a10      	ldr	r2, [pc, #64]	@ (8005fa8 <HAL_ADC_ConfigChannel+0x854>)
 8005f66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f6a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4610      	mov	r0, r2
 8005f72:	f7ff f84a 	bl	800500a <LL_ADC_SetCommonPathInternalCh>
 8005f76:	e00c      	b.n	8005f92 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f7c:	f043 0220 	orr.w	r2, r3, #32
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005f8a:	e002      	b.n	8005f92 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005f8c:	bf00      	nop
 8005f8e:	e000      	b.n	8005f92 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005f90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005f9a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	37d8      	adds	r7, #216	@ 0xd8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	50000700 	.word	0x50000700
 8005fac:	c3210000 	.word	0xc3210000
 8005fb0:	90c00010 	.word	0x90c00010
 8005fb4:	50000600 	.word	0x50000600
 8005fb8:	50000100 	.word	0x50000100
 8005fbc:	50000300 	.word	0x50000300
 8005fc0:	20000004 	.word	0x20000004
 8005fc4:	053e2d63 	.word	0x053e2d63
 8005fc8:	c7520000 	.word	0xc7520000
 8005fcc:	50000500 	.word	0x50000500
 8005fd0:	cb840000 	.word	0xcb840000

08005fd4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff f9c2 	bl	800536a <LL_ADC_IsDisableOngoing>
 8005fe6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7ff f9a9 	bl	8005344 <LL_ADC_IsEnabled>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d047      	beq.n	8006088 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d144      	bne.n	8006088 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 030d 	and.w	r3, r3, #13
 8006008:	2b01      	cmp	r3, #1
 800600a:	d10c      	bne.n	8006026 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4618      	mov	r0, r3
 8006012:	f7ff f983 	bl	800531c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2203      	movs	r2, #3
 800601c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800601e:	f7fe ffd5 	bl	8004fcc <HAL_GetTick>
 8006022:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006024:	e029      	b.n	800607a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800602a:	f043 0210 	orr.w	r2, r3, #16
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006036:	f043 0201 	orr.w	r2, r3, #1
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e023      	b.n	800608a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006042:	f7fe ffc3 	bl	8004fcc <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d914      	bls.n	800607a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00d      	beq.n	800607a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006062:	f043 0210 	orr.w	r2, r3, #16
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800606e:	f043 0201 	orr.w	r2, r3, #1
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e007      	b.n	800608a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1dc      	bne.n	8006042 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <LL_ADC_IsEnabled>:
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d101      	bne.n	80060aa <LL_ADC_IsEnabled+0x18>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <LL_ADC_IsEnabled+0x1a>
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <LL_ADC_StartCalibration>:
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80060ca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80060d4:	4313      	orrs	r3, r2
 80060d6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	609a      	str	r2, [r3, #8]
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <LL_ADC_IsCalibrationOnGoing>:
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060fe:	d101      	bne.n	8006104 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006100:	2301      	movs	r3, #1
 8006102:	e000      	b.n	8006106 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <LL_ADC_REG_IsConversionOngoing>:
{
 8006112:	b480      	push	{r7}
 8006114:	b083      	sub	sp, #12
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 0304 	and.w	r3, r3, #4
 8006122:	2b04      	cmp	r3, #4
 8006124:	d101      	bne.n	800612a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006126:	2301      	movs	r3, #1
 8006128:	e000      	b.n	800612c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006142:	2300      	movs	r3, #0
 8006144:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800614c:	2b01      	cmp	r3, #1
 800614e:	d101      	bne.n	8006154 <HAL_ADCEx_Calibration_Start+0x1c>
 8006150:	2302      	movs	r3, #2
 8006152:	e04d      	b.n	80061f0 <HAL_ADCEx_Calibration_Start+0xb8>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff ff39 	bl	8005fd4 <ADC_Disable>
 8006162:	4603      	mov	r3, r0
 8006164:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006166:	7bfb      	ldrb	r3, [r7, #15]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d136      	bne.n	80061da <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006170:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006174:	f023 0302 	bic.w	r3, r3, #2
 8006178:	f043 0202 	orr.w	r2, r3, #2
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff ff96 	bl	80060b8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800618c:	e014      	b.n	80061b8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	3301      	adds	r3, #1
 8006192:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	4a18      	ldr	r2, [pc, #96]	@ (80061f8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d90d      	bls.n	80061b8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061a0:	f023 0312 	bic.w	r3, r3, #18
 80061a4:	f043 0210 	orr.w	r2, r3, #16
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e01b      	b.n	80061f0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4618      	mov	r0, r3
 80061be:	f7ff ff94 	bl	80060ea <LL_ADC_IsCalibrationOnGoing>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e2      	bne.n	800618e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061cc:	f023 0303 	bic.w	r3, r3, #3
 80061d0:	f043 0201 	orr.w	r2, r3, #1
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80061d8:	e005      	b.n	80061e6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061de:	f043 0210 	orr.w	r2, r3, #16
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	0004de01 	.word	0x0004de01

080061fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80061fc:	b590      	push	{r4, r7, lr}
 80061fe:	b0a1      	sub	sp, #132	@ 0x84
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006212:	2b01      	cmp	r3, #1
 8006214:	d101      	bne.n	800621a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006216:	2302      	movs	r3, #2
 8006218:	e0e7      	b.n	80063ea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006222:	2300      	movs	r3, #0
 8006224:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006226:	2300      	movs	r3, #0
 8006228:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006232:	d102      	bne.n	800623a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006234:	4b6f      	ldr	r3, [pc, #444]	@ (80063f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006236:	60bb      	str	r3, [r7, #8]
 8006238:	e009      	b.n	800624e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a6e      	ldr	r2, [pc, #440]	@ (80063f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d102      	bne.n	800624a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006244:	4b6d      	ldr	r3, [pc, #436]	@ (80063fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006246:	60bb      	str	r3, [r7, #8]
 8006248:	e001      	b.n	800624e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800624a:	2300      	movs	r3, #0
 800624c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10b      	bne.n	800626c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006258:	f043 0220 	orr.w	r2, r3, #32
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e0be      	b.n	80063ea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff ff4f 	bl	8006112 <LL_ADC_REG_IsConversionOngoing>
 8006274:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff ff49 	bl	8006112 <LL_ADC_REG_IsConversionOngoing>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	f040 80a0 	bne.w	80063c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006288:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800628a:	2b00      	cmp	r3, #0
 800628c:	f040 809c 	bne.w	80063c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006298:	d004      	beq.n	80062a4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a55      	ldr	r2, [pc, #340]	@ (80063f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d101      	bne.n	80062a8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80062a4:	4b56      	ldr	r3, [pc, #344]	@ (8006400 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80062a6:	e000      	b.n	80062aa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80062a8:	4b56      	ldr	r3, [pc, #344]	@ (8006404 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80062aa:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d04b      	beq.n	800634c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80062b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	6859      	ldr	r1, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80062c6:	035b      	lsls	r3, r3, #13
 80062c8:	430b      	orrs	r3, r1
 80062ca:	431a      	orrs	r2, r3
 80062cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062d8:	d004      	beq.n	80062e4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a45      	ldr	r2, [pc, #276]	@ (80063f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d10f      	bne.n	8006304 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80062e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80062e8:	f7ff fed3 	bl	8006092 <LL_ADC_IsEnabled>
 80062ec:	4604      	mov	r4, r0
 80062ee:	4841      	ldr	r0, [pc, #260]	@ (80063f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80062f0:	f7ff fecf 	bl	8006092 <LL_ADC_IsEnabled>
 80062f4:	4603      	mov	r3, r0
 80062f6:	4323      	orrs	r3, r4
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	bf0c      	ite	eq
 80062fc:	2301      	moveq	r3, #1
 80062fe:	2300      	movne	r3, #0
 8006300:	b2db      	uxtb	r3, r3
 8006302:	e012      	b.n	800632a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006304:	483c      	ldr	r0, [pc, #240]	@ (80063f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006306:	f7ff fec4 	bl	8006092 <LL_ADC_IsEnabled>
 800630a:	4604      	mov	r4, r0
 800630c:	483b      	ldr	r0, [pc, #236]	@ (80063fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800630e:	f7ff fec0 	bl	8006092 <LL_ADC_IsEnabled>
 8006312:	4603      	mov	r3, r0
 8006314:	431c      	orrs	r4, r3
 8006316:	483c      	ldr	r0, [pc, #240]	@ (8006408 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006318:	f7ff febb 	bl	8006092 <LL_ADC_IsEnabled>
 800631c:	4603      	mov	r3, r0
 800631e:	4323      	orrs	r3, r4
 8006320:	2b00      	cmp	r3, #0
 8006322:	bf0c      	ite	eq
 8006324:	2301      	moveq	r3, #1
 8006326:	2300      	movne	r3, #0
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d056      	beq.n	80063dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800632e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006336:	f023 030f 	bic.w	r3, r3, #15
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	6811      	ldr	r1, [r2, #0]
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	6892      	ldr	r2, [r2, #8]
 8006342:	430a      	orrs	r2, r1
 8006344:	431a      	orrs	r2, r3
 8006346:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006348:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800634a:	e047      	b.n	80063dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800634c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006354:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006356:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006360:	d004      	beq.n	800636c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a23      	ldr	r2, [pc, #140]	@ (80063f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d10f      	bne.n	800638c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800636c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006370:	f7ff fe8f 	bl	8006092 <LL_ADC_IsEnabled>
 8006374:	4604      	mov	r4, r0
 8006376:	481f      	ldr	r0, [pc, #124]	@ (80063f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006378:	f7ff fe8b 	bl	8006092 <LL_ADC_IsEnabled>
 800637c:	4603      	mov	r3, r0
 800637e:	4323      	orrs	r3, r4
 8006380:	2b00      	cmp	r3, #0
 8006382:	bf0c      	ite	eq
 8006384:	2301      	moveq	r3, #1
 8006386:	2300      	movne	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	e012      	b.n	80063b2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800638c:	481a      	ldr	r0, [pc, #104]	@ (80063f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800638e:	f7ff fe80 	bl	8006092 <LL_ADC_IsEnabled>
 8006392:	4604      	mov	r4, r0
 8006394:	4819      	ldr	r0, [pc, #100]	@ (80063fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006396:	f7ff fe7c 	bl	8006092 <LL_ADC_IsEnabled>
 800639a:	4603      	mov	r3, r0
 800639c:	431c      	orrs	r4, r3
 800639e:	481a      	ldr	r0, [pc, #104]	@ (8006408 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80063a0:	f7ff fe77 	bl	8006092 <LL_ADC_IsEnabled>
 80063a4:	4603      	mov	r3, r0
 80063a6:	4323      	orrs	r3, r4
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	bf0c      	ite	eq
 80063ac:	2301      	moveq	r3, #1
 80063ae:	2300      	movne	r3, #0
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d012      	beq.n	80063dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80063b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80063be:	f023 030f 	bic.w	r3, r3, #15
 80063c2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80063c4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80063c6:	e009      	b.n	80063dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063cc:	f043 0220 	orr.w	r2, r3, #32
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80063da:	e000      	b.n	80063de <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80063dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80063e6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3784      	adds	r7, #132	@ 0x84
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd90      	pop	{r4, r7, pc}
 80063f2:	bf00      	nop
 80063f4:	50000100 	.word	0x50000100
 80063f8:	50000400 	.word	0x50000400
 80063fc:	50000500 	.word	0x50000500
 8006400:	50000300 	.word	0x50000300
 8006404:	50000700 	.word	0x50000700
 8006408:	50000600 	.word	0x50000600

0800640c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f003 0307 	and.w	r3, r3, #7
 800641a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800641c:	4b0c      	ldr	r3, [pc, #48]	@ (8006450 <__NVIC_SetPriorityGrouping+0x44>)
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006428:	4013      	ands	r3, r2
 800642a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006434:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800643c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800643e:	4a04      	ldr	r2, [pc, #16]	@ (8006450 <__NVIC_SetPriorityGrouping+0x44>)
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	60d3      	str	r3, [r2, #12]
}
 8006444:	bf00      	nop
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	e000ed00 	.word	0xe000ed00

08006454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006454:	b480      	push	{r7}
 8006456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006458:	4b04      	ldr	r3, [pc, #16]	@ (800646c <__NVIC_GetPriorityGrouping+0x18>)
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	0a1b      	lsrs	r3, r3, #8
 800645e:	f003 0307 	and.w	r3, r3, #7
}
 8006462:	4618      	mov	r0, r3
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	e000ed00 	.word	0xe000ed00

08006470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	4603      	mov	r3, r0
 8006478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800647a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800647e:	2b00      	cmp	r3, #0
 8006480:	db0b      	blt.n	800649a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006482:	79fb      	ldrb	r3, [r7, #7]
 8006484:	f003 021f 	and.w	r2, r3, #31
 8006488:	4907      	ldr	r1, [pc, #28]	@ (80064a8 <__NVIC_EnableIRQ+0x38>)
 800648a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800648e:	095b      	lsrs	r3, r3, #5
 8006490:	2001      	movs	r0, #1
 8006492:	fa00 f202 	lsl.w	r2, r0, r2
 8006496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	e000e100 	.word	0xe000e100

080064ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	4603      	mov	r3, r0
 80064b4:	6039      	str	r1, [r7, #0]
 80064b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	db0a      	blt.n	80064d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	490c      	ldr	r1, [pc, #48]	@ (80064f8 <__NVIC_SetPriority+0x4c>)
 80064c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ca:	0112      	lsls	r2, r2, #4
 80064cc:	b2d2      	uxtb	r2, r2
 80064ce:	440b      	add	r3, r1
 80064d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80064d4:	e00a      	b.n	80064ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	4908      	ldr	r1, [pc, #32]	@ (80064fc <__NVIC_SetPriority+0x50>)
 80064dc:	79fb      	ldrb	r3, [r7, #7]
 80064de:	f003 030f 	and.w	r3, r3, #15
 80064e2:	3b04      	subs	r3, #4
 80064e4:	0112      	lsls	r2, r2, #4
 80064e6:	b2d2      	uxtb	r2, r2
 80064e8:	440b      	add	r3, r1
 80064ea:	761a      	strb	r2, [r3, #24]
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	e000e100 	.word	0xe000e100
 80064fc:	e000ed00 	.word	0xe000ed00

08006500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006500:	b480      	push	{r7}
 8006502:	b089      	sub	sp, #36	@ 0x24
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f003 0307 	and.w	r3, r3, #7
 8006512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	f1c3 0307 	rsb	r3, r3, #7
 800651a:	2b04      	cmp	r3, #4
 800651c:	bf28      	it	cs
 800651e:	2304      	movcs	r3, #4
 8006520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	3304      	adds	r3, #4
 8006526:	2b06      	cmp	r3, #6
 8006528:	d902      	bls.n	8006530 <NVIC_EncodePriority+0x30>
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	3b03      	subs	r3, #3
 800652e:	e000      	b.n	8006532 <NVIC_EncodePriority+0x32>
 8006530:	2300      	movs	r3, #0
 8006532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006534:	f04f 32ff 	mov.w	r2, #4294967295
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	fa02 f303 	lsl.w	r3, r2, r3
 800653e:	43da      	mvns	r2, r3
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	401a      	ands	r2, r3
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006548:	f04f 31ff 	mov.w	r1, #4294967295
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	fa01 f303 	lsl.w	r3, r1, r3
 8006552:	43d9      	mvns	r1, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006558:	4313      	orrs	r3, r2
         );
}
 800655a:	4618      	mov	r0, r3
 800655c:	3724      	adds	r7, #36	@ 0x24
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
	...

08006568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	3b01      	subs	r3, #1
 8006574:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006578:	d301      	bcc.n	800657e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800657a:	2301      	movs	r3, #1
 800657c:	e00f      	b.n	800659e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800657e:	4a0a      	ldr	r2, [pc, #40]	@ (80065a8 <SysTick_Config+0x40>)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3b01      	subs	r3, #1
 8006584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006586:	210f      	movs	r1, #15
 8006588:	f04f 30ff 	mov.w	r0, #4294967295
 800658c:	f7ff ff8e 	bl	80064ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006590:	4b05      	ldr	r3, [pc, #20]	@ (80065a8 <SysTick_Config+0x40>)
 8006592:	2200      	movs	r2, #0
 8006594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006596:	4b04      	ldr	r3, [pc, #16]	@ (80065a8 <SysTick_Config+0x40>)
 8006598:	2207      	movs	r2, #7
 800659a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	e000e010 	.word	0xe000e010

080065ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7ff ff29 	bl	800640c <__NVIC_SetPriorityGrouping>
}
 80065ba:	bf00      	nop
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b086      	sub	sp, #24
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	4603      	mov	r3, r0
 80065ca:	60b9      	str	r1, [r7, #8]
 80065cc:	607a      	str	r2, [r7, #4]
 80065ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80065d0:	f7ff ff40 	bl	8006454 <__NVIC_GetPriorityGrouping>
 80065d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	68b9      	ldr	r1, [r7, #8]
 80065da:	6978      	ldr	r0, [r7, #20]
 80065dc:	f7ff ff90 	bl	8006500 <NVIC_EncodePriority>
 80065e0:	4602      	mov	r2, r0
 80065e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065e6:	4611      	mov	r1, r2
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7ff ff5f 	bl	80064ac <__NVIC_SetPriority>
}
 80065ee:	bf00      	nop
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b082      	sub	sp, #8
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	4603      	mov	r3, r0
 80065fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006604:	4618      	mov	r0, r3
 8006606:	f7ff ff33 	bl	8006470 <__NVIC_EnableIRQ>
}
 800660a:	bf00      	nop
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b082      	sub	sp, #8
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7ff ffa4 	bl	8006568 <SysTick_Config>
 8006620:	4603      	mov	r3, r0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b082      	sub	sp, #8
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e014      	b.n	8006666 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	791b      	ldrb	r3, [r3, #4]
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d105      	bne.n	8006652 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7fd ff99 	bl	8004584 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2202      	movs	r2, #2
 8006656:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e056      	b.n	8006732 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	795b      	ldrb	r3, [r3, #5]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d101      	bne.n	8006690 <HAL_DAC_Start+0x20>
 800668c:	2302      	movs	r3, #2
 800668e:	e050      	b.n	8006732 <HAL_DAC_Start+0xc2>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2202      	movs	r2, #2
 800669a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6819      	ldr	r1, [r3, #0]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	f003 0310 	and.w	r3, r3, #16
 80066a8:	2201      	movs	r2, #1
 80066aa:	409a      	lsls	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80066b4:	4b22      	ldr	r3, [pc, #136]	@ (8006740 <HAL_DAC_Start+0xd0>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	099b      	lsrs	r3, r3, #6
 80066ba:	4a22      	ldr	r2, [pc, #136]	@ (8006744 <HAL_DAC_Start+0xd4>)
 80066bc:	fba2 2303 	umull	r2, r3, r2, r3
 80066c0:	099b      	lsrs	r3, r3, #6
 80066c2:	3301      	adds	r3, #1
 80066c4:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80066c6:	e002      	b.n	80066ce <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	3b01      	subs	r3, #1
 80066cc:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1f9      	bne.n	80066c8 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10f      	bne.n	80066fa <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d11d      	bne.n	8006724 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f042 0201 	orr.w	r2, r2, #1
 80066f6:	605a      	str	r2, [r3, #4]
 80066f8:	e014      	b.n	8006724 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	f003 0310 	and.w	r3, r3, #16
 800670a:	2102      	movs	r1, #2
 800670c:	fa01 f303 	lsl.w	r3, r1, r3
 8006710:	429a      	cmp	r2, r3
 8006712:	d107      	bne.n	8006724 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f042 0202 	orr.w	r2, r2, #2
 8006722:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	20000004 	.word	0x20000004
 8006744:	053e2d63 	.word	0x053e2d63

08006748 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8006756:	2300      	movs	r3, #0
 8006758:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e018      	b.n	8006796 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d105      	bne.n	8006782 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4413      	add	r3, r2
 800677c:	3308      	adds	r3, #8
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	e004      	b.n	800678c <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4413      	add	r3, r2
 8006788:	3314      	adds	r3, #20
 800678a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	461a      	mov	r2, r3
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
	...

080067a4 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08a      	sub	sp, #40	@ 0x28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d002      	beq.n	80067c0 <HAL_DAC_ConfigChannel+0x1c>
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e1a1      	b.n	8006b08 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	795b      	ldrb	r3, [r3, #5]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d101      	bne.n	80067d6 <HAL_DAC_ConfigChannel+0x32>
 80067d2:	2302      	movs	r3, #2
 80067d4:	e198      	b.n	8006b08 <HAL_DAC_ConfigChannel+0x364>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2201      	movs	r2, #1
 80067da:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2202      	movs	r2, #2
 80067e0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	d17a      	bne.n	80068e0 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80067ea:	f7fe fbef 	bl	8004fcc <HAL_GetTick>
 80067ee:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d13d      	bne.n	8006872 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80067f6:	e018      	b.n	800682a <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80067f8:	f7fe fbe8 	bl	8004fcc <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b01      	cmp	r3, #1
 8006804:	d911      	bls.n	800682a <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800680c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00a      	beq.n	800682a <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	f043 0208 	orr.w	r2, r3, #8
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2203      	movs	r2, #3
 8006824:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e16e      	b.n	8006b08 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006830:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1df      	bne.n	80067f8 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006840:	641a      	str	r2, [r3, #64]	@ 0x40
 8006842:	e020      	b.n	8006886 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006844:	f7fe fbc2 	bl	8004fcc <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b01      	cmp	r3, #1
 8006850:	d90f      	bls.n	8006872 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006858:	2b00      	cmp	r3, #0
 800685a:	da0a      	bge.n	8006872 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	f043 0208 	orr.w	r2, r3, #8
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2203      	movs	r2, #3
 800686c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e14a      	b.n	8006b08 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006878:	2b00      	cmp	r3, #0
 800687a:	dbe3      	blt.n	8006844 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006884:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f003 0310 	and.w	r3, r3, #16
 8006892:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8006896:	fa01 f303 	lsl.w	r3, r1, r3
 800689a:	43db      	mvns	r3, r3
 800689c:	ea02 0103 	and.w	r1, r2, r3
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f003 0310 	and.w	r3, r3, #16
 80068aa:	409a      	lsls	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f003 0310 	and.w	r3, r3, #16
 80068c0:	21ff      	movs	r1, #255	@ 0xff
 80068c2:	fa01 f303 	lsl.w	r3, r1, r3
 80068c6:	43db      	mvns	r3, r3
 80068c8:	ea02 0103 	and.w	r1, r2, r3
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f003 0310 	and.w	r3, r3, #16
 80068d6:	409a      	lsls	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	430a      	orrs	r2, r1
 80068de:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d11d      	bne.n	8006924 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ee:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f003 0310 	and.w	r3, r3, #16
 80068f6:	221f      	movs	r2, #31
 80068f8:	fa02 f303 	lsl.w	r3, r2, r3
 80068fc:	43db      	mvns	r3, r3
 80068fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006900:	4013      	ands	r3, r2
 8006902:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f003 0310 	and.w	r3, r3, #16
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	fa02 f303 	lsl.w	r3, r2, r3
 8006916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006918:	4313      	orrs	r3, r2
 800691a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006922:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800692a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f003 0310 	and.w	r3, r3, #16
 8006932:	2207      	movs	r2, #7
 8006934:	fa02 f303 	lsl.w	r3, r2, r3
 8006938:	43db      	mvns	r3, r3
 800693a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800693c:	4013      	ands	r3, r2
 800693e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d102      	bne.n	800694e <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8006948:	2300      	movs	r3, #0
 800694a:	623b      	str	r3, [r7, #32]
 800694c:	e00f      	b.n	800696e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	2b02      	cmp	r3, #2
 8006954:	d102      	bne.n	800695c <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006956:	2301      	movs	r3, #1
 8006958:	623b      	str	r3, [r7, #32]
 800695a:	e008      	b.n	800696e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d102      	bne.n	800696a <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006964:	2301      	movs	r3, #1
 8006966:	623b      	str	r3, [r7, #32]
 8006968:	e001      	b.n	800696e <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800696a:	2300      	movs	r3, #0
 800696c:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	689a      	ldr	r2, [r3, #8]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	4313      	orrs	r3, r2
 8006978:	6a3a      	ldr	r2, [r7, #32]
 800697a:	4313      	orrs	r3, r2
 800697c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f003 0310 	and.w	r3, r3, #16
 8006984:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006988:	fa02 f303 	lsl.w	r3, r2, r3
 800698c:	43db      	mvns	r3, r3
 800698e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006990:	4013      	ands	r3, r2
 8006992:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	791b      	ldrb	r3, [r3, #4]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d102      	bne.n	80069a2 <HAL_DAC_ConfigChannel+0x1fe>
 800699c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80069a0:	e000      	b.n	80069a4 <HAL_DAC_ConfigChannel+0x200>
 80069a2:	2300      	movs	r3, #0
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f003 0310 	and.w	r3, r3, #16
 80069b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069b4:	fa02 f303 	lsl.w	r3, r2, r3
 80069b8:	43db      	mvns	r3, r3
 80069ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069bc:	4013      	ands	r3, r2
 80069be:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	795b      	ldrb	r3, [r3, #5]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d102      	bne.n	80069ce <HAL_DAC_ConfigChannel+0x22a>
 80069c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069cc:	e000      	b.n	80069d0 <HAL_DAC_ConfigChannel+0x22c>
 80069ce:	2300      	movs	r3, #0
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80069d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80069dc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d114      	bne.n	8006a10 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80069e6:	f001 fa89 	bl	8007efc <HAL_RCC_GetHCLKFreq>
 80069ea:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	4a48      	ldr	r2, [pc, #288]	@ (8006b10 <HAL_DAC_ConfigChannel+0x36c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d904      	bls.n	80069fe <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80069f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80069fc:	e00f      	b.n	8006a1e <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	4a44      	ldr	r2, [pc, #272]	@ (8006b14 <HAL_DAC_ConfigChannel+0x370>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d90a      	bls.n	8006a1c <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a0e:	e006      	b.n	8006a1e <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a16:	4313      	orrs	r3, r2
 8006a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a1a:	e000      	b.n	8006a1e <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8006a1c:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f003 0310 	and.w	r3, r3, #16
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a36:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6819      	ldr	r1, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f003 0310 	and.w	r3, r3, #16
 8006a44:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006a48:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4c:	43da      	mvns	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	400a      	ands	r2, r1
 8006a54:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f003 0310 	and.w	r3, r3, #16
 8006a64:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8006a68:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6c:	43db      	mvns	r3, r3
 8006a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a70:	4013      	ands	r3, r2
 8006a72:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f003 0310 	and.w	r3, r3, #16
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	fa02 f303 	lsl.w	r3, r2, r3
 8006a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a92:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6819      	ldr	r1, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f003 0310 	and.w	r3, r3, #16
 8006aa0:	22c0      	movs	r2, #192	@ 0xc0
 8006aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa6:	43da      	mvns	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	400a      	ands	r2, r1
 8006aae:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	089b      	lsrs	r3, r3, #2
 8006ab6:	f003 030f 	and.w	r3, r3, #15
 8006aba:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	089b      	lsrs	r3, r3, #2
 8006ac2:	021b      	lsls	r3, r3, #8
 8006ac4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f003 0310 	and.w	r3, r3, #16
 8006ada:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8006ade:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae2:	43db      	mvns	r3, r3
 8006ae4:	ea02 0103 	and.w	r1, r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f003 0310 	and.w	r3, r3, #16
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	409a      	lsls	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2201      	movs	r2, #1
 8006afe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006b06:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3728      	adds	r7, #40	@ 0x28
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	09896800 	.word	0x09896800
 8006b14:	04c4b400 	.word	0x04c4b400

08006b18 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b20:	2300      	movs	r3, #0
 8006b22:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d005      	beq.n	8006b3c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2204      	movs	r2, #4
 8006b34:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	73fb      	strb	r3, [r7, #15]
 8006b3a:	e037      	b.n	8006bac <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 020e 	bic.w	r2, r2, #14
 8006b4a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b5a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 0201 	bic.w	r2, r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b70:	f003 021f 	and.w	r2, r3, #31
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b78:	2101      	movs	r1, #1
 8006b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8006b7e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006b88:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00c      	beq.n	8006bac <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ba0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006baa:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b084      	sub	sp, #16
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d00d      	beq.n	8006bfe <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2204      	movs	r2, #4
 8006be6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	73fb      	strb	r3, [r7, #15]
 8006bfc:	e047      	b.n	8006c8e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f022 020e 	bic.w	r2, r2, #14
 8006c0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0201 	bic.w	r2, r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c32:	f003 021f 	and.w	r2, r3, #31
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8006c40:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006c4a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00c      	beq.n	8006c6e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c5e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006c6c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	4798      	blx	r3
    }
  }
  return status;
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006ca6:	e15a      	b.n	8006f5e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	2101      	movs	r1, #1
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 814c 	beq.w	8006f58 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f003 0303 	and.w	r3, r3, #3
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d005      	beq.n	8006cd8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d130      	bne.n	8006d3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	2203      	movs	r2, #3
 8006ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce8:	43db      	mvns	r3, r3
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	4013      	ands	r3, r2
 8006cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	68da      	ldr	r2, [r3, #12]
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006d0e:	2201      	movs	r2, #1
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	fa02 f303 	lsl.w	r3, r2, r3
 8006d16:	43db      	mvns	r3, r3
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	091b      	lsrs	r3, r3, #4
 8006d24:	f003 0201 	and.w	r2, r3, #1
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f003 0303 	and.w	r3, r3, #3
 8006d42:	2b03      	cmp	r3, #3
 8006d44:	d017      	beq.n	8006d76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	005b      	lsls	r3, r3, #1
 8006d50:	2203      	movs	r2, #3
 8006d52:	fa02 f303 	lsl.w	r3, r2, r3
 8006d56:	43db      	mvns	r3, r3
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	689a      	ldr	r2, [r3, #8]
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	005b      	lsls	r3, r3, #1
 8006d66:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f003 0303 	and.w	r3, r3, #3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d123      	bne.n	8006dca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	08da      	lsrs	r2, r3, #3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3208      	adds	r2, #8
 8006d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f003 0307 	and.w	r3, r3, #7
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	220f      	movs	r2, #15
 8006d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9e:	43db      	mvns	r3, r3
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	4013      	ands	r3, r2
 8006da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	691a      	ldr	r2, [r3, #16]
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f003 0307 	and.w	r3, r3, #7
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	fa02 f303 	lsl.w	r3, r2, r3
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	08da      	lsrs	r2, r3, #3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3208      	adds	r2, #8
 8006dc4:	6939      	ldr	r1, [r7, #16]
 8006dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	005b      	lsls	r3, r3, #1
 8006dd4:	2203      	movs	r2, #3
 8006dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dda:	43db      	mvns	r3, r3
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	4013      	ands	r3, r2
 8006de0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f003 0203 	and.w	r2, r3, #3
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	fa02 f303 	lsl.w	r3, r2, r3
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f000 80a6 	beq.w	8006f58 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e0c:	4b5b      	ldr	r3, [pc, #364]	@ (8006f7c <HAL_GPIO_Init+0x2e4>)
 8006e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e10:	4a5a      	ldr	r2, [pc, #360]	@ (8006f7c <HAL_GPIO_Init+0x2e4>)
 8006e12:	f043 0301 	orr.w	r3, r3, #1
 8006e16:	6613      	str	r3, [r2, #96]	@ 0x60
 8006e18:	4b58      	ldr	r3, [pc, #352]	@ (8006f7c <HAL_GPIO_Init+0x2e4>)
 8006e1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	60bb      	str	r3, [r7, #8]
 8006e22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e24:	4a56      	ldr	r2, [pc, #344]	@ (8006f80 <HAL_GPIO_Init+0x2e8>)
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	089b      	lsrs	r3, r3, #2
 8006e2a:	3302      	adds	r3, #2
 8006e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f003 0303 	and.w	r3, r3, #3
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	220f      	movs	r2, #15
 8006e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e40:	43db      	mvns	r3, r3
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	4013      	ands	r3, r2
 8006e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006e4e:	d01f      	beq.n	8006e90 <HAL_GPIO_Init+0x1f8>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a4c      	ldr	r2, [pc, #304]	@ (8006f84 <HAL_GPIO_Init+0x2ec>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d019      	beq.n	8006e8c <HAL_GPIO_Init+0x1f4>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a4b      	ldr	r2, [pc, #300]	@ (8006f88 <HAL_GPIO_Init+0x2f0>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d013      	beq.n	8006e88 <HAL_GPIO_Init+0x1f0>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a4a      	ldr	r2, [pc, #296]	@ (8006f8c <HAL_GPIO_Init+0x2f4>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00d      	beq.n	8006e84 <HAL_GPIO_Init+0x1ec>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a49      	ldr	r2, [pc, #292]	@ (8006f90 <HAL_GPIO_Init+0x2f8>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d007      	beq.n	8006e80 <HAL_GPIO_Init+0x1e8>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a48      	ldr	r2, [pc, #288]	@ (8006f94 <HAL_GPIO_Init+0x2fc>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d101      	bne.n	8006e7c <HAL_GPIO_Init+0x1e4>
 8006e78:	2305      	movs	r3, #5
 8006e7a:	e00a      	b.n	8006e92 <HAL_GPIO_Init+0x1fa>
 8006e7c:	2306      	movs	r3, #6
 8006e7e:	e008      	b.n	8006e92 <HAL_GPIO_Init+0x1fa>
 8006e80:	2304      	movs	r3, #4
 8006e82:	e006      	b.n	8006e92 <HAL_GPIO_Init+0x1fa>
 8006e84:	2303      	movs	r3, #3
 8006e86:	e004      	b.n	8006e92 <HAL_GPIO_Init+0x1fa>
 8006e88:	2302      	movs	r3, #2
 8006e8a:	e002      	b.n	8006e92 <HAL_GPIO_Init+0x1fa>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e000      	b.n	8006e92 <HAL_GPIO_Init+0x1fa>
 8006e90:	2300      	movs	r3, #0
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	f002 0203 	and.w	r2, r2, #3
 8006e98:	0092      	lsls	r2, r2, #2
 8006e9a:	4093      	lsls	r3, r2
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ea2:	4937      	ldr	r1, [pc, #220]	@ (8006f80 <HAL_GPIO_Init+0x2e8>)
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	089b      	lsrs	r3, r3, #2
 8006ea8:	3302      	adds	r3, #2
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006eb0:	4b39      	ldr	r3, [pc, #228]	@ (8006f98 <HAL_GPIO_Init+0x300>)
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	43db      	mvns	r3, r3
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006ed4:	4a30      	ldr	r2, [pc, #192]	@ (8006f98 <HAL_GPIO_Init+0x300>)
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006eda:	4b2f      	ldr	r3, [pc, #188]	@ (8006f98 <HAL_GPIO_Init+0x300>)
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	43db      	mvns	r3, r3
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006efe:	4a26      	ldr	r2, [pc, #152]	@ (8006f98 <HAL_GPIO_Init+0x300>)
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006f04:	4b24      	ldr	r3, [pc, #144]	@ (8006f98 <HAL_GPIO_Init+0x300>)
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	43db      	mvns	r3, r3
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	4013      	ands	r3, r2
 8006f12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006f28:	4a1b      	ldr	r2, [pc, #108]	@ (8006f98 <HAL_GPIO_Init+0x300>)
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8006f98 <HAL_GPIO_Init+0x300>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	43db      	mvns	r3, r3
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006f52:	4a11      	ldr	r2, [pc, #68]	@ (8006f98 <HAL_GPIO_Init+0x300>)
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	fa22 f303 	lsr.w	r3, r2, r3
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f47f ae9d 	bne.w	8006ca8 <HAL_GPIO_Init+0x10>
  }
}
 8006f6e:	bf00      	nop
 8006f70:	bf00      	nop
 8006f72:	371c      	adds	r7, #28
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	40021000 	.word	0x40021000
 8006f80:	40010000 	.word	0x40010000
 8006f84:	48000400 	.word	0x48000400
 8006f88:	48000800 	.word	0x48000800
 8006f8c:	48000c00 	.word	0x48000c00
 8006f90:	48001000 	.word	0x48001000
 8006f94:	48001400 	.word	0x48001400
 8006f98:	40010400 	.word	0x40010400

08006f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	807b      	strh	r3, [r7, #2]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006fac:	787b      	ldrb	r3, [r7, #1]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006fb2:	887a      	ldrh	r2, [r7, #2]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006fb8:	e002      	b.n	8006fc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006fba:	887a      	ldrh	r2, [r7, #2]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e08d      	b.n	80070fa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d106      	bne.n	8006ff8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f7fd fb5a 	bl	80046ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2224      	movs	r2, #36	@ 0x24
 8006ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f022 0201 	bic.w	r2, r2, #1
 800700e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800701c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800702c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d107      	bne.n	8007046 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007042:	609a      	str	r2, [r3, #8]
 8007044:	e006      	b.n	8007054 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689a      	ldr	r2, [r3, #8]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007052:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	2b02      	cmp	r3, #2
 800705a:	d108      	bne.n	800706e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800706a:	605a      	str	r2, [r3, #4]
 800706c:	e007      	b.n	800707e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800707c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	6812      	ldr	r2, [r2, #0]
 8007088:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800708c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007090:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68da      	ldr	r2, [r3, #12]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80070a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	691a      	ldr	r2, [r3, #16]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	69d9      	ldr	r1, [r3, #28]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a1a      	ldr	r2, [r3, #32]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	430a      	orrs	r2, r1
 80070ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f042 0201 	orr.w	r2, r2, #1
 80070da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2220      	movs	r2, #32
 80070e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007102:	b480      	push	{r7}
 8007104:	b083      	sub	sp, #12
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b20      	cmp	r3, #32
 8007116:	d138      	bne.n	800718a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800711e:	2b01      	cmp	r3, #1
 8007120:	d101      	bne.n	8007126 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007122:	2302      	movs	r3, #2
 8007124:	e032      	b.n	800718c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2224      	movs	r2, #36	@ 0x24
 8007132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 0201 	bic.w	r2, r2, #1
 8007144:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007154:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6819      	ldr	r1, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f042 0201 	orr.w	r2, r2, #1
 8007174:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2220      	movs	r2, #32
 800717a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	e000      	b.n	800718c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800718a:	2302      	movs	r3, #2
  }
}
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b20      	cmp	r3, #32
 80071ac:	d139      	bne.n	8007222 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d101      	bne.n	80071bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80071b8:	2302      	movs	r3, #2
 80071ba:	e033      	b.n	8007224 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2224      	movs	r2, #36	@ 0x24
 80071c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f022 0201 	bic.w	r2, r2, #1
 80071da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80071ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	021b      	lsls	r3, r3, #8
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f042 0201 	orr.w	r2, r2, #1
 800720c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2220      	movs	r2, #32
 8007212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	e000      	b.n	8007224 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007222:	2302      	movs	r3, #2
  }
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007238:	2300      	movs	r3, #0
 800723a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e0bb      	b.n	80073be <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b05      	cmp	r3, #5
 8007250:	d101      	bne.n	8007256 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e0b3      	b.n	80073be <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b02      	cmp	r3, #2
 8007260:	d101      	bne.n	8007266 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e0ab      	b.n	80073be <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007266:	4b58      	ldr	r3, [pc, #352]	@ (80073c8 <HAL_OPAMP_Init+0x198>)
 8007268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800726a:	4a57      	ldr	r2, [pc, #348]	@ (80073c8 <HAL_OPAMP_Init+0x198>)
 800726c:	f043 0301 	orr.w	r3, r3, #1
 8007270:	6613      	str	r3, [r2, #96]	@ 0x60
 8007272:	4b55      	ldr	r3, [pc, #340]	@ (80073c8 <HAL_OPAMP_Init+0x198>)
 8007274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	60bb      	str	r3, [r7, #8]
 800727c:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d103      	bne.n	8007292 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7fd fa64 	bl	8004760 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	2b40      	cmp	r3, #64	@ 0x40
 800729e:	d003      	beq.n	80072a8 <HAL_OPAMP_Init+0x78>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	2b60      	cmp	r3, #96	@ 0x60
 80072a6:	d133      	bne.n	8007310 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f023 0110 	bic.w	r1, r3, #16
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	4b41      	ldr	r3, [pc, #260]	@ (80073cc <HAL_OPAMP_Init+0x19c>)
 80072c6:	4013      	ands	r3, r2
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	6851      	ldr	r1, [r2, #4]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	6892      	ldr	r2, [r2, #8]
 80072d0:	4311      	orrs	r1, r2
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	6912      	ldr	r2, [r2, #16]
 80072d6:	430a      	orrs	r2, r1
 80072d8:	6879      	ldr	r1, [r7, #4]
 80072da:	7d09      	ldrb	r1, [r1, #20]
 80072dc:	2901      	cmp	r1, #1
 80072de:	d102      	bne.n	80072e6 <HAL_OPAMP_Init+0xb6>
 80072e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80072e4:	e000      	b.n	80072e8 <HAL_OPAMP_Init+0xb8>
 80072e6:	2100      	movs	r1, #0
 80072e8:	4311      	orrs	r1, r2
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80072ee:	4311      	orrs	r1, r2
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80072f4:	4311      	orrs	r1, r2
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80072fa:	04d2      	lsls	r2, r2, #19
 80072fc:	4311      	orrs	r1, r2
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007302:	0612      	lsls	r2, r2, #24
 8007304:	4311      	orrs	r1, r2
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	6812      	ldr	r2, [r2, #0]
 800730a:	430b      	orrs	r3, r1
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	e035      	b.n	800737c <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f023 0110 	bic.w	r1, r3, #16
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	4b27      	ldr	r3, [pc, #156]	@ (80073cc <HAL_OPAMP_Init+0x19c>)
 800732e:	4013      	ands	r3, r2
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	6851      	ldr	r1, [r2, #4]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	6892      	ldr	r2, [r2, #8]
 8007338:	4311      	orrs	r1, r2
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	68d2      	ldr	r2, [r2, #12]
 800733e:	4311      	orrs	r1, r2
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	6912      	ldr	r2, [r2, #16]
 8007344:	430a      	orrs	r2, r1
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	7d09      	ldrb	r1, [r1, #20]
 800734a:	2901      	cmp	r1, #1
 800734c:	d102      	bne.n	8007354 <HAL_OPAMP_Init+0x124>
 800734e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007352:	e000      	b.n	8007356 <HAL_OPAMP_Init+0x126>
 8007354:	2100      	movs	r1, #0
 8007356:	4311      	orrs	r1, r2
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800735c:	4311      	orrs	r1, r2
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007362:	4311      	orrs	r1, r2
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007368:	04d2      	lsls	r2, r2, #19
 800736a:	4311      	orrs	r1, r2
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007370:	0612      	lsls	r2, r2, #24
 8007372:	4311      	orrs	r1, r2
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	6812      	ldr	r2, [r2, #0]
 8007378:	430b      	orrs	r3, r1
 800737a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	2b00      	cmp	r3, #0
 8007384:	db10      	blt.n	80073a8 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	699a      	ldr	r2, [r3, #24]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	69db      	ldr	r3, [r3, #28]
 8007398:	431a      	orrs	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	431a      	orrs	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d103      	bne.n	80073bc <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	40021000 	.word	0x40021000
 80073cc:	e0003e11 	.word	0xe0003e11

080073d0 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d102      	bne.n	80073e8 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	73fb      	strb	r3, [r7, #15]
 80073e6:	e01d      	b.n	8007424 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b05      	cmp	r3, #5
 80073f2:	d102      	bne.n	80073fa <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	73fb      	strb	r3, [r7, #15]
 80073f8:	e014      	b.n	8007424 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b01      	cmp	r3, #1
 8007404:	d10c      	bne.n	8007420 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f042 0201 	orr.w	r2, r2, #1
 8007414:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2204      	movs	r2, #4
 800741a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800741e:	e001      	b.n	8007424 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8007424:	7bfb      	ldrb	r3, [r7, #15]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3714      	adds	r7, #20
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
	...

08007434 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d141      	bne.n	80074c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007442:	4b4b      	ldr	r3, [pc, #300]	@ (8007570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800744a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800744e:	d131      	bne.n	80074b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007450:	4b47      	ldr	r3, [pc, #284]	@ (8007570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007456:	4a46      	ldr	r2, [pc, #280]	@ (8007570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007458:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800745c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007460:	4b43      	ldr	r3, [pc, #268]	@ (8007570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007468:	4a41      	ldr	r2, [pc, #260]	@ (8007570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800746a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800746e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007470:	4b40      	ldr	r3, [pc, #256]	@ (8007574 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2232      	movs	r2, #50	@ 0x32
 8007476:	fb02 f303 	mul.w	r3, r2, r3
 800747a:	4a3f      	ldr	r2, [pc, #252]	@ (8007578 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800747c:	fba2 2303 	umull	r2, r3, r2, r3
 8007480:	0c9b      	lsrs	r3, r3, #18
 8007482:	3301      	adds	r3, #1
 8007484:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007486:	e002      	b.n	800748e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	3b01      	subs	r3, #1
 800748c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800748e:	4b38      	ldr	r3, [pc, #224]	@ (8007570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800749a:	d102      	bne.n	80074a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1f2      	bne.n	8007488 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80074a2:	4b33      	ldr	r3, [pc, #204]	@ (8007570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074ae:	d158      	bne.n	8007562 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e057      	b.n	8007564 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80074b4:	4b2e      	ldr	r3, [pc, #184]	@ (8007570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074ba:	4a2d      	ldr	r2, [pc, #180]	@ (8007570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80074c4:	e04d      	b.n	8007562 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074cc:	d141      	bne.n	8007552 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80074ce:	4b28      	ldr	r3, [pc, #160]	@ (8007570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80074d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074da:	d131      	bne.n	8007540 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80074dc:	4b24      	ldr	r3, [pc, #144]	@ (8007570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074e2:	4a23      	ldr	r2, [pc, #140]	@ (8007570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80074ec:	4b20      	ldr	r3, [pc, #128]	@ (8007570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80074f4:	4a1e      	ldr	r2, [pc, #120]	@ (8007570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80074fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80074fc:	4b1d      	ldr	r3, [pc, #116]	@ (8007574 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2232      	movs	r2, #50	@ 0x32
 8007502:	fb02 f303 	mul.w	r3, r2, r3
 8007506:	4a1c      	ldr	r2, [pc, #112]	@ (8007578 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007508:	fba2 2303 	umull	r2, r3, r2, r3
 800750c:	0c9b      	lsrs	r3, r3, #18
 800750e:	3301      	adds	r3, #1
 8007510:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007512:	e002      	b.n	800751a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	3b01      	subs	r3, #1
 8007518:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800751a:	4b15      	ldr	r3, [pc, #84]	@ (8007570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007526:	d102      	bne.n	800752e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1f2      	bne.n	8007514 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800752e:	4b10      	ldr	r3, [pc, #64]	@ (8007570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800753a:	d112      	bne.n	8007562 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e011      	b.n	8007564 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007540:	4b0b      	ldr	r3, [pc, #44]	@ (8007570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007542:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007546:	4a0a      	ldr	r2, [pc, #40]	@ (8007570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800754c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007550:	e007      	b.n	8007562 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007552:	4b07      	ldr	r3, [pc, #28]	@ (8007570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800755a:	4a05      	ldr	r2, [pc, #20]	@ (8007570 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800755c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007560:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr
 8007570:	40007000 	.word	0x40007000
 8007574:	20000004 	.word	0x20000004
 8007578:	431bde83 	.word	0x431bde83

0800757c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800757c:	b480      	push	{r7}
 800757e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007580:	4b05      	ldr	r3, [pc, #20]	@ (8007598 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	4a04      	ldr	r2, [pc, #16]	@ (8007598 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007586:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800758a:	6093      	str	r3, [r2, #8]
}
 800758c:	bf00      	nop
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	40007000 	.word	0x40007000

0800759c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b088      	sub	sp, #32
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e2fe      	b.n	8007bac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d075      	beq.n	80076a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075ba:	4b97      	ldr	r3, [pc, #604]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f003 030c 	and.w	r3, r3, #12
 80075c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80075c4:	4b94      	ldr	r3, [pc, #592]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	f003 0303 	and.w	r3, r3, #3
 80075cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	2b0c      	cmp	r3, #12
 80075d2:	d102      	bne.n	80075da <HAL_RCC_OscConfig+0x3e>
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d002      	beq.n	80075e0 <HAL_RCC_OscConfig+0x44>
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2b08      	cmp	r3, #8
 80075de:	d10b      	bne.n	80075f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075e0:	4b8d      	ldr	r3, [pc, #564]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d05b      	beq.n	80076a4 <HAL_RCC_OscConfig+0x108>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d157      	bne.n	80076a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e2d9      	b.n	8007bac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007600:	d106      	bne.n	8007610 <HAL_RCC_OscConfig+0x74>
 8007602:	4b85      	ldr	r3, [pc, #532]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a84      	ldr	r2, [pc, #528]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 8007608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800760c:	6013      	str	r3, [r2, #0]
 800760e:	e01d      	b.n	800764c <HAL_RCC_OscConfig+0xb0>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007618:	d10c      	bne.n	8007634 <HAL_RCC_OscConfig+0x98>
 800761a:	4b7f      	ldr	r3, [pc, #508]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a7e      	ldr	r2, [pc, #504]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 8007620:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007624:	6013      	str	r3, [r2, #0]
 8007626:	4b7c      	ldr	r3, [pc, #496]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a7b      	ldr	r2, [pc, #492]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 800762c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007630:	6013      	str	r3, [r2, #0]
 8007632:	e00b      	b.n	800764c <HAL_RCC_OscConfig+0xb0>
 8007634:	4b78      	ldr	r3, [pc, #480]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a77      	ldr	r2, [pc, #476]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 800763a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800763e:	6013      	str	r3, [r2, #0]
 8007640:	4b75      	ldr	r3, [pc, #468]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a74      	ldr	r2, [pc, #464]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 8007646:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800764a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d013      	beq.n	800767c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007654:	f7fd fcba 	bl	8004fcc <HAL_GetTick>
 8007658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800765a:	e008      	b.n	800766e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800765c:	f7fd fcb6 	bl	8004fcc <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b64      	cmp	r3, #100	@ 0x64
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e29e      	b.n	8007bac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800766e:	4b6a      	ldr	r3, [pc, #424]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0f0      	beq.n	800765c <HAL_RCC_OscConfig+0xc0>
 800767a:	e014      	b.n	80076a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800767c:	f7fd fca6 	bl	8004fcc <HAL_GetTick>
 8007680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007682:	e008      	b.n	8007696 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007684:	f7fd fca2 	bl	8004fcc <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	2b64      	cmp	r3, #100	@ 0x64
 8007690:	d901      	bls.n	8007696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e28a      	b.n	8007bac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007696:	4b60      	ldr	r3, [pc, #384]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1f0      	bne.n	8007684 <HAL_RCC_OscConfig+0xe8>
 80076a2:	e000      	b.n	80076a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d075      	beq.n	800779e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076b2:	4b59      	ldr	r3, [pc, #356]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f003 030c 	and.w	r3, r3, #12
 80076ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076bc:	4b56      	ldr	r3, [pc, #344]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	f003 0303 	and.w	r3, r3, #3
 80076c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	2b0c      	cmp	r3, #12
 80076ca:	d102      	bne.n	80076d2 <HAL_RCC_OscConfig+0x136>
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d002      	beq.n	80076d8 <HAL_RCC_OscConfig+0x13c>
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	2b04      	cmp	r3, #4
 80076d6:	d11f      	bne.n	8007718 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076d8:	4b4f      	ldr	r3, [pc, #316]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d005      	beq.n	80076f0 <HAL_RCC_OscConfig+0x154>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e25d      	b.n	8007bac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076f0:	4b49      	ldr	r3, [pc, #292]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	061b      	lsls	r3, r3, #24
 80076fe:	4946      	ldr	r1, [pc, #280]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 8007700:	4313      	orrs	r3, r2
 8007702:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007704:	4b45      	ldr	r3, [pc, #276]	@ (800781c <HAL_RCC_OscConfig+0x280>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4618      	mov	r0, r3
 800770a:	f7fd fc13 	bl	8004f34 <HAL_InitTick>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d043      	beq.n	800779c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e249      	b.n	8007bac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d023      	beq.n	8007768 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007720:	4b3d      	ldr	r3, [pc, #244]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a3c      	ldr	r2, [pc, #240]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 8007726:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800772a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800772c:	f7fd fc4e 	bl	8004fcc <HAL_GetTick>
 8007730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007732:	e008      	b.n	8007746 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007734:	f7fd fc4a 	bl	8004fcc <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	2b02      	cmp	r3, #2
 8007740:	d901      	bls.n	8007746 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e232      	b.n	8007bac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007746:	4b34      	ldr	r3, [pc, #208]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800774e:	2b00      	cmp	r3, #0
 8007750:	d0f0      	beq.n	8007734 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007752:	4b31      	ldr	r3, [pc, #196]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	061b      	lsls	r3, r3, #24
 8007760:	492d      	ldr	r1, [pc, #180]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 8007762:	4313      	orrs	r3, r2
 8007764:	604b      	str	r3, [r1, #4]
 8007766:	e01a      	b.n	800779e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007768:	4b2b      	ldr	r3, [pc, #172]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a2a      	ldr	r2, [pc, #168]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 800776e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007774:	f7fd fc2a 	bl	8004fcc <HAL_GetTick>
 8007778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800777a:	e008      	b.n	800778e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800777c:	f7fd fc26 	bl	8004fcc <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	2b02      	cmp	r3, #2
 8007788:	d901      	bls.n	800778e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e20e      	b.n	8007bac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800778e:	4b22      	ldr	r3, [pc, #136]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1f0      	bne.n	800777c <HAL_RCC_OscConfig+0x1e0>
 800779a:	e000      	b.n	800779e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800779c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0308 	and.w	r3, r3, #8
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d041      	beq.n	800782e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d01c      	beq.n	80077ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077b2:	4b19      	ldr	r3, [pc, #100]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 80077b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077b8:	4a17      	ldr	r2, [pc, #92]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 80077ba:	f043 0301 	orr.w	r3, r3, #1
 80077be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077c2:	f7fd fc03 	bl	8004fcc <HAL_GetTick>
 80077c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80077c8:	e008      	b.n	80077dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077ca:	f7fd fbff 	bl	8004fcc <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d901      	bls.n	80077dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e1e7      	b.n	8007bac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80077dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 80077de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077e2:	f003 0302 	and.w	r3, r3, #2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d0ef      	beq.n	80077ca <HAL_RCC_OscConfig+0x22e>
 80077ea:	e020      	b.n	800782e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 80077ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077f2:	4a09      	ldr	r2, [pc, #36]	@ (8007818 <HAL_RCC_OscConfig+0x27c>)
 80077f4:	f023 0301 	bic.w	r3, r3, #1
 80077f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077fc:	f7fd fbe6 	bl	8004fcc <HAL_GetTick>
 8007800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007802:	e00d      	b.n	8007820 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007804:	f7fd fbe2 	bl	8004fcc <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	2b02      	cmp	r3, #2
 8007810:	d906      	bls.n	8007820 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e1ca      	b.n	8007bac <HAL_RCC_OscConfig+0x610>
 8007816:	bf00      	nop
 8007818:	40021000 	.word	0x40021000
 800781c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007820:	4b8c      	ldr	r3, [pc, #560]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 8007822:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1ea      	bne.n	8007804 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0304 	and.w	r3, r3, #4
 8007836:	2b00      	cmp	r3, #0
 8007838:	f000 80a6 	beq.w	8007988 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800783c:	2300      	movs	r3, #0
 800783e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007840:	4b84      	ldr	r3, [pc, #528]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 8007842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d101      	bne.n	8007850 <HAL_RCC_OscConfig+0x2b4>
 800784c:	2301      	movs	r3, #1
 800784e:	e000      	b.n	8007852 <HAL_RCC_OscConfig+0x2b6>
 8007850:	2300      	movs	r3, #0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00d      	beq.n	8007872 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007856:	4b7f      	ldr	r3, [pc, #508]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 8007858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800785a:	4a7e      	ldr	r2, [pc, #504]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 800785c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007860:	6593      	str	r3, [r2, #88]	@ 0x58
 8007862:	4b7c      	ldr	r3, [pc, #496]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 8007864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800786e:	2301      	movs	r3, #1
 8007870:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007872:	4b79      	ldr	r3, [pc, #484]	@ (8007a58 <HAL_RCC_OscConfig+0x4bc>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800787a:	2b00      	cmp	r3, #0
 800787c:	d118      	bne.n	80078b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800787e:	4b76      	ldr	r3, [pc, #472]	@ (8007a58 <HAL_RCC_OscConfig+0x4bc>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a75      	ldr	r2, [pc, #468]	@ (8007a58 <HAL_RCC_OscConfig+0x4bc>)
 8007884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800788a:	f7fd fb9f 	bl	8004fcc <HAL_GetTick>
 800788e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007890:	e008      	b.n	80078a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007892:	f7fd fb9b 	bl	8004fcc <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	2b02      	cmp	r3, #2
 800789e:	d901      	bls.n	80078a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e183      	b.n	8007bac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078a4:	4b6c      	ldr	r3, [pc, #432]	@ (8007a58 <HAL_RCC_OscConfig+0x4bc>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d0f0      	beq.n	8007892 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d108      	bne.n	80078ca <HAL_RCC_OscConfig+0x32e>
 80078b8:	4b66      	ldr	r3, [pc, #408]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 80078ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078be:	4a65      	ldr	r2, [pc, #404]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 80078c0:	f043 0301 	orr.w	r3, r3, #1
 80078c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80078c8:	e024      	b.n	8007914 <HAL_RCC_OscConfig+0x378>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	2b05      	cmp	r3, #5
 80078d0:	d110      	bne.n	80078f4 <HAL_RCC_OscConfig+0x358>
 80078d2:	4b60      	ldr	r3, [pc, #384]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 80078d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078d8:	4a5e      	ldr	r2, [pc, #376]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 80078da:	f043 0304 	orr.w	r3, r3, #4
 80078de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80078e2:	4b5c      	ldr	r3, [pc, #368]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 80078e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078e8:	4a5a      	ldr	r2, [pc, #360]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 80078ea:	f043 0301 	orr.w	r3, r3, #1
 80078ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80078f2:	e00f      	b.n	8007914 <HAL_RCC_OscConfig+0x378>
 80078f4:	4b57      	ldr	r3, [pc, #348]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 80078f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078fa:	4a56      	ldr	r2, [pc, #344]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 80078fc:	f023 0301 	bic.w	r3, r3, #1
 8007900:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007904:	4b53      	ldr	r3, [pc, #332]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 8007906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800790a:	4a52      	ldr	r2, [pc, #328]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 800790c:	f023 0304 	bic.w	r3, r3, #4
 8007910:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d016      	beq.n	800794a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800791c:	f7fd fb56 	bl	8004fcc <HAL_GetTick>
 8007920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007922:	e00a      	b.n	800793a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007924:	f7fd fb52 	bl	8004fcc <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007932:	4293      	cmp	r3, r2
 8007934:	d901      	bls.n	800793a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	e138      	b.n	8007bac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800793a:	4b46      	ldr	r3, [pc, #280]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 800793c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007940:	f003 0302 	and.w	r3, r3, #2
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0ed      	beq.n	8007924 <HAL_RCC_OscConfig+0x388>
 8007948:	e015      	b.n	8007976 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800794a:	f7fd fb3f 	bl	8004fcc <HAL_GetTick>
 800794e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007950:	e00a      	b.n	8007968 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007952:	f7fd fb3b 	bl	8004fcc <HAL_GetTick>
 8007956:	4602      	mov	r2, r0
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007960:	4293      	cmp	r3, r2
 8007962:	d901      	bls.n	8007968 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e121      	b.n	8007bac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007968:	4b3a      	ldr	r3, [pc, #232]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 800796a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1ed      	bne.n	8007952 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007976:	7ffb      	ldrb	r3, [r7, #31]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d105      	bne.n	8007988 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800797c:	4b35      	ldr	r3, [pc, #212]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 800797e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007980:	4a34      	ldr	r2, [pc, #208]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 8007982:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007986:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0320 	and.w	r3, r3, #32
 8007990:	2b00      	cmp	r3, #0
 8007992:	d03c      	beq.n	8007a0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d01c      	beq.n	80079d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800799c:	4b2d      	ldr	r3, [pc, #180]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 800799e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80079a2:	4a2c      	ldr	r2, [pc, #176]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 80079a4:	f043 0301 	orr.w	r3, r3, #1
 80079a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079ac:	f7fd fb0e 	bl	8004fcc <HAL_GetTick>
 80079b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80079b2:	e008      	b.n	80079c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80079b4:	f7fd fb0a 	bl	8004fcc <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d901      	bls.n	80079c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e0f2      	b.n	8007bac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80079c6:	4b23      	ldr	r3, [pc, #140]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 80079c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d0ef      	beq.n	80079b4 <HAL_RCC_OscConfig+0x418>
 80079d4:	e01b      	b.n	8007a0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80079d6:	4b1f      	ldr	r3, [pc, #124]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 80079d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80079dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 80079de:	f023 0301 	bic.w	r3, r3, #1
 80079e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079e6:	f7fd faf1 	bl	8004fcc <HAL_GetTick>
 80079ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80079ec:	e008      	b.n	8007a00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80079ee:	f7fd faed 	bl	8004fcc <HAL_GetTick>
 80079f2:	4602      	mov	r2, r0
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d901      	bls.n	8007a00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e0d5      	b.n	8007bac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007a00:	4b14      	ldr	r3, [pc, #80]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 8007a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a06:	f003 0302 	and.w	r3, r3, #2
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1ef      	bne.n	80079ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	69db      	ldr	r3, [r3, #28]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f000 80c9 	beq.w	8007baa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a18:	4b0e      	ldr	r3, [pc, #56]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f003 030c 	and.w	r3, r3, #12
 8007a20:	2b0c      	cmp	r3, #12
 8007a22:	f000 8083 	beq.w	8007b2c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d15e      	bne.n	8007aec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a2e:	4b09      	ldr	r3, [pc, #36]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a08      	ldr	r2, [pc, #32]	@ (8007a54 <HAL_RCC_OscConfig+0x4b8>)
 8007a34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a3a:	f7fd fac7 	bl	8004fcc <HAL_GetTick>
 8007a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a40:	e00c      	b.n	8007a5c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a42:	f7fd fac3 	bl	8004fcc <HAL_GetTick>
 8007a46:	4602      	mov	r2, r0
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d905      	bls.n	8007a5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e0ab      	b.n	8007bac <HAL_RCC_OscConfig+0x610>
 8007a54:	40021000 	.word	0x40021000
 8007a58:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a5c:	4b55      	ldr	r3, [pc, #340]	@ (8007bb4 <HAL_RCC_OscConfig+0x618>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1ec      	bne.n	8007a42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a68:	4b52      	ldr	r3, [pc, #328]	@ (8007bb4 <HAL_RCC_OscConfig+0x618>)
 8007a6a:	68da      	ldr	r2, [r3, #12]
 8007a6c:	4b52      	ldr	r3, [pc, #328]	@ (8007bb8 <HAL_RCC_OscConfig+0x61c>)
 8007a6e:	4013      	ands	r3, r2
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	6a11      	ldr	r1, [r2, #32]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007a78:	3a01      	subs	r2, #1
 8007a7a:	0112      	lsls	r2, r2, #4
 8007a7c:	4311      	orrs	r1, r2
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007a82:	0212      	lsls	r2, r2, #8
 8007a84:	4311      	orrs	r1, r2
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007a8a:	0852      	lsrs	r2, r2, #1
 8007a8c:	3a01      	subs	r2, #1
 8007a8e:	0552      	lsls	r2, r2, #21
 8007a90:	4311      	orrs	r1, r2
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007a96:	0852      	lsrs	r2, r2, #1
 8007a98:	3a01      	subs	r2, #1
 8007a9a:	0652      	lsls	r2, r2, #25
 8007a9c:	4311      	orrs	r1, r2
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007aa2:	06d2      	lsls	r2, r2, #27
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	4943      	ldr	r1, [pc, #268]	@ (8007bb4 <HAL_RCC_OscConfig+0x618>)
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007aac:	4b41      	ldr	r3, [pc, #260]	@ (8007bb4 <HAL_RCC_OscConfig+0x618>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a40      	ldr	r2, [pc, #256]	@ (8007bb4 <HAL_RCC_OscConfig+0x618>)
 8007ab2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ab6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ab8:	4b3e      	ldr	r3, [pc, #248]	@ (8007bb4 <HAL_RCC_OscConfig+0x618>)
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	4a3d      	ldr	r2, [pc, #244]	@ (8007bb4 <HAL_RCC_OscConfig+0x618>)
 8007abe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ac2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac4:	f7fd fa82 	bl	8004fcc <HAL_GetTick>
 8007ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007aca:	e008      	b.n	8007ade <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007acc:	f7fd fa7e 	bl	8004fcc <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d901      	bls.n	8007ade <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e066      	b.n	8007bac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ade:	4b35      	ldr	r3, [pc, #212]	@ (8007bb4 <HAL_RCC_OscConfig+0x618>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d0f0      	beq.n	8007acc <HAL_RCC_OscConfig+0x530>
 8007aea:	e05e      	b.n	8007baa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aec:	4b31      	ldr	r3, [pc, #196]	@ (8007bb4 <HAL_RCC_OscConfig+0x618>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a30      	ldr	r2, [pc, #192]	@ (8007bb4 <HAL_RCC_OscConfig+0x618>)
 8007af2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007af8:	f7fd fa68 	bl	8004fcc <HAL_GetTick>
 8007afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007afe:	e008      	b.n	8007b12 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b00:	f7fd fa64 	bl	8004fcc <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e04c      	b.n	8007bac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b12:	4b28      	ldr	r3, [pc, #160]	@ (8007bb4 <HAL_RCC_OscConfig+0x618>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1f0      	bne.n	8007b00 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007b1e:	4b25      	ldr	r3, [pc, #148]	@ (8007bb4 <HAL_RCC_OscConfig+0x618>)
 8007b20:	68da      	ldr	r2, [r3, #12]
 8007b22:	4924      	ldr	r1, [pc, #144]	@ (8007bb4 <HAL_RCC_OscConfig+0x618>)
 8007b24:	4b25      	ldr	r3, [pc, #148]	@ (8007bbc <HAL_RCC_OscConfig+0x620>)
 8007b26:	4013      	ands	r3, r2
 8007b28:	60cb      	str	r3, [r1, #12]
 8007b2a:	e03e      	b.n	8007baa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d101      	bne.n	8007b38 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e039      	b.n	8007bac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007b38:	4b1e      	ldr	r3, [pc, #120]	@ (8007bb4 <HAL_RCC_OscConfig+0x618>)
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	f003 0203 	and.w	r2, r3, #3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a1b      	ldr	r3, [r3, #32]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d12c      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b56:	3b01      	subs	r3, #1
 8007b58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d123      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b68:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d11b      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b78:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d113      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b88:	085b      	lsrs	r3, r3, #1
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d109      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b9c:	085b      	lsrs	r3, r3, #1
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d001      	beq.n	8007baa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e000      	b.n	8007bac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3720      	adds	r7, #32
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	40021000 	.word	0x40021000
 8007bb8:	019f800c 	.word	0x019f800c
 8007bbc:	feeefffc 	.word	0xfeeefffc

08007bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d101      	bne.n	8007bd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e11e      	b.n	8007e16 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007bd8:	4b91      	ldr	r3, [pc, #580]	@ (8007e20 <HAL_RCC_ClockConfig+0x260>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 030f 	and.w	r3, r3, #15
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d910      	bls.n	8007c08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007be6:	4b8e      	ldr	r3, [pc, #568]	@ (8007e20 <HAL_RCC_ClockConfig+0x260>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f023 020f 	bic.w	r2, r3, #15
 8007bee:	498c      	ldr	r1, [pc, #560]	@ (8007e20 <HAL_RCC_ClockConfig+0x260>)
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bf6:	4b8a      	ldr	r3, [pc, #552]	@ (8007e20 <HAL_RCC_ClockConfig+0x260>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 030f 	and.w	r3, r3, #15
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d001      	beq.n	8007c08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e106      	b.n	8007e16 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0301 	and.w	r3, r3, #1
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d073      	beq.n	8007cfc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	2b03      	cmp	r3, #3
 8007c1a:	d129      	bne.n	8007c70 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c1c:	4b81      	ldr	r3, [pc, #516]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d101      	bne.n	8007c2c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e0f4      	b.n	8007e16 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007c2c:	f000 f99e 	bl	8007f6c <RCC_GetSysClockFreqFromPLLSource>
 8007c30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	4a7c      	ldr	r2, [pc, #496]	@ (8007e28 <HAL_RCC_ClockConfig+0x268>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d93f      	bls.n	8007cba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007c3a:	4b7a      	ldr	r3, [pc, #488]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d009      	beq.n	8007c5a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d033      	beq.n	8007cba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d12f      	bne.n	8007cba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c5a:	4b72      	ldr	r3, [pc, #456]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c62:	4a70      	ldr	r2, [pc, #448]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007c64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007c6a:	2380      	movs	r3, #128	@ 0x80
 8007c6c:	617b      	str	r3, [r7, #20]
 8007c6e:	e024      	b.n	8007cba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d107      	bne.n	8007c88 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c78:	4b6a      	ldr	r3, [pc, #424]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d109      	bne.n	8007c98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e0c6      	b.n	8007e16 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c88:	4b66      	ldr	r3, [pc, #408]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d101      	bne.n	8007c98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e0be      	b.n	8007e16 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007c98:	f000 f8ce 	bl	8007e38 <HAL_RCC_GetSysClockFreq>
 8007c9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	4a61      	ldr	r2, [pc, #388]	@ (8007e28 <HAL_RCC_ClockConfig+0x268>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d909      	bls.n	8007cba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007ca6:	4b5f      	ldr	r3, [pc, #380]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007cae:	4a5d      	ldr	r2, [pc, #372]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cb4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007cb6:	2380      	movs	r3, #128	@ 0x80
 8007cb8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007cba:	4b5a      	ldr	r3, [pc, #360]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f023 0203 	bic.w	r2, r3, #3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	4957      	ldr	r1, [pc, #348]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ccc:	f7fd f97e 	bl	8004fcc <HAL_GetTick>
 8007cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cd2:	e00a      	b.n	8007cea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cd4:	f7fd f97a 	bl	8004fcc <HAL_GetTick>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d901      	bls.n	8007cea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e095      	b.n	8007e16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cea:	4b4e      	ldr	r3, [pc, #312]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f003 020c 	and.w	r2, r3, #12
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d1eb      	bne.n	8007cd4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0302 	and.w	r3, r3, #2
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d023      	beq.n	8007d50 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0304 	and.w	r3, r3, #4
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d005      	beq.n	8007d20 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d14:	4b43      	ldr	r3, [pc, #268]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	4a42      	ldr	r2, [pc, #264]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007d1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007d1e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0308 	and.w	r3, r3, #8
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d007      	beq.n	8007d3c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007d2c:	4b3d      	ldr	r3, [pc, #244]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007d34:	4a3b      	ldr	r2, [pc, #236]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007d36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007d3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d3c:	4b39      	ldr	r3, [pc, #228]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	4936      	ldr	r1, [pc, #216]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	608b      	str	r3, [r1, #8]
 8007d4e:	e008      	b.n	8007d62 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	2b80      	cmp	r3, #128	@ 0x80
 8007d54:	d105      	bne.n	8007d62 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007d56:	4b33      	ldr	r3, [pc, #204]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	4a32      	ldr	r2, [pc, #200]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007d5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d60:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d62:	4b2f      	ldr	r3, [pc, #188]	@ (8007e20 <HAL_RCC_ClockConfig+0x260>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 030f 	and.w	r3, r3, #15
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d21d      	bcs.n	8007dac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d70:	4b2b      	ldr	r3, [pc, #172]	@ (8007e20 <HAL_RCC_ClockConfig+0x260>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f023 020f 	bic.w	r2, r3, #15
 8007d78:	4929      	ldr	r1, [pc, #164]	@ (8007e20 <HAL_RCC_ClockConfig+0x260>)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007d80:	f7fd f924 	bl	8004fcc <HAL_GetTick>
 8007d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d86:	e00a      	b.n	8007d9e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d88:	f7fd f920 	bl	8004fcc <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d901      	bls.n	8007d9e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e03b      	b.n	8007e16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d9e:	4b20      	ldr	r3, [pc, #128]	@ (8007e20 <HAL_RCC_ClockConfig+0x260>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 030f 	and.w	r3, r3, #15
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d1ed      	bne.n	8007d88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 0304 	and.w	r3, r3, #4
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d008      	beq.n	8007dca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007db8:	4b1a      	ldr	r3, [pc, #104]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	4917      	ldr	r1, [pc, #92]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0308 	and.w	r3, r3, #8
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d009      	beq.n	8007dea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007dd6:	4b13      	ldr	r3, [pc, #76]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	00db      	lsls	r3, r3, #3
 8007de4:	490f      	ldr	r1, [pc, #60]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007de6:	4313      	orrs	r3, r2
 8007de8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007dea:	f000 f825 	bl	8007e38 <HAL_RCC_GetSysClockFreq>
 8007dee:	4602      	mov	r2, r0
 8007df0:	4b0c      	ldr	r3, [pc, #48]	@ (8007e24 <HAL_RCC_ClockConfig+0x264>)
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	091b      	lsrs	r3, r3, #4
 8007df6:	f003 030f 	and.w	r3, r3, #15
 8007dfa:	490c      	ldr	r1, [pc, #48]	@ (8007e2c <HAL_RCC_ClockConfig+0x26c>)
 8007dfc:	5ccb      	ldrb	r3, [r1, r3]
 8007dfe:	f003 031f 	and.w	r3, r3, #31
 8007e02:	fa22 f303 	lsr.w	r3, r2, r3
 8007e06:	4a0a      	ldr	r2, [pc, #40]	@ (8007e30 <HAL_RCC_ClockConfig+0x270>)
 8007e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e34 <HAL_RCC_ClockConfig+0x274>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fd f890 	bl	8004f34 <HAL_InitTick>
 8007e14:	4603      	mov	r3, r0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3718      	adds	r7, #24
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	40022000 	.word	0x40022000
 8007e24:	40021000 	.word	0x40021000
 8007e28:	04c4b400 	.word	0x04c4b400
 8007e2c:	0800d734 	.word	0x0800d734
 8007e30:	20000004 	.word	0x20000004
 8007e34:	20000008 	.word	0x20000008

08007e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b087      	sub	sp, #28
 8007e3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007e3e:	4b2c      	ldr	r3, [pc, #176]	@ (8007ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f003 030c 	and.w	r3, r3, #12
 8007e46:	2b04      	cmp	r3, #4
 8007e48:	d102      	bne.n	8007e50 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007e4c:	613b      	str	r3, [r7, #16]
 8007e4e:	e047      	b.n	8007ee0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007e50:	4b27      	ldr	r3, [pc, #156]	@ (8007ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	f003 030c 	and.w	r3, r3, #12
 8007e58:	2b08      	cmp	r3, #8
 8007e5a:	d102      	bne.n	8007e62 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007e5c:	4b26      	ldr	r3, [pc, #152]	@ (8007ef8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007e5e:	613b      	str	r3, [r7, #16]
 8007e60:	e03e      	b.n	8007ee0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007e62:	4b23      	ldr	r3, [pc, #140]	@ (8007ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f003 030c 	and.w	r3, r3, #12
 8007e6a:	2b0c      	cmp	r3, #12
 8007e6c:	d136      	bne.n	8007edc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e6e:	4b20      	ldr	r3, [pc, #128]	@ (8007ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	f003 0303 	and.w	r3, r3, #3
 8007e76:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007e78:	4b1d      	ldr	r3, [pc, #116]	@ (8007ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	091b      	lsrs	r3, r3, #4
 8007e7e:	f003 030f 	and.w	r3, r3, #15
 8007e82:	3301      	adds	r3, #1
 8007e84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	d10c      	bne.n	8007ea6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e8c:	4a1a      	ldr	r2, [pc, #104]	@ (8007ef8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e94:	4a16      	ldr	r2, [pc, #88]	@ (8007ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e96:	68d2      	ldr	r2, [r2, #12]
 8007e98:	0a12      	lsrs	r2, r2, #8
 8007e9a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007e9e:	fb02 f303 	mul.w	r3, r2, r3
 8007ea2:	617b      	str	r3, [r7, #20]
      break;
 8007ea4:	e00c      	b.n	8007ec0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ea6:	4a13      	ldr	r2, [pc, #76]	@ (8007ef4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eae:	4a10      	ldr	r2, [pc, #64]	@ (8007ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007eb0:	68d2      	ldr	r2, [r2, #12]
 8007eb2:	0a12      	lsrs	r2, r2, #8
 8007eb4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007eb8:	fb02 f303 	mul.w	r3, r2, r3
 8007ebc:	617b      	str	r3, [r7, #20]
      break;
 8007ebe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	0e5b      	lsrs	r3, r3, #25
 8007ec6:	f003 0303 	and.w	r3, r3, #3
 8007eca:	3301      	adds	r3, #1
 8007ecc:	005b      	lsls	r3, r3, #1
 8007ece:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed8:	613b      	str	r3, [r7, #16]
 8007eda:	e001      	b.n	8007ee0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007edc:	2300      	movs	r3, #0
 8007ede:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007ee0:	693b      	ldr	r3, [r7, #16]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	371c      	adds	r7, #28
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	40021000 	.word	0x40021000
 8007ef4:	00f42400 	.word	0x00f42400
 8007ef8:	007a1200 	.word	0x007a1200

08007efc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007efc:	b480      	push	{r7}
 8007efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f00:	4b03      	ldr	r3, [pc, #12]	@ (8007f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f02:	681b      	ldr	r3, [r3, #0]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	20000004 	.word	0x20000004

08007f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007f18:	f7ff fff0 	bl	8007efc <HAL_RCC_GetHCLKFreq>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	4b06      	ldr	r3, [pc, #24]	@ (8007f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	0a1b      	lsrs	r3, r3, #8
 8007f24:	f003 0307 	and.w	r3, r3, #7
 8007f28:	4904      	ldr	r1, [pc, #16]	@ (8007f3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f2a:	5ccb      	ldrb	r3, [r1, r3]
 8007f2c:	f003 031f 	and.w	r3, r3, #31
 8007f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	40021000 	.word	0x40021000
 8007f3c:	0800d744 	.word	0x0800d744

08007f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007f44:	f7ff ffda 	bl	8007efc <HAL_RCC_GetHCLKFreq>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	4b06      	ldr	r3, [pc, #24]	@ (8007f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	0adb      	lsrs	r3, r3, #11
 8007f50:	f003 0307 	and.w	r3, r3, #7
 8007f54:	4904      	ldr	r1, [pc, #16]	@ (8007f68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f56:	5ccb      	ldrb	r3, [r1, r3]
 8007f58:	f003 031f 	and.w	r3, r3, #31
 8007f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	40021000 	.word	0x40021000
 8007f68:	0800d744 	.word	0x0800d744

08007f6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f72:	4b1e      	ldr	r3, [pc, #120]	@ (8007fec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	f003 0303 	and.w	r3, r3, #3
 8007f7a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8007fec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	091b      	lsrs	r3, r3, #4
 8007f82:	f003 030f 	and.w	r3, r3, #15
 8007f86:	3301      	adds	r3, #1
 8007f88:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d10c      	bne.n	8007faa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f90:	4a17      	ldr	r2, [pc, #92]	@ (8007ff0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f98:	4a14      	ldr	r2, [pc, #80]	@ (8007fec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f9a:	68d2      	ldr	r2, [r2, #12]
 8007f9c:	0a12      	lsrs	r2, r2, #8
 8007f9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007fa2:	fb02 f303 	mul.w	r3, r2, r3
 8007fa6:	617b      	str	r3, [r7, #20]
    break;
 8007fa8:	e00c      	b.n	8007fc4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007faa:	4a12      	ldr	r2, [pc, #72]	@ (8007ff4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb2:	4a0e      	ldr	r2, [pc, #56]	@ (8007fec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007fb4:	68d2      	ldr	r2, [r2, #12]
 8007fb6:	0a12      	lsrs	r2, r2, #8
 8007fb8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007fbc:	fb02 f303 	mul.w	r3, r2, r3
 8007fc0:	617b      	str	r3, [r7, #20]
    break;
 8007fc2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007fc4:	4b09      	ldr	r3, [pc, #36]	@ (8007fec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	0e5b      	lsrs	r3, r3, #25
 8007fca:	f003 0303 	and.w	r3, r3, #3
 8007fce:	3301      	adds	r3, #1
 8007fd0:	005b      	lsls	r3, r3, #1
 8007fd2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fdc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007fde:	687b      	ldr	r3, [r7, #4]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	371c      	adds	r7, #28
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	40021000 	.word	0x40021000
 8007ff0:	007a1200 	.word	0x007a1200
 8007ff4:	00f42400 	.word	0x00f42400

08007ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008000:	2300      	movs	r3, #0
 8008002:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008004:	2300      	movs	r3, #0
 8008006:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 8098 	beq.w	8008146 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008016:	2300      	movs	r3, #0
 8008018:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800801a:	4b43      	ldr	r3, [pc, #268]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800801c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800801e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10d      	bne.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008026:	4b40      	ldr	r3, [pc, #256]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800802a:	4a3f      	ldr	r2, [pc, #252]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800802c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008030:	6593      	str	r3, [r2, #88]	@ 0x58
 8008032:	4b3d      	ldr	r3, [pc, #244]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800803a:	60bb      	str	r3, [r7, #8]
 800803c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800803e:	2301      	movs	r3, #1
 8008040:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008042:	4b3a      	ldr	r3, [pc, #232]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a39      	ldr	r2, [pc, #228]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800804c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800804e:	f7fc ffbd 	bl	8004fcc <HAL_GetTick>
 8008052:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008054:	e009      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008056:	f7fc ffb9 	bl	8004fcc <HAL_GetTick>
 800805a:	4602      	mov	r2, r0
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	2b02      	cmp	r3, #2
 8008062:	d902      	bls.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	74fb      	strb	r3, [r7, #19]
        break;
 8008068:	e005      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800806a:	4b30      	ldr	r3, [pc, #192]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008072:	2b00      	cmp	r3, #0
 8008074:	d0ef      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008076:	7cfb      	ldrb	r3, [r7, #19]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d159      	bne.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800807c:	4b2a      	ldr	r3, [pc, #168]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800807e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008086:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d01e      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008092:	697a      	ldr	r2, [r7, #20]
 8008094:	429a      	cmp	r2, r3
 8008096:	d019      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008098:	4b23      	ldr	r3, [pc, #140]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800809a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800809e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80080a4:	4b20      	ldr	r3, [pc, #128]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080aa:	4a1f      	ldr	r2, [pc, #124]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080b4:	4b1c      	ldr	r3, [pc, #112]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ba:	4a1b      	ldr	r2, [pc, #108]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80080c4:	4a18      	ldr	r2, [pc, #96]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d016      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d6:	f7fc ff79 	bl	8004fcc <HAL_GetTick>
 80080da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080dc:	e00b      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080de:	f7fc ff75 	bl	8004fcc <HAL_GetTick>
 80080e2:	4602      	mov	r2, r0
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d902      	bls.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	74fb      	strb	r3, [r7, #19]
            break;
 80080f4:	e006      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080fc:	f003 0302 	and.w	r3, r3, #2
 8008100:	2b00      	cmp	r3, #0
 8008102:	d0ec      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008104:	7cfb      	ldrb	r3, [r7, #19]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10b      	bne.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800810a:	4b07      	ldr	r3, [pc, #28]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800810c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008110:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008118:	4903      	ldr	r1, [pc, #12]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800811a:	4313      	orrs	r3, r2
 800811c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008120:	e008      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008122:	7cfb      	ldrb	r3, [r7, #19]
 8008124:	74bb      	strb	r3, [r7, #18]
 8008126:	e005      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008128:	40021000 	.word	0x40021000
 800812c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008130:	7cfb      	ldrb	r3, [r7, #19]
 8008132:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008134:	7c7b      	ldrb	r3, [r7, #17]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d105      	bne.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800813a:	4ba7      	ldr	r3, [pc, #668]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800813c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800813e:	4aa6      	ldr	r2, [pc, #664]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008140:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008144:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00a      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008152:	4ba1      	ldr	r3, [pc, #644]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008158:	f023 0203 	bic.w	r2, r3, #3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	499d      	ldr	r1, [pc, #628]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008162:	4313      	orrs	r3, r2
 8008164:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00a      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008174:	4b98      	ldr	r3, [pc, #608]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800817a:	f023 020c 	bic.w	r2, r3, #12
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	4995      	ldr	r1, [pc, #596]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008184:	4313      	orrs	r3, r2
 8008186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 0304 	and.w	r3, r3, #4
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00a      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008196:	4b90      	ldr	r3, [pc, #576]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800819c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	498c      	ldr	r1, [pc, #560]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0308 	and.w	r3, r3, #8
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00a      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80081b8:	4b87      	ldr	r3, [pc, #540]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	4984      	ldr	r1, [pc, #528]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081c8:	4313      	orrs	r3, r2
 80081ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0310 	and.w	r3, r3, #16
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00a      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80081da:	4b7f      	ldr	r3, [pc, #508]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	497b      	ldr	r1, [pc, #492]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081ea:	4313      	orrs	r3, r2
 80081ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0320 	and.w	r3, r3, #32
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00a      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80081fc:	4b76      	ldr	r3, [pc, #472]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008202:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	4973      	ldr	r1, [pc, #460]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800820c:	4313      	orrs	r3, r2
 800820e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00a      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800821e:	4b6e      	ldr	r3, [pc, #440]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008224:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	69db      	ldr	r3, [r3, #28]
 800822c:	496a      	ldr	r1, [pc, #424]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800822e:	4313      	orrs	r3, r2
 8008230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00a      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008240:	4b65      	ldr	r3, [pc, #404]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008246:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	4962      	ldr	r1, [pc, #392]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008250:	4313      	orrs	r3, r2
 8008252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00a      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008262:	4b5d      	ldr	r3, [pc, #372]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008268:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008270:	4959      	ldr	r1, [pc, #356]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008272:	4313      	orrs	r3, r2
 8008274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00a      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008284:	4b54      	ldr	r3, [pc, #336]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008286:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800828a:	f023 0203 	bic.w	r2, r3, #3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008292:	4951      	ldr	r1, [pc, #324]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008294:	4313      	orrs	r3, r2
 8008296:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00a      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082a6:	4b4c      	ldr	r3, [pc, #304]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b4:	4948      	ldr	r1, [pc, #288]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082b6:	4313      	orrs	r3, r2
 80082b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d015      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80082c8:	4b43      	ldr	r3, [pc, #268]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d6:	4940      	ldr	r1, [pc, #256]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082d8:	4313      	orrs	r3, r2
 80082da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082e6:	d105      	bne.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082e8:	4b3b      	ldr	r3, [pc, #236]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	4a3a      	ldr	r2, [pc, #232]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082f2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d015      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008300:	4b35      	ldr	r3, [pc, #212]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008306:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800830e:	4932      	ldr	r1, [pc, #200]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008310:	4313      	orrs	r3, r2
 8008312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800831a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800831e:	d105      	bne.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008320:	4b2d      	ldr	r3, [pc, #180]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	4a2c      	ldr	r2, [pc, #176]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008326:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800832a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d015      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008338:	4b27      	ldr	r3, [pc, #156]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800833a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800833e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008346:	4924      	ldr	r1, [pc, #144]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008348:	4313      	orrs	r3, r2
 800834a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008352:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008356:	d105      	bne.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008358:	4b1f      	ldr	r3, [pc, #124]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	4a1e      	ldr	r2, [pc, #120]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800835e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008362:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d015      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008370:	4b19      	ldr	r3, [pc, #100]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008376:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800837e:	4916      	ldr	r1, [pc, #88]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008380:	4313      	orrs	r3, r2
 8008382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800838a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800838e:	d105      	bne.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008390:	4b11      	ldr	r3, [pc, #68]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	4a10      	ldr	r2, [pc, #64]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008396:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800839a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d019      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80083a8:	4b0b      	ldr	r3, [pc, #44]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b6:	4908      	ldr	r1, [pc, #32]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083b8:	4313      	orrs	r3, r2
 80083ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083c6:	d109      	bne.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083c8:	4b03      	ldr	r3, [pc, #12]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	4a02      	ldr	r2, [pc, #8]	@ (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083d2:	60d3      	str	r3, [r2, #12]
 80083d4:	e002      	b.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80083d6:	bf00      	nop
 80083d8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d015      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80083e8:	4b29      	ldr	r3, [pc, #164]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80083ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083f6:	4926      	ldr	r1, [pc, #152]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80083f8:	4313      	orrs	r3, r2
 80083fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008402:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008406:	d105      	bne.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008408:	4b21      	ldr	r3, [pc, #132]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	4a20      	ldr	r2, [pc, #128]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800840e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008412:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800841c:	2b00      	cmp	r3, #0
 800841e:	d015      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008420:	4b1b      	ldr	r3, [pc, #108]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008426:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800842e:	4918      	ldr	r1, [pc, #96]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008430:	4313      	orrs	r3, r2
 8008432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800843a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800843e:	d105      	bne.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008440:	4b13      	ldr	r3, [pc, #76]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	4a12      	ldr	r2, [pc, #72]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800844a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008454:	2b00      	cmp	r3, #0
 8008456:	d015      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008458:	4b0d      	ldr	r3, [pc, #52]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800845a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800845e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008466:	490a      	ldr	r1, [pc, #40]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008468:	4313      	orrs	r3, r2
 800846a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008472:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008476:	d105      	bne.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008478:	4b05      	ldr	r3, [pc, #20]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	4a04      	ldr	r2, [pc, #16]	@ (8008490 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800847e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008482:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008484:	7cbb      	ldrb	r3, [r7, #18]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3718      	adds	r7, #24
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	40021000 	.word	0x40021000

08008494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d101      	bne.n	80084a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e049      	b.n	800853a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d106      	bne.n	80084c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7fc fb24 	bl	8004b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2202      	movs	r2, #2
 80084c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	3304      	adds	r3, #4
 80084d0:	4619      	mov	r1, r3
 80084d2:	4610      	mov	r0, r2
 80084d4:	f000 fc58 	bl	8008d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
	...

08008544 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008552:	b2db      	uxtb	r3, r3
 8008554:	2b01      	cmp	r3, #1
 8008556:	d001      	beq.n	800855c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e04c      	b.n	80085f6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2202      	movs	r2, #2
 8008560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a26      	ldr	r2, [pc, #152]	@ (8008604 <HAL_TIM_Base_Start+0xc0>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d022      	beq.n	80085b4 <HAL_TIM_Base_Start+0x70>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008576:	d01d      	beq.n	80085b4 <HAL_TIM_Base_Start+0x70>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a22      	ldr	r2, [pc, #136]	@ (8008608 <HAL_TIM_Base_Start+0xc4>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d018      	beq.n	80085b4 <HAL_TIM_Base_Start+0x70>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a21      	ldr	r2, [pc, #132]	@ (800860c <HAL_TIM_Base_Start+0xc8>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d013      	beq.n	80085b4 <HAL_TIM_Base_Start+0x70>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a1f      	ldr	r2, [pc, #124]	@ (8008610 <HAL_TIM_Base_Start+0xcc>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d00e      	beq.n	80085b4 <HAL_TIM_Base_Start+0x70>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a1e      	ldr	r2, [pc, #120]	@ (8008614 <HAL_TIM_Base_Start+0xd0>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d009      	beq.n	80085b4 <HAL_TIM_Base_Start+0x70>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a1c      	ldr	r2, [pc, #112]	@ (8008618 <HAL_TIM_Base_Start+0xd4>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d004      	beq.n	80085b4 <HAL_TIM_Base_Start+0x70>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a1b      	ldr	r2, [pc, #108]	@ (800861c <HAL_TIM_Base_Start+0xd8>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d115      	bne.n	80085e0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	689a      	ldr	r2, [r3, #8]
 80085ba:	4b19      	ldr	r3, [pc, #100]	@ (8008620 <HAL_TIM_Base_Start+0xdc>)
 80085bc:	4013      	ands	r3, r2
 80085be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2b06      	cmp	r3, #6
 80085c4:	d015      	beq.n	80085f2 <HAL_TIM_Base_Start+0xae>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085cc:	d011      	beq.n	80085f2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f042 0201 	orr.w	r2, r2, #1
 80085dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085de:	e008      	b.n	80085f2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f042 0201 	orr.w	r2, r2, #1
 80085ee:	601a      	str	r2, [r3, #0]
 80085f0:	e000      	b.n	80085f4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	40012c00 	.word	0x40012c00
 8008608:	40000400 	.word	0x40000400
 800860c:	40000800 	.word	0x40000800
 8008610:	40000c00 	.word	0x40000c00
 8008614:	40013400 	.word	0x40013400
 8008618:	40014000 	.word	0x40014000
 800861c:	40015000 	.word	0x40015000
 8008620:	00010007 	.word	0x00010007

08008624 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e049      	b.n	80086ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	d106      	bne.n	8008650 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f7fc f8de 	bl	800480c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2202      	movs	r2, #2
 8008654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	3304      	adds	r3, #4
 8008660:	4619      	mov	r1, r3
 8008662:	4610      	mov	r0, r2
 8008664:	f000 fb90 	bl	8008d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
	...

080086d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d109      	bne.n	80086f8 <HAL_TIM_PWM_Start+0x24>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	bf14      	ite	ne
 80086f0:	2301      	movne	r3, #1
 80086f2:	2300      	moveq	r3, #0
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	e03c      	b.n	8008772 <HAL_TIM_PWM_Start+0x9e>
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	2b04      	cmp	r3, #4
 80086fc:	d109      	bne.n	8008712 <HAL_TIM_PWM_Start+0x3e>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b01      	cmp	r3, #1
 8008708:	bf14      	ite	ne
 800870a:	2301      	movne	r3, #1
 800870c:	2300      	moveq	r3, #0
 800870e:	b2db      	uxtb	r3, r3
 8008710:	e02f      	b.n	8008772 <HAL_TIM_PWM_Start+0x9e>
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	2b08      	cmp	r3, #8
 8008716:	d109      	bne.n	800872c <HAL_TIM_PWM_Start+0x58>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b01      	cmp	r3, #1
 8008722:	bf14      	ite	ne
 8008724:	2301      	movne	r3, #1
 8008726:	2300      	moveq	r3, #0
 8008728:	b2db      	uxtb	r3, r3
 800872a:	e022      	b.n	8008772 <HAL_TIM_PWM_Start+0x9e>
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	2b0c      	cmp	r3, #12
 8008730:	d109      	bne.n	8008746 <HAL_TIM_PWM_Start+0x72>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b01      	cmp	r3, #1
 800873c:	bf14      	ite	ne
 800873e:	2301      	movne	r3, #1
 8008740:	2300      	moveq	r3, #0
 8008742:	b2db      	uxtb	r3, r3
 8008744:	e015      	b.n	8008772 <HAL_TIM_PWM_Start+0x9e>
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	2b10      	cmp	r3, #16
 800874a:	d109      	bne.n	8008760 <HAL_TIM_PWM_Start+0x8c>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b01      	cmp	r3, #1
 8008756:	bf14      	ite	ne
 8008758:	2301      	movne	r3, #1
 800875a:	2300      	moveq	r3, #0
 800875c:	b2db      	uxtb	r3, r3
 800875e:	e008      	b.n	8008772 <HAL_TIM_PWM_Start+0x9e>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008766:	b2db      	uxtb	r3, r3
 8008768:	2b01      	cmp	r3, #1
 800876a:	bf14      	ite	ne
 800876c:	2301      	movne	r3, #1
 800876e:	2300      	moveq	r3, #0
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e0a6      	b.n	80088c8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d104      	bne.n	800878a <HAL_TIM_PWM_Start+0xb6>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2202      	movs	r2, #2
 8008784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008788:	e023      	b.n	80087d2 <HAL_TIM_PWM_Start+0xfe>
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	2b04      	cmp	r3, #4
 800878e:	d104      	bne.n	800879a <HAL_TIM_PWM_Start+0xc6>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2202      	movs	r2, #2
 8008794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008798:	e01b      	b.n	80087d2 <HAL_TIM_PWM_Start+0xfe>
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2b08      	cmp	r3, #8
 800879e:	d104      	bne.n	80087aa <HAL_TIM_PWM_Start+0xd6>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2202      	movs	r2, #2
 80087a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087a8:	e013      	b.n	80087d2 <HAL_TIM_PWM_Start+0xfe>
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	2b0c      	cmp	r3, #12
 80087ae:	d104      	bne.n	80087ba <HAL_TIM_PWM_Start+0xe6>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2202      	movs	r2, #2
 80087b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80087b8:	e00b      	b.n	80087d2 <HAL_TIM_PWM_Start+0xfe>
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2b10      	cmp	r3, #16
 80087be:	d104      	bne.n	80087ca <HAL_TIM_PWM_Start+0xf6>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2202      	movs	r2, #2
 80087c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087c8:	e003      	b.n	80087d2 <HAL_TIM_PWM_Start+0xfe>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2202      	movs	r2, #2
 80087ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2201      	movs	r2, #1
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 feb2 	bl	8009544 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a3a      	ldr	r2, [pc, #232]	@ (80088d0 <HAL_TIM_PWM_Start+0x1fc>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d018      	beq.n	800881c <HAL_TIM_PWM_Start+0x148>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a39      	ldr	r2, [pc, #228]	@ (80088d4 <HAL_TIM_PWM_Start+0x200>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d013      	beq.n	800881c <HAL_TIM_PWM_Start+0x148>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a37      	ldr	r2, [pc, #220]	@ (80088d8 <HAL_TIM_PWM_Start+0x204>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d00e      	beq.n	800881c <HAL_TIM_PWM_Start+0x148>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a36      	ldr	r2, [pc, #216]	@ (80088dc <HAL_TIM_PWM_Start+0x208>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d009      	beq.n	800881c <HAL_TIM_PWM_Start+0x148>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a34      	ldr	r2, [pc, #208]	@ (80088e0 <HAL_TIM_PWM_Start+0x20c>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d004      	beq.n	800881c <HAL_TIM_PWM_Start+0x148>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a33      	ldr	r2, [pc, #204]	@ (80088e4 <HAL_TIM_PWM_Start+0x210>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d101      	bne.n	8008820 <HAL_TIM_PWM_Start+0x14c>
 800881c:	2301      	movs	r3, #1
 800881e:	e000      	b.n	8008822 <HAL_TIM_PWM_Start+0x14e>
 8008820:	2300      	movs	r3, #0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d007      	beq.n	8008836 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008834:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a25      	ldr	r2, [pc, #148]	@ (80088d0 <HAL_TIM_PWM_Start+0x1fc>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d022      	beq.n	8008886 <HAL_TIM_PWM_Start+0x1b2>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008848:	d01d      	beq.n	8008886 <HAL_TIM_PWM_Start+0x1b2>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a26      	ldr	r2, [pc, #152]	@ (80088e8 <HAL_TIM_PWM_Start+0x214>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d018      	beq.n	8008886 <HAL_TIM_PWM_Start+0x1b2>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a24      	ldr	r2, [pc, #144]	@ (80088ec <HAL_TIM_PWM_Start+0x218>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d013      	beq.n	8008886 <HAL_TIM_PWM_Start+0x1b2>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a23      	ldr	r2, [pc, #140]	@ (80088f0 <HAL_TIM_PWM_Start+0x21c>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d00e      	beq.n	8008886 <HAL_TIM_PWM_Start+0x1b2>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a19      	ldr	r2, [pc, #100]	@ (80088d4 <HAL_TIM_PWM_Start+0x200>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d009      	beq.n	8008886 <HAL_TIM_PWM_Start+0x1b2>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a18      	ldr	r2, [pc, #96]	@ (80088d8 <HAL_TIM_PWM_Start+0x204>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d004      	beq.n	8008886 <HAL_TIM_PWM_Start+0x1b2>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a18      	ldr	r2, [pc, #96]	@ (80088e4 <HAL_TIM_PWM_Start+0x210>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d115      	bne.n	80088b2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	689a      	ldr	r2, [r3, #8]
 800888c:	4b19      	ldr	r3, [pc, #100]	@ (80088f4 <HAL_TIM_PWM_Start+0x220>)
 800888e:	4013      	ands	r3, r2
 8008890:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2b06      	cmp	r3, #6
 8008896:	d015      	beq.n	80088c4 <HAL_TIM_PWM_Start+0x1f0>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800889e:	d011      	beq.n	80088c4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f042 0201 	orr.w	r2, r2, #1
 80088ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088b0:	e008      	b.n	80088c4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f042 0201 	orr.w	r2, r2, #1
 80088c0:	601a      	str	r2, [r3, #0]
 80088c2:	e000      	b.n	80088c6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	40012c00 	.word	0x40012c00
 80088d4:	40013400 	.word	0x40013400
 80088d8:	40014000 	.word	0x40014000
 80088dc:	40014400 	.word	0x40014400
 80088e0:	40014800 	.word	0x40014800
 80088e4:	40015000 	.word	0x40015000
 80088e8:	40000400 	.word	0x40000400
 80088ec:	40000800 	.word	0x40000800
 80088f0:	40000c00 	.word	0x40000c00
 80088f4:	00010007 	.word	0x00010007

080088f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b086      	sub	sp, #24
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d101      	bne.n	800890c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e097      	b.n	8008a3c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b00      	cmp	r3, #0
 8008916:	d106      	bne.n	8008926 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7fb ff93 	bl	800484c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2202      	movs	r2, #2
 800892a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	6812      	ldr	r2, [r2, #0]
 8008938:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800893c:	f023 0307 	bic.w	r3, r3, #7
 8008940:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	3304      	adds	r3, #4
 800894a:	4619      	mov	r1, r3
 800894c:	4610      	mov	r0, r2
 800894e:	f000 fa1b 	bl	8008d88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6a1b      	ldr	r3, [r3, #32]
 8008968:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	4313      	orrs	r3, r2
 8008972:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800897a:	f023 0303 	bic.w	r3, r3, #3
 800897e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	689a      	ldr	r2, [r3, #8]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	021b      	lsls	r3, r3, #8
 800898a:	4313      	orrs	r3, r2
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	4313      	orrs	r3, r2
 8008990:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008998:	f023 030c 	bic.w	r3, r3, #12
 800899c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80089a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	68da      	ldr	r2, [r3, #12]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	021b      	lsls	r3, r3, #8
 80089b4:	4313      	orrs	r3, r2
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	011a      	lsls	r2, r3, #4
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	031b      	lsls	r3, r3, #12
 80089c8:	4313      	orrs	r3, r2
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80089d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80089de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	685a      	ldr	r2, [r3, #4]
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	695b      	ldr	r3, [r3, #20]
 80089e8:	011b      	lsls	r3, r3, #4
 80089ea:	4313      	orrs	r3, r2
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3718      	adds	r7, #24
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a54:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008a5c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a64:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a6c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d110      	bne.n	8008a96 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d102      	bne.n	8008a80 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a7a:	7b7b      	ldrb	r3, [r7, #13]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d001      	beq.n	8008a84 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	e069      	b.n	8008b58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2202      	movs	r2, #2
 8008a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a94:	e031      	b.n	8008afa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2b04      	cmp	r3, #4
 8008a9a:	d110      	bne.n	8008abe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a9c:	7bbb      	ldrb	r3, [r7, #14]
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d102      	bne.n	8008aa8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008aa2:	7b3b      	ldrb	r3, [r7, #12]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d001      	beq.n	8008aac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e055      	b.n	8008b58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008abc:	e01d      	b.n	8008afa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d108      	bne.n	8008ad6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ac4:	7bbb      	ldrb	r3, [r7, #14]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d105      	bne.n	8008ad6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008aca:	7b7b      	ldrb	r3, [r7, #13]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d102      	bne.n	8008ad6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ad0:	7b3b      	ldrb	r3, [r7, #12]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d001      	beq.n	8008ada <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e03e      	b.n	8008b58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2202      	movs	r2, #2
 8008ade:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2202      	movs	r2, #2
 8008ae6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2202      	movs	r2, #2
 8008aee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2202      	movs	r2, #2
 8008af6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d003      	beq.n	8008b08 <HAL_TIM_Encoder_Start+0xc4>
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	2b04      	cmp	r3, #4
 8008b04:	d008      	beq.n	8008b18 <HAL_TIM_Encoder_Start+0xd4>
 8008b06:	e00f      	b.n	8008b28 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	2100      	movs	r1, #0
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 fd17 	bl	8009544 <TIM_CCxChannelCmd>
      break;
 8008b16:	e016      	b.n	8008b46 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	2104      	movs	r1, #4
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 fd0f 	bl	8009544 <TIM_CCxChannelCmd>
      break;
 8008b26:	e00e      	b.n	8008b46 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	2100      	movs	r1, #0
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 fd07 	bl	8009544 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	2104      	movs	r1, #4
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 fd00 	bl	8009544 <TIM_CCxChannelCmd>
      break;
 8008b44:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f042 0201 	orr.w	r2, r2, #1
 8008b54:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d101      	bne.n	8008b7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	e0ff      	b.n	8008d7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2b14      	cmp	r3, #20
 8008b8a:	f200 80f0 	bhi.w	8008d6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b94:	08008be9 	.word	0x08008be9
 8008b98:	08008d6f 	.word	0x08008d6f
 8008b9c:	08008d6f 	.word	0x08008d6f
 8008ba0:	08008d6f 	.word	0x08008d6f
 8008ba4:	08008c29 	.word	0x08008c29
 8008ba8:	08008d6f 	.word	0x08008d6f
 8008bac:	08008d6f 	.word	0x08008d6f
 8008bb0:	08008d6f 	.word	0x08008d6f
 8008bb4:	08008c6b 	.word	0x08008c6b
 8008bb8:	08008d6f 	.word	0x08008d6f
 8008bbc:	08008d6f 	.word	0x08008d6f
 8008bc0:	08008d6f 	.word	0x08008d6f
 8008bc4:	08008cab 	.word	0x08008cab
 8008bc8:	08008d6f 	.word	0x08008d6f
 8008bcc:	08008d6f 	.word	0x08008d6f
 8008bd0:	08008d6f 	.word	0x08008d6f
 8008bd4:	08008ced 	.word	0x08008ced
 8008bd8:	08008d6f 	.word	0x08008d6f
 8008bdc:	08008d6f 	.word	0x08008d6f
 8008be0:	08008d6f 	.word	0x08008d6f
 8008be4:	08008d2d 	.word	0x08008d2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68b9      	ldr	r1, [r7, #8]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f000 f97e 	bl	8008ef0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	699a      	ldr	r2, [r3, #24]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f042 0208 	orr.w	r2, r2, #8
 8008c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	699a      	ldr	r2, [r3, #24]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f022 0204 	bic.w	r2, r2, #4
 8008c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6999      	ldr	r1, [r3, #24]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	691a      	ldr	r2, [r3, #16]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	619a      	str	r2, [r3, #24]
      break;
 8008c26:	e0a5      	b.n	8008d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68b9      	ldr	r1, [r7, #8]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 f9f8 	bl	8009024 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	699a      	ldr	r2, [r3, #24]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	699a      	ldr	r2, [r3, #24]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6999      	ldr	r1, [r3, #24]
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	021a      	lsls	r2, r3, #8
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	430a      	orrs	r2, r1
 8008c66:	619a      	str	r2, [r3, #24]
      break;
 8008c68:	e084      	b.n	8008d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68b9      	ldr	r1, [r7, #8]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 fa6b 	bl	800914c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	69da      	ldr	r2, [r3, #28]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f042 0208 	orr.w	r2, r2, #8
 8008c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	69da      	ldr	r2, [r3, #28]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f022 0204 	bic.w	r2, r2, #4
 8008c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	69d9      	ldr	r1, [r3, #28]
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	691a      	ldr	r2, [r3, #16]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	430a      	orrs	r2, r1
 8008ca6:	61da      	str	r2, [r3, #28]
      break;
 8008ca8:	e064      	b.n	8008d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68b9      	ldr	r1, [r7, #8]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f000 fadd 	bl	8009270 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	69da      	ldr	r2, [r3, #28]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	69da      	ldr	r2, [r3, #28]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	69d9      	ldr	r1, [r3, #28]
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	021a      	lsls	r2, r3, #8
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	430a      	orrs	r2, r1
 8008ce8:	61da      	str	r2, [r3, #28]
      break;
 8008cea:	e043      	b.n	8008d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68b9      	ldr	r1, [r7, #8]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 fb50 	bl	8009398 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f042 0208 	orr.w	r2, r2, #8
 8008d06:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f022 0204 	bic.w	r2, r2, #4
 8008d16:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	691a      	ldr	r2, [r3, #16]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	430a      	orrs	r2, r1
 8008d28:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008d2a:	e023      	b.n	8008d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68b9      	ldr	r1, [r7, #8]
 8008d32:	4618      	mov	r0, r3
 8008d34:	f000 fb9a 	bl	800946c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d46:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d56:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	021a      	lsls	r2, r3, #8
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	430a      	orrs	r2, r1
 8008d6a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008d6c:	e002      	b.n	8008d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	75fb      	strb	r3, [r7, #23]
      break;
 8008d72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3718      	adds	r7, #24
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop

08008d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a4c      	ldr	r2, [pc, #304]	@ (8008ecc <TIM_Base_SetConfig+0x144>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d017      	beq.n	8008dd0 <TIM_Base_SetConfig+0x48>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008da6:	d013      	beq.n	8008dd0 <TIM_Base_SetConfig+0x48>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a49      	ldr	r2, [pc, #292]	@ (8008ed0 <TIM_Base_SetConfig+0x148>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d00f      	beq.n	8008dd0 <TIM_Base_SetConfig+0x48>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a48      	ldr	r2, [pc, #288]	@ (8008ed4 <TIM_Base_SetConfig+0x14c>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d00b      	beq.n	8008dd0 <TIM_Base_SetConfig+0x48>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a47      	ldr	r2, [pc, #284]	@ (8008ed8 <TIM_Base_SetConfig+0x150>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d007      	beq.n	8008dd0 <TIM_Base_SetConfig+0x48>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a46      	ldr	r2, [pc, #280]	@ (8008edc <TIM_Base_SetConfig+0x154>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d003      	beq.n	8008dd0 <TIM_Base_SetConfig+0x48>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a45      	ldr	r2, [pc, #276]	@ (8008ee0 <TIM_Base_SetConfig+0x158>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d108      	bne.n	8008de2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a39      	ldr	r2, [pc, #228]	@ (8008ecc <TIM_Base_SetConfig+0x144>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d023      	beq.n	8008e32 <TIM_Base_SetConfig+0xaa>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008df0:	d01f      	beq.n	8008e32 <TIM_Base_SetConfig+0xaa>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a36      	ldr	r2, [pc, #216]	@ (8008ed0 <TIM_Base_SetConfig+0x148>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d01b      	beq.n	8008e32 <TIM_Base_SetConfig+0xaa>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a35      	ldr	r2, [pc, #212]	@ (8008ed4 <TIM_Base_SetConfig+0x14c>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d017      	beq.n	8008e32 <TIM_Base_SetConfig+0xaa>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a34      	ldr	r2, [pc, #208]	@ (8008ed8 <TIM_Base_SetConfig+0x150>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d013      	beq.n	8008e32 <TIM_Base_SetConfig+0xaa>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a33      	ldr	r2, [pc, #204]	@ (8008edc <TIM_Base_SetConfig+0x154>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d00f      	beq.n	8008e32 <TIM_Base_SetConfig+0xaa>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a33      	ldr	r2, [pc, #204]	@ (8008ee4 <TIM_Base_SetConfig+0x15c>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d00b      	beq.n	8008e32 <TIM_Base_SetConfig+0xaa>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a32      	ldr	r2, [pc, #200]	@ (8008ee8 <TIM_Base_SetConfig+0x160>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d007      	beq.n	8008e32 <TIM_Base_SetConfig+0xaa>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a31      	ldr	r2, [pc, #196]	@ (8008eec <TIM_Base_SetConfig+0x164>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d003      	beq.n	8008e32 <TIM_Base_SetConfig+0xaa>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a2c      	ldr	r2, [pc, #176]	@ (8008ee0 <TIM_Base_SetConfig+0x158>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d108      	bne.n	8008e44 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	695b      	ldr	r3, [r3, #20]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	689a      	ldr	r2, [r3, #8]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a18      	ldr	r2, [pc, #96]	@ (8008ecc <TIM_Base_SetConfig+0x144>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d013      	beq.n	8008e98 <TIM_Base_SetConfig+0x110>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a1a      	ldr	r2, [pc, #104]	@ (8008edc <TIM_Base_SetConfig+0x154>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d00f      	beq.n	8008e98 <TIM_Base_SetConfig+0x110>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a1a      	ldr	r2, [pc, #104]	@ (8008ee4 <TIM_Base_SetConfig+0x15c>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d00b      	beq.n	8008e98 <TIM_Base_SetConfig+0x110>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a19      	ldr	r2, [pc, #100]	@ (8008ee8 <TIM_Base_SetConfig+0x160>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d007      	beq.n	8008e98 <TIM_Base_SetConfig+0x110>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a18      	ldr	r2, [pc, #96]	@ (8008eec <TIM_Base_SetConfig+0x164>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d003      	beq.n	8008e98 <TIM_Base_SetConfig+0x110>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a13      	ldr	r2, [pc, #76]	@ (8008ee0 <TIM_Base_SetConfig+0x158>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d103      	bne.n	8008ea0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	691a      	ldr	r2, [r3, #16]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d105      	bne.n	8008ebe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	f023 0201 	bic.w	r2, r3, #1
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	611a      	str	r2, [r3, #16]
  }
}
 8008ebe:	bf00      	nop
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	40012c00 	.word	0x40012c00
 8008ed0:	40000400 	.word	0x40000400
 8008ed4:	40000800 	.word	0x40000800
 8008ed8:	40000c00 	.word	0x40000c00
 8008edc:	40013400 	.word	0x40013400
 8008ee0:	40015000 	.word	0x40015000
 8008ee4:	40014000 	.word	0x40014000
 8008ee8:	40014400 	.word	0x40014400
 8008eec:	40014800 	.word	0x40014800

08008ef0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b087      	sub	sp, #28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a1b      	ldr	r3, [r3, #32]
 8008efe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a1b      	ldr	r3, [r3, #32]
 8008f04:	f023 0201 	bic.w	r2, r3, #1
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	699b      	ldr	r3, [r3, #24]
 8008f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f023 0303 	bic.w	r3, r3, #3
 8008f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f023 0302 	bic.w	r3, r3, #2
 8008f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	697a      	ldr	r2, [r7, #20]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a30      	ldr	r2, [pc, #192]	@ (800900c <TIM_OC1_SetConfig+0x11c>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d013      	beq.n	8008f78 <TIM_OC1_SetConfig+0x88>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a2f      	ldr	r2, [pc, #188]	@ (8009010 <TIM_OC1_SetConfig+0x120>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d00f      	beq.n	8008f78 <TIM_OC1_SetConfig+0x88>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a2e      	ldr	r2, [pc, #184]	@ (8009014 <TIM_OC1_SetConfig+0x124>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d00b      	beq.n	8008f78 <TIM_OC1_SetConfig+0x88>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a2d      	ldr	r2, [pc, #180]	@ (8009018 <TIM_OC1_SetConfig+0x128>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d007      	beq.n	8008f78 <TIM_OC1_SetConfig+0x88>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a2c      	ldr	r2, [pc, #176]	@ (800901c <TIM_OC1_SetConfig+0x12c>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d003      	beq.n	8008f78 <TIM_OC1_SetConfig+0x88>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a2b      	ldr	r2, [pc, #172]	@ (8009020 <TIM_OC1_SetConfig+0x130>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d10c      	bne.n	8008f92 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	f023 0308 	bic.w	r3, r3, #8
 8008f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	697a      	ldr	r2, [r7, #20]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f023 0304 	bic.w	r3, r3, #4
 8008f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a1d      	ldr	r2, [pc, #116]	@ (800900c <TIM_OC1_SetConfig+0x11c>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d013      	beq.n	8008fc2 <TIM_OC1_SetConfig+0xd2>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8009010 <TIM_OC1_SetConfig+0x120>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d00f      	beq.n	8008fc2 <TIM_OC1_SetConfig+0xd2>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8009014 <TIM_OC1_SetConfig+0x124>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d00b      	beq.n	8008fc2 <TIM_OC1_SetConfig+0xd2>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4a1a      	ldr	r2, [pc, #104]	@ (8009018 <TIM_OC1_SetConfig+0x128>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d007      	beq.n	8008fc2 <TIM_OC1_SetConfig+0xd2>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a19      	ldr	r2, [pc, #100]	@ (800901c <TIM_OC1_SetConfig+0x12c>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d003      	beq.n	8008fc2 <TIM_OC1_SetConfig+0xd2>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4a18      	ldr	r2, [pc, #96]	@ (8009020 <TIM_OC1_SetConfig+0x130>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d111      	bne.n	8008fe6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	685a      	ldr	r2, [r3, #4]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	621a      	str	r2, [r3, #32]
}
 8009000:	bf00      	nop
 8009002:	371c      	adds	r7, #28
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	40012c00 	.word	0x40012c00
 8009010:	40013400 	.word	0x40013400
 8009014:	40014000 	.word	0x40014000
 8009018:	40014400 	.word	0x40014400
 800901c:	40014800 	.word	0x40014800
 8009020:	40015000 	.word	0x40015000

08009024 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009024:	b480      	push	{r7}
 8009026:	b087      	sub	sp, #28
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a1b      	ldr	r3, [r3, #32]
 8009038:	f023 0210 	bic.w	r2, r3, #16
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009052:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800905e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	021b      	lsls	r3, r3, #8
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	4313      	orrs	r3, r2
 800906a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	f023 0320 	bic.w	r3, r3, #32
 8009072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	011b      	lsls	r3, r3, #4
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	4313      	orrs	r3, r2
 800907e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a2c      	ldr	r2, [pc, #176]	@ (8009134 <TIM_OC2_SetConfig+0x110>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d007      	beq.n	8009098 <TIM_OC2_SetConfig+0x74>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a2b      	ldr	r2, [pc, #172]	@ (8009138 <TIM_OC2_SetConfig+0x114>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d003      	beq.n	8009098 <TIM_OC2_SetConfig+0x74>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4a2a      	ldr	r2, [pc, #168]	@ (800913c <TIM_OC2_SetConfig+0x118>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d10d      	bne.n	80090b4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800909e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	011b      	lsls	r3, r3, #4
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a1f      	ldr	r2, [pc, #124]	@ (8009134 <TIM_OC2_SetConfig+0x110>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d013      	beq.n	80090e4 <TIM_OC2_SetConfig+0xc0>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a1e      	ldr	r2, [pc, #120]	@ (8009138 <TIM_OC2_SetConfig+0x114>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d00f      	beq.n	80090e4 <TIM_OC2_SetConfig+0xc0>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a1e      	ldr	r2, [pc, #120]	@ (8009140 <TIM_OC2_SetConfig+0x11c>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d00b      	beq.n	80090e4 <TIM_OC2_SetConfig+0xc0>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a1d      	ldr	r2, [pc, #116]	@ (8009144 <TIM_OC2_SetConfig+0x120>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d007      	beq.n	80090e4 <TIM_OC2_SetConfig+0xc0>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a1c      	ldr	r2, [pc, #112]	@ (8009148 <TIM_OC2_SetConfig+0x124>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d003      	beq.n	80090e4 <TIM_OC2_SetConfig+0xc0>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a17      	ldr	r2, [pc, #92]	@ (800913c <TIM_OC2_SetConfig+0x118>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d113      	bne.n	800910c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80090ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80090f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	695b      	ldr	r3, [r3, #20]
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	693a      	ldr	r2, [r7, #16]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	693a      	ldr	r2, [r7, #16]
 8009108:	4313      	orrs	r3, r2
 800910a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	693a      	ldr	r2, [r7, #16]
 8009110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	685a      	ldr	r2, [r3, #4]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	697a      	ldr	r2, [r7, #20]
 8009124:	621a      	str	r2, [r3, #32]
}
 8009126:	bf00      	nop
 8009128:	371c      	adds	r7, #28
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	40012c00 	.word	0x40012c00
 8009138:	40013400 	.word	0x40013400
 800913c:	40015000 	.word	0x40015000
 8009140:	40014000 	.word	0x40014000
 8009144:	40014400 	.word	0x40014400
 8009148:	40014800 	.word	0x40014800

0800914c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800914c:	b480      	push	{r7}
 800914e:	b087      	sub	sp, #28
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a1b      	ldr	r3, [r3, #32]
 8009160:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	69db      	ldr	r3, [r3, #28]
 8009172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800917a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800917e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f023 0303 	bic.w	r3, r3, #3
 8009186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	4313      	orrs	r3, r2
 8009190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	021b      	lsls	r3, r3, #8
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a2b      	ldr	r2, [pc, #172]	@ (8009258 <TIM_OC3_SetConfig+0x10c>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d007      	beq.n	80091be <TIM_OC3_SetConfig+0x72>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a2a      	ldr	r2, [pc, #168]	@ (800925c <TIM_OC3_SetConfig+0x110>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d003      	beq.n	80091be <TIM_OC3_SetConfig+0x72>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a29      	ldr	r2, [pc, #164]	@ (8009260 <TIM_OC3_SetConfig+0x114>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d10d      	bne.n	80091da <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80091c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	021b      	lsls	r3, r3, #8
 80091cc:	697a      	ldr	r2, [r7, #20]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80091d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a1e      	ldr	r2, [pc, #120]	@ (8009258 <TIM_OC3_SetConfig+0x10c>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d013      	beq.n	800920a <TIM_OC3_SetConfig+0xbe>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a1d      	ldr	r2, [pc, #116]	@ (800925c <TIM_OC3_SetConfig+0x110>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d00f      	beq.n	800920a <TIM_OC3_SetConfig+0xbe>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a1d      	ldr	r2, [pc, #116]	@ (8009264 <TIM_OC3_SetConfig+0x118>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d00b      	beq.n	800920a <TIM_OC3_SetConfig+0xbe>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009268 <TIM_OC3_SetConfig+0x11c>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d007      	beq.n	800920a <TIM_OC3_SetConfig+0xbe>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a1b      	ldr	r2, [pc, #108]	@ (800926c <TIM_OC3_SetConfig+0x120>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d003      	beq.n	800920a <TIM_OC3_SetConfig+0xbe>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a16      	ldr	r2, [pc, #88]	@ (8009260 <TIM_OC3_SetConfig+0x114>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d113      	bne.n	8009232 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	011b      	lsls	r3, r3, #4
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	4313      	orrs	r3, r2
 8009224:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	011b      	lsls	r3, r3, #4
 800922c:	693a      	ldr	r2, [r7, #16]
 800922e:	4313      	orrs	r3, r2
 8009230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	685a      	ldr	r2, [r3, #4]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	697a      	ldr	r2, [r7, #20]
 800924a:	621a      	str	r2, [r3, #32]
}
 800924c:	bf00      	nop
 800924e:	371c      	adds	r7, #28
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	40012c00 	.word	0x40012c00
 800925c:	40013400 	.word	0x40013400
 8009260:	40015000 	.word	0x40015000
 8009264:	40014000 	.word	0x40014000
 8009268:	40014400 	.word	0x40014400
 800926c:	40014800 	.word	0x40014800

08009270 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009270:	b480      	push	{r7}
 8009272:	b087      	sub	sp, #28
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a1b      	ldr	r3, [r3, #32]
 800927e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a1b      	ldr	r3, [r3, #32]
 8009284:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	69db      	ldr	r3, [r3, #28]
 8009296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800929e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	021b      	lsls	r3, r3, #8
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80092be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	031b      	lsls	r3, r3, #12
 80092c6:	697a      	ldr	r2, [r7, #20]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a2c      	ldr	r2, [pc, #176]	@ (8009380 <TIM_OC4_SetConfig+0x110>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d007      	beq.n	80092e4 <TIM_OC4_SetConfig+0x74>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a2b      	ldr	r2, [pc, #172]	@ (8009384 <TIM_OC4_SetConfig+0x114>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d003      	beq.n	80092e4 <TIM_OC4_SetConfig+0x74>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a2a      	ldr	r2, [pc, #168]	@ (8009388 <TIM_OC4_SetConfig+0x118>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d10d      	bne.n	8009300 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80092ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	031b      	lsls	r3, r3, #12
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4a1f      	ldr	r2, [pc, #124]	@ (8009380 <TIM_OC4_SetConfig+0x110>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d013      	beq.n	8009330 <TIM_OC4_SetConfig+0xc0>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a1e      	ldr	r2, [pc, #120]	@ (8009384 <TIM_OC4_SetConfig+0x114>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d00f      	beq.n	8009330 <TIM_OC4_SetConfig+0xc0>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4a1e      	ldr	r2, [pc, #120]	@ (800938c <TIM_OC4_SetConfig+0x11c>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d00b      	beq.n	8009330 <TIM_OC4_SetConfig+0xc0>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a1d      	ldr	r2, [pc, #116]	@ (8009390 <TIM_OC4_SetConfig+0x120>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d007      	beq.n	8009330 <TIM_OC4_SetConfig+0xc0>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a1c      	ldr	r2, [pc, #112]	@ (8009394 <TIM_OC4_SetConfig+0x124>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d003      	beq.n	8009330 <TIM_OC4_SetConfig+0xc0>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a17      	ldr	r2, [pc, #92]	@ (8009388 <TIM_OC4_SetConfig+0x118>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d113      	bne.n	8009358 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009336:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800933e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	695b      	ldr	r3, [r3, #20]
 8009344:	019b      	lsls	r3, r3, #6
 8009346:	693a      	ldr	r2, [r7, #16]
 8009348:	4313      	orrs	r3, r2
 800934a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	699b      	ldr	r3, [r3, #24]
 8009350:	019b      	lsls	r3, r3, #6
 8009352:	693a      	ldr	r2, [r7, #16]
 8009354:	4313      	orrs	r3, r2
 8009356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	693a      	ldr	r2, [r7, #16]
 800935c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	685a      	ldr	r2, [r3, #4]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	621a      	str	r2, [r3, #32]
}
 8009372:	bf00      	nop
 8009374:	371c      	adds	r7, #28
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	40012c00 	.word	0x40012c00
 8009384:	40013400 	.word	0x40013400
 8009388:	40015000 	.word	0x40015000
 800938c:	40014000 	.word	0x40014000
 8009390:	40014400 	.word	0x40014400
 8009394:	40014800 	.word	0x40014800

08009398 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009398:	b480      	push	{r7}
 800939a:	b087      	sub	sp, #28
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a1b      	ldr	r3, [r3, #32]
 80093a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6a1b      	ldr	r3, [r3, #32]
 80093ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80093dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	041b      	lsls	r3, r3, #16
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a19      	ldr	r2, [pc, #100]	@ (8009454 <TIM_OC5_SetConfig+0xbc>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d013      	beq.n	800941a <TIM_OC5_SetConfig+0x82>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a18      	ldr	r2, [pc, #96]	@ (8009458 <TIM_OC5_SetConfig+0xc0>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d00f      	beq.n	800941a <TIM_OC5_SetConfig+0x82>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a17      	ldr	r2, [pc, #92]	@ (800945c <TIM_OC5_SetConfig+0xc4>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d00b      	beq.n	800941a <TIM_OC5_SetConfig+0x82>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a16      	ldr	r2, [pc, #88]	@ (8009460 <TIM_OC5_SetConfig+0xc8>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d007      	beq.n	800941a <TIM_OC5_SetConfig+0x82>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a15      	ldr	r2, [pc, #84]	@ (8009464 <TIM_OC5_SetConfig+0xcc>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d003      	beq.n	800941a <TIM_OC5_SetConfig+0x82>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a14      	ldr	r2, [pc, #80]	@ (8009468 <TIM_OC5_SetConfig+0xd0>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d109      	bne.n	800942e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009420:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	695b      	ldr	r3, [r3, #20]
 8009426:	021b      	lsls	r3, r3, #8
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	4313      	orrs	r3, r2
 800942c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	697a      	ldr	r2, [r7, #20]
 8009432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	685a      	ldr	r2, [r3, #4]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	621a      	str	r2, [r3, #32]
}
 8009448:	bf00      	nop
 800944a:	371c      	adds	r7, #28
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr
 8009454:	40012c00 	.word	0x40012c00
 8009458:	40013400 	.word	0x40013400
 800945c:	40014000 	.word	0x40014000
 8009460:	40014400 	.word	0x40014400
 8009464:	40014800 	.word	0x40014800
 8009468:	40015000 	.word	0x40015000

0800946c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800946c:	b480      	push	{r7}
 800946e:	b087      	sub	sp, #28
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a1b      	ldr	r3, [r3, #32]
 800947a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a1b      	ldr	r3, [r3, #32]
 8009480:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800949a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800949e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	021b      	lsls	r3, r3, #8
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80094b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	051b      	lsls	r3, r3, #20
 80094ba:	693a      	ldr	r2, [r7, #16]
 80094bc:	4313      	orrs	r3, r2
 80094be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a1a      	ldr	r2, [pc, #104]	@ (800952c <TIM_OC6_SetConfig+0xc0>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d013      	beq.n	80094f0 <TIM_OC6_SetConfig+0x84>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a19      	ldr	r2, [pc, #100]	@ (8009530 <TIM_OC6_SetConfig+0xc4>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d00f      	beq.n	80094f0 <TIM_OC6_SetConfig+0x84>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a18      	ldr	r2, [pc, #96]	@ (8009534 <TIM_OC6_SetConfig+0xc8>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d00b      	beq.n	80094f0 <TIM_OC6_SetConfig+0x84>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a17      	ldr	r2, [pc, #92]	@ (8009538 <TIM_OC6_SetConfig+0xcc>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d007      	beq.n	80094f0 <TIM_OC6_SetConfig+0x84>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a16      	ldr	r2, [pc, #88]	@ (800953c <TIM_OC6_SetConfig+0xd0>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d003      	beq.n	80094f0 <TIM_OC6_SetConfig+0x84>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a15      	ldr	r2, [pc, #84]	@ (8009540 <TIM_OC6_SetConfig+0xd4>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d109      	bne.n	8009504 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80094f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	695b      	ldr	r3, [r3, #20]
 80094fc:	029b      	lsls	r3, r3, #10
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	4313      	orrs	r3, r2
 8009502:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	697a      	ldr	r2, [r7, #20]
 8009508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	685a      	ldr	r2, [r3, #4]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	693a      	ldr	r2, [r7, #16]
 800951c:	621a      	str	r2, [r3, #32]
}
 800951e:	bf00      	nop
 8009520:	371c      	adds	r7, #28
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	40012c00 	.word	0x40012c00
 8009530:	40013400 	.word	0x40013400
 8009534:	40014000 	.word	0x40014000
 8009538:	40014400 	.word	0x40014400
 800953c:	40014800 	.word	0x40014800
 8009540:	40015000 	.word	0x40015000

08009544 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009544:	b480      	push	{r7}
 8009546:	b087      	sub	sp, #28
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	f003 031f 	and.w	r3, r3, #31
 8009556:	2201      	movs	r2, #1
 8009558:	fa02 f303 	lsl.w	r3, r2, r3
 800955c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6a1a      	ldr	r2, [r3, #32]
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	43db      	mvns	r3, r3
 8009566:	401a      	ands	r2, r3
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6a1a      	ldr	r2, [r3, #32]
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	f003 031f 	and.w	r3, r3, #31
 8009576:	6879      	ldr	r1, [r7, #4]
 8009578:	fa01 f303 	lsl.w	r3, r1, r3
 800957c:	431a      	orrs	r2, r3
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	621a      	str	r2, [r3, #32]
}
 8009582:	bf00      	nop
 8009584:	371c      	adds	r7, #28
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
	...

08009590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d101      	bne.n	80095a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095a4:	2302      	movs	r3, #2
 80095a6:	e074      	b.n	8009692 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2202      	movs	r2, #2
 80095b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a34      	ldr	r2, [pc, #208]	@ (80096a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d009      	beq.n	80095e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a33      	ldr	r2, [pc, #204]	@ (80096a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d004      	beq.n	80095e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a31      	ldr	r2, [pc, #196]	@ (80096a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d108      	bne.n	80095f8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80095ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80095fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009602:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	4313      	orrs	r3, r2
 800960c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a21      	ldr	r2, [pc, #132]	@ (80096a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d022      	beq.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009628:	d01d      	beq.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a1f      	ldr	r2, [pc, #124]	@ (80096ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d018      	beq.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a1d      	ldr	r2, [pc, #116]	@ (80096b0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d013      	beq.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a1c      	ldr	r2, [pc, #112]	@ (80096b4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d00e      	beq.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a15      	ldr	r2, [pc, #84]	@ (80096a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d009      	beq.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a18      	ldr	r2, [pc, #96]	@ (80096b8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d004      	beq.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a11      	ldr	r2, [pc, #68]	@ (80096a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d10c      	bne.n	8009680 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800966c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	4313      	orrs	r3, r2
 8009676:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3714      	adds	r7, #20
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	40012c00 	.word	0x40012c00
 80096a4:	40013400 	.word	0x40013400
 80096a8:	40015000 	.word	0x40015000
 80096ac:	40000400 	.word	0x40000400
 80096b0:	40000800 	.word	0x40000800
 80096b4:	40000c00 	.word	0x40000c00
 80096b8:	40014000 	.word	0x40014000

080096bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80096c6:	2300      	movs	r3, #0
 80096c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d101      	bne.n	80096d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80096d4:	2302      	movs	r3, #2
 80096d6:	e078      	b.n	80097ca <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	4313      	orrs	r3, r2
 8009708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4313      	orrs	r3, r2
 8009716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	4313      	orrs	r3, r2
 8009724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	695b      	ldr	r3, [r3, #20]
 8009730:	4313      	orrs	r3, r2
 8009732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800973e:	4313      	orrs	r3, r2
 8009740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	041b      	lsls	r3, r3, #16
 800974e:	4313      	orrs	r3, r2
 8009750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	69db      	ldr	r3, [r3, #28]
 800975c:	4313      	orrs	r3, r2
 800975e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a1c      	ldr	r2, [pc, #112]	@ (80097d8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d009      	beq.n	800977e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a1b      	ldr	r2, [pc, #108]	@ (80097dc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d004      	beq.n	800977e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a19      	ldr	r2, [pc, #100]	@ (80097e0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d11c      	bne.n	80097b8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009788:	051b      	lsls	r3, r3, #20
 800978a:	4313      	orrs	r3, r2
 800978c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	6a1b      	ldr	r3, [r3, #32]
 8009798:	4313      	orrs	r3, r2
 800979a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a6:	4313      	orrs	r3, r2
 80097a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b4:	4313      	orrs	r3, r2
 80097b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3714      	adds	r7, #20
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	40012c00 	.word	0x40012c00
 80097dc:	40013400 	.word	0x40013400
 80097e0:	40015000 	.word	0x40015000

080097e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e042      	b.n	800987c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d106      	bne.n	800980e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7fb fa2d 	bl	8004c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2224      	movs	r2, #36	@ 0x24
 8009812:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f022 0201 	bic.w	r2, r2, #1
 8009824:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800982a:	2b00      	cmp	r3, #0
 800982c:	d002      	beq.n	8009834 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 ff60 	bl	800a6f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fc61 	bl	800a0fc <UART_SetConfig>
 800983a:	4603      	mov	r3, r0
 800983c:	2b01      	cmp	r3, #1
 800983e:	d101      	bne.n	8009844 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e01b      	b.n	800987c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	685a      	ldr	r2, [r3, #4]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009852:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	689a      	ldr	r2, [r3, #8]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009862:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f042 0201 	orr.w	r2, r2, #1
 8009872:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 ffdf 	bl	800a838 <UART_CheckIdleState>
 800987a:	4603      	mov	r3, r0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b08a      	sub	sp, #40	@ 0x28
 8009888:	af02      	add	r7, sp, #8
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	603b      	str	r3, [r7, #0]
 8009890:	4613      	mov	r3, r2
 8009892:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800989a:	2b20      	cmp	r3, #32
 800989c:	d17b      	bne.n	8009996 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d002      	beq.n	80098aa <HAL_UART_Transmit+0x26>
 80098a4:	88fb      	ldrh	r3, [r7, #6]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d101      	bne.n	80098ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e074      	b.n	8009998 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2221      	movs	r2, #33	@ 0x21
 80098ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098be:	f7fb fb85 	bl	8004fcc <HAL_GetTick>
 80098c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	88fa      	ldrh	r2, [r7, #6]
 80098c8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	88fa      	ldrh	r2, [r7, #6]
 80098d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098dc:	d108      	bne.n	80098f0 <HAL_UART_Transmit+0x6c>
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d104      	bne.n	80098f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80098e6:	2300      	movs	r3, #0
 80098e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	61bb      	str	r3, [r7, #24]
 80098ee:	e003      	b.n	80098f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80098f4:	2300      	movs	r3, #0
 80098f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80098f8:	e030      	b.n	800995c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	2200      	movs	r2, #0
 8009902:	2180      	movs	r1, #128	@ 0x80
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f001 f841 	bl	800a98c <UART_WaitOnFlagUntilTimeout>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d005      	beq.n	800991c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2220      	movs	r2, #32
 8009914:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009918:	2303      	movs	r3, #3
 800991a:	e03d      	b.n	8009998 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10b      	bne.n	800993a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	881b      	ldrh	r3, [r3, #0]
 8009926:	461a      	mov	r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009930:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	3302      	adds	r3, #2
 8009936:	61bb      	str	r3, [r7, #24]
 8009938:	e007      	b.n	800994a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	781a      	ldrb	r2, [r3, #0]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	3301      	adds	r3, #1
 8009948:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009950:	b29b      	uxth	r3, r3
 8009952:	3b01      	subs	r3, #1
 8009954:	b29a      	uxth	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009962:	b29b      	uxth	r3, r3
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1c8      	bne.n	80098fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	9300      	str	r3, [sp, #0]
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	2200      	movs	r2, #0
 8009970:	2140      	movs	r1, #64	@ 0x40
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f001 f80a 	bl	800a98c <UART_WaitOnFlagUntilTimeout>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d005      	beq.n	800998a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2220      	movs	r2, #32
 8009982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009986:	2303      	movs	r3, #3
 8009988:	e006      	b.n	8009998 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2220      	movs	r2, #32
 800998e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009992:	2300      	movs	r3, #0
 8009994:	e000      	b.n	8009998 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009996:	2302      	movs	r3, #2
  }
}
 8009998:	4618      	mov	r0, r3
 800999a:	3720      	adds	r7, #32
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b08a      	sub	sp, #40	@ 0x28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	4613      	mov	r3, r2
 80099ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099b4:	2b20      	cmp	r3, #32
 80099b6:	d137      	bne.n	8009a28 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d002      	beq.n	80099c4 <HAL_UART_Receive_IT+0x24>
 80099be:	88fb      	ldrh	r3, [r7, #6]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d101      	bne.n	80099c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	e030      	b.n	8009a2a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2200      	movs	r2, #0
 80099cc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a18      	ldr	r2, [pc, #96]	@ (8009a34 <HAL_UART_Receive_IT+0x94>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d01f      	beq.n	8009a18 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d018      	beq.n	8009a18 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	e853 3f00 	ldrex	r3, [r3]
 80099f2:	613b      	str	r3, [r7, #16]
   return(result);
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80099fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	461a      	mov	r2, r3
 8009a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a04:	623b      	str	r3, [r7, #32]
 8009a06:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a08:	69f9      	ldr	r1, [r7, #28]
 8009a0a:	6a3a      	ldr	r2, [r7, #32]
 8009a0c:	e841 2300 	strex	r3, r2, [r1]
 8009a10:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1e6      	bne.n	80099e6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009a18:	88fb      	ldrh	r3, [r7, #6]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	68b9      	ldr	r1, [r7, #8]
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f001 f822 	bl	800aa68 <UART_Start_Receive_IT>
 8009a24:	4603      	mov	r3, r0
 8009a26:	e000      	b.n	8009a2a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009a28:	2302      	movs	r3, #2
  }
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3728      	adds	r7, #40	@ 0x28
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	40008000 	.word	0x40008000

08009a38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b0ba      	sub	sp, #232	@ 0xe8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	69db      	ldr	r3, [r3, #28]
 8009a46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009a5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009a62:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009a66:	4013      	ands	r3, r2
 8009a68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009a6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d11b      	bne.n	8009aac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a78:	f003 0320 	and.w	r3, r3, #32
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d015      	beq.n	8009aac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a84:	f003 0320 	and.w	r3, r3, #32
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d105      	bne.n	8009a98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d009      	beq.n	8009aac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 8300 	beq.w	800a0a2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	4798      	blx	r3
      }
      return;
 8009aaa:	e2fa      	b.n	800a0a2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009aac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f000 8123 	beq.w	8009cfc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009ab6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009aba:	4b8d      	ldr	r3, [pc, #564]	@ (8009cf0 <HAL_UART_IRQHandler+0x2b8>)
 8009abc:	4013      	ands	r3, r2
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d106      	bne.n	8009ad0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009ac2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009ac6:	4b8b      	ldr	r3, [pc, #556]	@ (8009cf4 <HAL_UART_IRQHandler+0x2bc>)
 8009ac8:	4013      	ands	r3, r2
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f000 8116 	beq.w	8009cfc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ad4:	f003 0301 	and.w	r3, r3, #1
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d011      	beq.n	8009b00 <HAL_UART_IRQHandler+0xc8>
 8009adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00b      	beq.n	8009b00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2201      	movs	r2, #1
 8009aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009af6:	f043 0201 	orr.w	r2, r3, #1
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b04:	f003 0302 	and.w	r3, r3, #2
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d011      	beq.n	8009b30 <HAL_UART_IRQHandler+0xf8>
 8009b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b10:	f003 0301 	and.w	r3, r3, #1
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00b      	beq.n	8009b30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2202      	movs	r2, #2
 8009b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b26:	f043 0204 	orr.w	r2, r3, #4
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b34:	f003 0304 	and.w	r3, r3, #4
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d011      	beq.n	8009b60 <HAL_UART_IRQHandler+0x128>
 8009b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b40:	f003 0301 	and.w	r3, r3, #1
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00b      	beq.n	8009b60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2204      	movs	r2, #4
 8009b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b56:	f043 0202 	orr.w	r2, r3, #2
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b64:	f003 0308 	and.w	r3, r3, #8
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d017      	beq.n	8009b9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b70:	f003 0320 	and.w	r3, r3, #32
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d105      	bne.n	8009b84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009b78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009b7c:	4b5c      	ldr	r3, [pc, #368]	@ (8009cf0 <HAL_UART_IRQHandler+0x2b8>)
 8009b7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00b      	beq.n	8009b9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2208      	movs	r2, #8
 8009b8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b92:	f043 0208 	orr.w	r2, r3, #8
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ba0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d012      	beq.n	8009bce <HAL_UART_IRQHandler+0x196>
 8009ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00c      	beq.n	8009bce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009bbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bc4:	f043 0220 	orr.w	r2, r3, #32
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	f000 8266 	beq.w	800a0a6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bde:	f003 0320 	and.w	r3, r3, #32
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d013      	beq.n	8009c0e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bea:	f003 0320 	and.w	r3, r3, #32
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d105      	bne.n	8009bfe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d007      	beq.n	8009c0e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d003      	beq.n	8009c0e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c22:	2b40      	cmp	r3, #64	@ 0x40
 8009c24:	d005      	beq.n	8009c32 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009c2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d054      	beq.n	8009cdc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f001 f83a 	bl	800acac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c42:	2b40      	cmp	r3, #64	@ 0x40
 8009c44:	d146      	bne.n	8009cd4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	3308      	adds	r3, #8
 8009c4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c54:	e853 3f00 	ldrex	r3, [r3]
 8009c58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	3308      	adds	r3, #8
 8009c6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009c72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009c76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009c7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009c82:	e841 2300 	strex	r3, r2, [r1]
 8009c86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1d9      	bne.n	8009c46 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d017      	beq.n	8009ccc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ca2:	4a15      	ldr	r2, [pc, #84]	@ (8009cf8 <HAL_UART_IRQHandler+0x2c0>)
 8009ca4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fc ff8c 	bl	8006bca <HAL_DMA_Abort_IT>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d019      	beq.n	8009cec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cca:	e00f      	b.n	8009cec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 f9ff 	bl	800a0d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cd2:	e00b      	b.n	8009cec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f9fb 	bl	800a0d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cda:	e007      	b.n	8009cec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f9f7 	bl	800a0d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009cea:	e1dc      	b.n	800a0a6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cec:	bf00      	nop
    return;
 8009cee:	e1da      	b.n	800a0a6 <HAL_UART_IRQHandler+0x66e>
 8009cf0:	10000001 	.word	0x10000001
 8009cf4:	04000120 	.word	0x04000120
 8009cf8:	0800ad79 	.word	0x0800ad79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	f040 8170 	bne.w	8009fe6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d0a:	f003 0310 	and.w	r3, r3, #16
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f000 8169 	beq.w	8009fe6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d18:	f003 0310 	and.w	r3, r3, #16
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f000 8162 	beq.w	8009fe6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2210      	movs	r2, #16
 8009d28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d34:	2b40      	cmp	r3, #64	@ 0x40
 8009d36:	f040 80d8 	bne.w	8009eea <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009d48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f000 80af 	beq.w	8009eb0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	f080 80a7 	bcs.w	8009eb0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f003 0320 	and.w	r3, r3, #32
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f040 8087 	bne.w	8009e8e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d8c:	e853 3f00 	ldrex	r3, [r3]
 8009d90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	461a      	mov	r2, r3
 8009da6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009daa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009dae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009db6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009dba:	e841 2300 	strex	r3, r2, [r1]
 8009dbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1da      	bne.n	8009d80 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	3308      	adds	r3, #8
 8009dd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009dd4:	e853 3f00 	ldrex	r3, [r3]
 8009dd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009dda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ddc:	f023 0301 	bic.w	r3, r3, #1
 8009de0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	3308      	adds	r3, #8
 8009dea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009dee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009df2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009df6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009dfa:	e841 2300 	strex	r3, r2, [r1]
 8009dfe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009e00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1e1      	bne.n	8009dca <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	3308      	adds	r3, #8
 8009e0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e10:	e853 3f00 	ldrex	r3, [r3]
 8009e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009e16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	3308      	adds	r3, #8
 8009e26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009e2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009e30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009e32:	e841 2300 	strex	r3, r2, [r1]
 8009e36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009e38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1e3      	bne.n	8009e06 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2220      	movs	r2, #32
 8009e42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e54:	e853 3f00 	ldrex	r3, [r3]
 8009e58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e5c:	f023 0310 	bic.w	r3, r3, #16
 8009e60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	461a      	mov	r2, r3
 8009e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e76:	e841 2300 	strex	r3, r2, [r1]
 8009e7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1e4      	bne.n	8009e4c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7fc fe45 	bl	8006b18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2202      	movs	r2, #2
 8009e92:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 f91b 	bl	800a0e4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009eae:	e0fc      	b.n	800a0aa <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009eb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	f040 80f5 	bne.w	800a0aa <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f003 0320 	and.w	r3, r3, #32
 8009ece:	2b20      	cmp	r3, #32
 8009ed0:	f040 80eb 	bne.w	800a0aa <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2202      	movs	r2, #2
 8009ed8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 f8fe 	bl	800a0e4 <HAL_UARTEx_RxEventCallback>
      return;
 8009ee8:	e0df      	b.n	800a0aa <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	1ad3      	subs	r3, r2, r3
 8009efa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f000 80d1 	beq.w	800a0ae <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009f0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f000 80cc 	beq.w	800a0ae <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f1e:	e853 3f00 	ldrex	r3, [r3]
 8009f22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	461a      	mov	r2, r3
 8009f34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f40:	e841 2300 	strex	r3, r2, [r1]
 8009f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d1e4      	bne.n	8009f16 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	3308      	adds	r3, #8
 8009f52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f56:	e853 3f00 	ldrex	r3, [r3]
 8009f5a:	623b      	str	r3, [r7, #32]
   return(result);
 8009f5c:	6a3b      	ldr	r3, [r7, #32]
 8009f5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f62:	f023 0301 	bic.w	r3, r3, #1
 8009f66:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	3308      	adds	r3, #8
 8009f70:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009f74:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f7c:	e841 2300 	strex	r3, r2, [r1]
 8009f80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1e1      	bne.n	8009f4c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	e853 3f00 	ldrex	r3, [r3]
 8009fa8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f023 0310 	bic.w	r3, r3, #16
 8009fb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	461a      	mov	r2, r3
 8009fba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009fbe:	61fb      	str	r3, [r7, #28]
 8009fc0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc2:	69b9      	ldr	r1, [r7, #24]
 8009fc4:	69fa      	ldr	r2, [r7, #28]
 8009fc6:	e841 2300 	strex	r3, r2, [r1]
 8009fca:	617b      	str	r3, [r7, #20]
   return(result);
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1e4      	bne.n	8009f9c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2202      	movs	r2, #2
 8009fd6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009fd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009fdc:	4619      	mov	r1, r3
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 f880 	bl	800a0e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009fe4:	e063      	b.n	800a0ae <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00e      	beq.n	800a010 <HAL_UART_IRQHandler+0x5d8>
 8009ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d008      	beq.n	800a010 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a006:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f001 fc13 	bl	800b834 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a00e:	e051      	b.n	800a0b4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a014:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d014      	beq.n	800a046 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a01c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a024:	2b00      	cmp	r3, #0
 800a026:	d105      	bne.n	800a034 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a02c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a030:	2b00      	cmp	r3, #0
 800a032:	d008      	beq.n	800a046 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d03a      	beq.n	800a0b2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	4798      	blx	r3
    }
    return;
 800a044:	e035      	b.n	800a0b2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a04a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d009      	beq.n	800a066 <HAL_UART_IRQHandler+0x62e>
 800a052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d003      	beq.n	800a066 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 fe9c 	bl	800ad9c <UART_EndTransmit_IT>
    return;
 800a064:	e026      	b.n	800a0b4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a06a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d009      	beq.n	800a086 <HAL_UART_IRQHandler+0x64e>
 800a072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a076:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d003      	beq.n	800a086 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f001 fbec 	bl	800b85c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a084:	e016      	b.n	800a0b4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a08a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d010      	beq.n	800a0b4 <HAL_UART_IRQHandler+0x67c>
 800a092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a096:	2b00      	cmp	r3, #0
 800a098:	da0c      	bge.n	800a0b4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f001 fbd4 	bl	800b848 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0a0:	e008      	b.n	800a0b4 <HAL_UART_IRQHandler+0x67c>
      return;
 800a0a2:	bf00      	nop
 800a0a4:	e006      	b.n	800a0b4 <HAL_UART_IRQHandler+0x67c>
    return;
 800a0a6:	bf00      	nop
 800a0a8:	e004      	b.n	800a0b4 <HAL_UART_IRQHandler+0x67c>
      return;
 800a0aa:	bf00      	nop
 800a0ac:	e002      	b.n	800a0b4 <HAL_UART_IRQHandler+0x67c>
      return;
 800a0ae:	bf00      	nop
 800a0b0:	e000      	b.n	800a0b4 <HAL_UART_IRQHandler+0x67c>
    return;
 800a0b2:	bf00      	nop
  }
}
 800a0b4:	37e8      	adds	r7, #232	@ 0xe8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop

0800a0bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a0c4:	bf00      	nop
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a100:	b08c      	sub	sp, #48	@ 0x30
 800a102:	af00      	add	r7, sp, #0
 800a104:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	689a      	ldr	r2, [r3, #8]
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	431a      	orrs	r2, r3
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	431a      	orrs	r2, r3
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	69db      	ldr	r3, [r3, #28]
 800a120:	4313      	orrs	r3, r2
 800a122:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	4baa      	ldr	r3, [pc, #680]	@ (800a3d4 <UART_SetConfig+0x2d8>)
 800a12c:	4013      	ands	r3, r2
 800a12e:	697a      	ldr	r2, [r7, #20]
 800a130:	6812      	ldr	r2, [r2, #0]
 800a132:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a134:	430b      	orrs	r3, r1
 800a136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	68da      	ldr	r2, [r3, #12]
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	430a      	orrs	r2, r1
 800a14c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	699b      	ldr	r3, [r3, #24]
 800a152:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a9f      	ldr	r2, [pc, #636]	@ (800a3d8 <UART_SetConfig+0x2dc>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d004      	beq.n	800a168 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	6a1b      	ldr	r3, [r3, #32]
 800a162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a164:	4313      	orrs	r3, r2
 800a166:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a172:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a176:	697a      	ldr	r2, [r7, #20]
 800a178:	6812      	ldr	r2, [r2, #0]
 800a17a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a17c:	430b      	orrs	r3, r1
 800a17e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a186:	f023 010f 	bic.w	r1, r3, #15
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	430a      	orrs	r2, r1
 800a194:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a90      	ldr	r2, [pc, #576]	@ (800a3dc <UART_SetConfig+0x2e0>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d125      	bne.n	800a1ec <UART_SetConfig+0xf0>
 800a1a0:	4b8f      	ldr	r3, [pc, #572]	@ (800a3e0 <UART_SetConfig+0x2e4>)
 800a1a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1a6:	f003 0303 	and.w	r3, r3, #3
 800a1aa:	2b03      	cmp	r3, #3
 800a1ac:	d81a      	bhi.n	800a1e4 <UART_SetConfig+0xe8>
 800a1ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a1b4 <UART_SetConfig+0xb8>)
 800a1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b4:	0800a1c5 	.word	0x0800a1c5
 800a1b8:	0800a1d5 	.word	0x0800a1d5
 800a1bc:	0800a1cd 	.word	0x0800a1cd
 800a1c0:	0800a1dd 	.word	0x0800a1dd
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1ca:	e116      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a1cc:	2302      	movs	r3, #2
 800a1ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1d2:	e112      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a1d4:	2304      	movs	r3, #4
 800a1d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1da:	e10e      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a1dc:	2308      	movs	r3, #8
 800a1de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1e2:	e10a      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a1e4:	2310      	movs	r3, #16
 800a1e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1ea:	e106      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a7c      	ldr	r2, [pc, #496]	@ (800a3e4 <UART_SetConfig+0x2e8>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d138      	bne.n	800a268 <UART_SetConfig+0x16c>
 800a1f6:	4b7a      	ldr	r3, [pc, #488]	@ (800a3e0 <UART_SetConfig+0x2e4>)
 800a1f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1fc:	f003 030c 	and.w	r3, r3, #12
 800a200:	2b0c      	cmp	r3, #12
 800a202:	d82d      	bhi.n	800a260 <UART_SetConfig+0x164>
 800a204:	a201      	add	r2, pc, #4	@ (adr r2, 800a20c <UART_SetConfig+0x110>)
 800a206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20a:	bf00      	nop
 800a20c:	0800a241 	.word	0x0800a241
 800a210:	0800a261 	.word	0x0800a261
 800a214:	0800a261 	.word	0x0800a261
 800a218:	0800a261 	.word	0x0800a261
 800a21c:	0800a251 	.word	0x0800a251
 800a220:	0800a261 	.word	0x0800a261
 800a224:	0800a261 	.word	0x0800a261
 800a228:	0800a261 	.word	0x0800a261
 800a22c:	0800a249 	.word	0x0800a249
 800a230:	0800a261 	.word	0x0800a261
 800a234:	0800a261 	.word	0x0800a261
 800a238:	0800a261 	.word	0x0800a261
 800a23c:	0800a259 	.word	0x0800a259
 800a240:	2300      	movs	r3, #0
 800a242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a246:	e0d8      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a248:	2302      	movs	r3, #2
 800a24a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a24e:	e0d4      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a250:	2304      	movs	r3, #4
 800a252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a256:	e0d0      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a258:	2308      	movs	r3, #8
 800a25a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a25e:	e0cc      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a260:	2310      	movs	r3, #16
 800a262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a266:	e0c8      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a5e      	ldr	r2, [pc, #376]	@ (800a3e8 <UART_SetConfig+0x2ec>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d125      	bne.n	800a2be <UART_SetConfig+0x1c2>
 800a272:	4b5b      	ldr	r3, [pc, #364]	@ (800a3e0 <UART_SetConfig+0x2e4>)
 800a274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a278:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a27c:	2b30      	cmp	r3, #48	@ 0x30
 800a27e:	d016      	beq.n	800a2ae <UART_SetConfig+0x1b2>
 800a280:	2b30      	cmp	r3, #48	@ 0x30
 800a282:	d818      	bhi.n	800a2b6 <UART_SetConfig+0x1ba>
 800a284:	2b20      	cmp	r3, #32
 800a286:	d00a      	beq.n	800a29e <UART_SetConfig+0x1a2>
 800a288:	2b20      	cmp	r3, #32
 800a28a:	d814      	bhi.n	800a2b6 <UART_SetConfig+0x1ba>
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d002      	beq.n	800a296 <UART_SetConfig+0x19a>
 800a290:	2b10      	cmp	r3, #16
 800a292:	d008      	beq.n	800a2a6 <UART_SetConfig+0x1aa>
 800a294:	e00f      	b.n	800a2b6 <UART_SetConfig+0x1ba>
 800a296:	2300      	movs	r3, #0
 800a298:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a29c:	e0ad      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a29e:	2302      	movs	r3, #2
 800a2a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2a4:	e0a9      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a2a6:	2304      	movs	r3, #4
 800a2a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2ac:	e0a5      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a2ae:	2308      	movs	r3, #8
 800a2b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2b4:	e0a1      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a2b6:	2310      	movs	r3, #16
 800a2b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2bc:	e09d      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a4a      	ldr	r2, [pc, #296]	@ (800a3ec <UART_SetConfig+0x2f0>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d125      	bne.n	800a314 <UART_SetConfig+0x218>
 800a2c8:	4b45      	ldr	r3, [pc, #276]	@ (800a3e0 <UART_SetConfig+0x2e4>)
 800a2ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a2d2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a2d4:	d016      	beq.n	800a304 <UART_SetConfig+0x208>
 800a2d6:	2bc0      	cmp	r3, #192	@ 0xc0
 800a2d8:	d818      	bhi.n	800a30c <UART_SetConfig+0x210>
 800a2da:	2b80      	cmp	r3, #128	@ 0x80
 800a2dc:	d00a      	beq.n	800a2f4 <UART_SetConfig+0x1f8>
 800a2de:	2b80      	cmp	r3, #128	@ 0x80
 800a2e0:	d814      	bhi.n	800a30c <UART_SetConfig+0x210>
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d002      	beq.n	800a2ec <UART_SetConfig+0x1f0>
 800a2e6:	2b40      	cmp	r3, #64	@ 0x40
 800a2e8:	d008      	beq.n	800a2fc <UART_SetConfig+0x200>
 800a2ea:	e00f      	b.n	800a30c <UART_SetConfig+0x210>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2f2:	e082      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a2f4:	2302      	movs	r3, #2
 800a2f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2fa:	e07e      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a2fc:	2304      	movs	r3, #4
 800a2fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a302:	e07a      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a304:	2308      	movs	r3, #8
 800a306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a30a:	e076      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a30c:	2310      	movs	r3, #16
 800a30e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a312:	e072      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a35      	ldr	r2, [pc, #212]	@ (800a3f0 <UART_SetConfig+0x2f4>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d12a      	bne.n	800a374 <UART_SetConfig+0x278>
 800a31e:	4b30      	ldr	r3, [pc, #192]	@ (800a3e0 <UART_SetConfig+0x2e4>)
 800a320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a324:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a328:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a32c:	d01a      	beq.n	800a364 <UART_SetConfig+0x268>
 800a32e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a332:	d81b      	bhi.n	800a36c <UART_SetConfig+0x270>
 800a334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a338:	d00c      	beq.n	800a354 <UART_SetConfig+0x258>
 800a33a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a33e:	d815      	bhi.n	800a36c <UART_SetConfig+0x270>
 800a340:	2b00      	cmp	r3, #0
 800a342:	d003      	beq.n	800a34c <UART_SetConfig+0x250>
 800a344:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a348:	d008      	beq.n	800a35c <UART_SetConfig+0x260>
 800a34a:	e00f      	b.n	800a36c <UART_SetConfig+0x270>
 800a34c:	2300      	movs	r3, #0
 800a34e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a352:	e052      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a354:	2302      	movs	r3, #2
 800a356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a35a:	e04e      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a35c:	2304      	movs	r3, #4
 800a35e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a362:	e04a      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a364:	2308      	movs	r3, #8
 800a366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a36a:	e046      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a36c:	2310      	movs	r3, #16
 800a36e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a372:	e042      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a17      	ldr	r2, [pc, #92]	@ (800a3d8 <UART_SetConfig+0x2dc>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d13a      	bne.n	800a3f4 <UART_SetConfig+0x2f8>
 800a37e:	4b18      	ldr	r3, [pc, #96]	@ (800a3e0 <UART_SetConfig+0x2e4>)
 800a380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a384:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a388:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a38c:	d01a      	beq.n	800a3c4 <UART_SetConfig+0x2c8>
 800a38e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a392:	d81b      	bhi.n	800a3cc <UART_SetConfig+0x2d0>
 800a394:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a398:	d00c      	beq.n	800a3b4 <UART_SetConfig+0x2b8>
 800a39a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a39e:	d815      	bhi.n	800a3cc <UART_SetConfig+0x2d0>
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d003      	beq.n	800a3ac <UART_SetConfig+0x2b0>
 800a3a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3a8:	d008      	beq.n	800a3bc <UART_SetConfig+0x2c0>
 800a3aa:	e00f      	b.n	800a3cc <UART_SetConfig+0x2d0>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3b2:	e022      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a3b4:	2302      	movs	r3, #2
 800a3b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3ba:	e01e      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a3bc:	2304      	movs	r3, #4
 800a3be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3c2:	e01a      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a3c4:	2308      	movs	r3, #8
 800a3c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3ca:	e016      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a3cc:	2310      	movs	r3, #16
 800a3ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3d2:	e012      	b.n	800a3fa <UART_SetConfig+0x2fe>
 800a3d4:	cfff69f3 	.word	0xcfff69f3
 800a3d8:	40008000 	.word	0x40008000
 800a3dc:	40013800 	.word	0x40013800
 800a3e0:	40021000 	.word	0x40021000
 800a3e4:	40004400 	.word	0x40004400
 800a3e8:	40004800 	.word	0x40004800
 800a3ec:	40004c00 	.word	0x40004c00
 800a3f0:	40005000 	.word	0x40005000
 800a3f4:	2310      	movs	r3, #16
 800a3f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4aae      	ldr	r2, [pc, #696]	@ (800a6b8 <UART_SetConfig+0x5bc>)
 800a400:	4293      	cmp	r3, r2
 800a402:	f040 8097 	bne.w	800a534 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a406:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a40a:	2b08      	cmp	r3, #8
 800a40c:	d823      	bhi.n	800a456 <UART_SetConfig+0x35a>
 800a40e:	a201      	add	r2, pc, #4	@ (adr r2, 800a414 <UART_SetConfig+0x318>)
 800a410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a414:	0800a439 	.word	0x0800a439
 800a418:	0800a457 	.word	0x0800a457
 800a41c:	0800a441 	.word	0x0800a441
 800a420:	0800a457 	.word	0x0800a457
 800a424:	0800a447 	.word	0x0800a447
 800a428:	0800a457 	.word	0x0800a457
 800a42c:	0800a457 	.word	0x0800a457
 800a430:	0800a457 	.word	0x0800a457
 800a434:	0800a44f 	.word	0x0800a44f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a438:	f7fd fd6c 	bl	8007f14 <HAL_RCC_GetPCLK1Freq>
 800a43c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a43e:	e010      	b.n	800a462 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a440:	4b9e      	ldr	r3, [pc, #632]	@ (800a6bc <UART_SetConfig+0x5c0>)
 800a442:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a444:	e00d      	b.n	800a462 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a446:	f7fd fcf7 	bl	8007e38 <HAL_RCC_GetSysClockFreq>
 800a44a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a44c:	e009      	b.n	800a462 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a44e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a452:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a454:	e005      	b.n	800a462 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a456:	2300      	movs	r3, #0
 800a458:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a460:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a464:	2b00      	cmp	r3, #0
 800a466:	f000 8130 	beq.w	800a6ca <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a46e:	4a94      	ldr	r2, [pc, #592]	@ (800a6c0 <UART_SetConfig+0x5c4>)
 800a470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a474:	461a      	mov	r2, r3
 800a476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a478:	fbb3 f3f2 	udiv	r3, r3, r2
 800a47c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	685a      	ldr	r2, [r3, #4]
 800a482:	4613      	mov	r3, r2
 800a484:	005b      	lsls	r3, r3, #1
 800a486:	4413      	add	r3, r2
 800a488:	69ba      	ldr	r2, [r7, #24]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d305      	bcc.n	800a49a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a494:	69ba      	ldr	r2, [r7, #24]
 800a496:	429a      	cmp	r2, r3
 800a498:	d903      	bls.n	800a4a2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a4a0:	e113      	b.n	800a6ca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	60bb      	str	r3, [r7, #8]
 800a4a8:	60fa      	str	r2, [r7, #12]
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ae:	4a84      	ldr	r2, [pc, #528]	@ (800a6c0 <UART_SetConfig+0x5c4>)
 800a4b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	603b      	str	r3, [r7, #0]
 800a4ba:	607a      	str	r2, [r7, #4]
 800a4bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a4c4:	f7f6 fa72 	bl	80009ac <__aeabi_uldivmod>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	4610      	mov	r0, r2
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	f04f 0200 	mov.w	r2, #0
 800a4d4:	f04f 0300 	mov.w	r3, #0
 800a4d8:	020b      	lsls	r3, r1, #8
 800a4da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a4de:	0202      	lsls	r2, r0, #8
 800a4e0:	6979      	ldr	r1, [r7, #20]
 800a4e2:	6849      	ldr	r1, [r1, #4]
 800a4e4:	0849      	lsrs	r1, r1, #1
 800a4e6:	2000      	movs	r0, #0
 800a4e8:	460c      	mov	r4, r1
 800a4ea:	4605      	mov	r5, r0
 800a4ec:	eb12 0804 	adds.w	r8, r2, r4
 800a4f0:	eb43 0905 	adc.w	r9, r3, r5
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	469a      	mov	sl, r3
 800a4fc:	4693      	mov	fp, r2
 800a4fe:	4652      	mov	r2, sl
 800a500:	465b      	mov	r3, fp
 800a502:	4640      	mov	r0, r8
 800a504:	4649      	mov	r1, r9
 800a506:	f7f6 fa51 	bl	80009ac <__aeabi_uldivmod>
 800a50a:	4602      	mov	r2, r0
 800a50c:	460b      	mov	r3, r1
 800a50e:	4613      	mov	r3, r2
 800a510:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a512:	6a3b      	ldr	r3, [r7, #32]
 800a514:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a518:	d308      	bcc.n	800a52c <UART_SetConfig+0x430>
 800a51a:	6a3b      	ldr	r3, [r7, #32]
 800a51c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a520:	d204      	bcs.n	800a52c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	6a3a      	ldr	r2, [r7, #32]
 800a528:	60da      	str	r2, [r3, #12]
 800a52a:	e0ce      	b.n	800a6ca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a532:	e0ca      	b.n	800a6ca <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	69db      	ldr	r3, [r3, #28]
 800a538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a53c:	d166      	bne.n	800a60c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a53e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a542:	2b08      	cmp	r3, #8
 800a544:	d827      	bhi.n	800a596 <UART_SetConfig+0x49a>
 800a546:	a201      	add	r2, pc, #4	@ (adr r2, 800a54c <UART_SetConfig+0x450>)
 800a548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a54c:	0800a571 	.word	0x0800a571
 800a550:	0800a579 	.word	0x0800a579
 800a554:	0800a581 	.word	0x0800a581
 800a558:	0800a597 	.word	0x0800a597
 800a55c:	0800a587 	.word	0x0800a587
 800a560:	0800a597 	.word	0x0800a597
 800a564:	0800a597 	.word	0x0800a597
 800a568:	0800a597 	.word	0x0800a597
 800a56c:	0800a58f 	.word	0x0800a58f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a570:	f7fd fcd0 	bl	8007f14 <HAL_RCC_GetPCLK1Freq>
 800a574:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a576:	e014      	b.n	800a5a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a578:	f7fd fce2 	bl	8007f40 <HAL_RCC_GetPCLK2Freq>
 800a57c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a57e:	e010      	b.n	800a5a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a580:	4b4e      	ldr	r3, [pc, #312]	@ (800a6bc <UART_SetConfig+0x5c0>)
 800a582:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a584:	e00d      	b.n	800a5a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a586:	f7fd fc57 	bl	8007e38 <HAL_RCC_GetSysClockFreq>
 800a58a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a58c:	e009      	b.n	800a5a2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a58e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a592:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a594:	e005      	b.n	800a5a2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a596:	2300      	movs	r3, #0
 800a598:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a5a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f000 8090 	beq.w	800a6ca <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ae:	4a44      	ldr	r2, [pc, #272]	@ (800a6c0 <UART_SetConfig+0x5c4>)
 800a5b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5bc:	005a      	lsls	r2, r3, #1
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	085b      	lsrs	r3, r3, #1
 800a5c4:	441a      	add	r2, r3
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5d0:	6a3b      	ldr	r3, [r7, #32]
 800a5d2:	2b0f      	cmp	r3, #15
 800a5d4:	d916      	bls.n	800a604 <UART_SetConfig+0x508>
 800a5d6:	6a3b      	ldr	r3, [r7, #32]
 800a5d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5dc:	d212      	bcs.n	800a604 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a5de:	6a3b      	ldr	r3, [r7, #32]
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	f023 030f 	bic.w	r3, r3, #15
 800a5e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a5e8:	6a3b      	ldr	r3, [r7, #32]
 800a5ea:	085b      	lsrs	r3, r3, #1
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	f003 0307 	and.w	r3, r3, #7
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	8bfb      	ldrh	r3, [r7, #30]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	8bfa      	ldrh	r2, [r7, #30]
 800a600:	60da      	str	r2, [r3, #12]
 800a602:	e062      	b.n	800a6ca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a60a:	e05e      	b.n	800a6ca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a60c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a610:	2b08      	cmp	r3, #8
 800a612:	d828      	bhi.n	800a666 <UART_SetConfig+0x56a>
 800a614:	a201      	add	r2, pc, #4	@ (adr r2, 800a61c <UART_SetConfig+0x520>)
 800a616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61a:	bf00      	nop
 800a61c:	0800a641 	.word	0x0800a641
 800a620:	0800a649 	.word	0x0800a649
 800a624:	0800a651 	.word	0x0800a651
 800a628:	0800a667 	.word	0x0800a667
 800a62c:	0800a657 	.word	0x0800a657
 800a630:	0800a667 	.word	0x0800a667
 800a634:	0800a667 	.word	0x0800a667
 800a638:	0800a667 	.word	0x0800a667
 800a63c:	0800a65f 	.word	0x0800a65f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a640:	f7fd fc68 	bl	8007f14 <HAL_RCC_GetPCLK1Freq>
 800a644:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a646:	e014      	b.n	800a672 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a648:	f7fd fc7a 	bl	8007f40 <HAL_RCC_GetPCLK2Freq>
 800a64c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a64e:	e010      	b.n	800a672 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a650:	4b1a      	ldr	r3, [pc, #104]	@ (800a6bc <UART_SetConfig+0x5c0>)
 800a652:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a654:	e00d      	b.n	800a672 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a656:	f7fd fbef 	bl	8007e38 <HAL_RCC_GetSysClockFreq>
 800a65a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a65c:	e009      	b.n	800a672 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a65e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a662:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a664:	e005      	b.n	800a672 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a666:	2300      	movs	r3, #0
 800a668:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a670:	bf00      	nop
    }

    if (pclk != 0U)
 800a672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a674:	2b00      	cmp	r3, #0
 800a676:	d028      	beq.n	800a6ca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a67c:	4a10      	ldr	r2, [pc, #64]	@ (800a6c0 <UART_SetConfig+0x5c4>)
 800a67e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a682:	461a      	mov	r2, r3
 800a684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a686:	fbb3 f2f2 	udiv	r2, r3, r2
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	085b      	lsrs	r3, r3, #1
 800a690:	441a      	add	r2, r3
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	fbb2 f3f3 	udiv	r3, r2, r3
 800a69a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a69c:	6a3b      	ldr	r3, [r7, #32]
 800a69e:	2b0f      	cmp	r3, #15
 800a6a0:	d910      	bls.n	800a6c4 <UART_SetConfig+0x5c8>
 800a6a2:	6a3b      	ldr	r3, [r7, #32]
 800a6a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6a8:	d20c      	bcs.n	800a6c4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a6aa:	6a3b      	ldr	r3, [r7, #32]
 800a6ac:	b29a      	uxth	r2, r3
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	60da      	str	r2, [r3, #12]
 800a6b4:	e009      	b.n	800a6ca <UART_SetConfig+0x5ce>
 800a6b6:	bf00      	nop
 800a6b8:	40008000 	.word	0x40008000
 800a6bc:	00f42400 	.word	0x00f42400
 800a6c0:	0800d74c 	.word	0x0800d74c
      }
      else
      {
        ret = HAL_ERROR;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a6e6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3730      	adds	r7, #48	@ 0x30
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a6f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a700:	f003 0308 	and.w	r3, r3, #8
 800a704:	2b00      	cmp	r3, #0
 800a706:	d00a      	beq.n	800a71e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	430a      	orrs	r2, r1
 800a71c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a722:	f003 0301 	and.w	r3, r3, #1
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00a      	beq.n	800a740 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	430a      	orrs	r2, r1
 800a73e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a744:	f003 0302 	and.w	r3, r3, #2
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00a      	beq.n	800a762 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	430a      	orrs	r2, r1
 800a760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a766:	f003 0304 	and.w	r3, r3, #4
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00a      	beq.n	800a784 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	430a      	orrs	r2, r1
 800a782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a788:	f003 0310 	and.w	r3, r3, #16
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00a      	beq.n	800a7a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	430a      	orrs	r2, r1
 800a7a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7aa:	f003 0320 	and.w	r3, r3, #32
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00a      	beq.n	800a7c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	430a      	orrs	r2, r1
 800a7c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d01a      	beq.n	800a80a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	430a      	orrs	r2, r1
 800a7e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7f2:	d10a      	bne.n	800a80a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	430a      	orrs	r2, r1
 800a808:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a80e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00a      	beq.n	800a82c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	430a      	orrs	r2, r1
 800a82a:	605a      	str	r2, [r3, #4]
  }
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b098      	sub	sp, #96	@ 0x60
 800a83c:	af02      	add	r7, sp, #8
 800a83e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a848:	f7fa fbc0 	bl	8004fcc <HAL_GetTick>
 800a84c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 0308 	and.w	r3, r3, #8
 800a858:	2b08      	cmp	r3, #8
 800a85a:	d12f      	bne.n	800a8bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a85c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a860:	9300      	str	r3, [sp, #0]
 800a862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a864:	2200      	movs	r2, #0
 800a866:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f88e 	bl	800a98c <UART_WaitOnFlagUntilTimeout>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d022      	beq.n	800a8bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a87e:	e853 3f00 	ldrex	r3, [r3]
 800a882:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a886:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a88a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	461a      	mov	r2, r3
 800a892:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a894:	647b      	str	r3, [r7, #68]	@ 0x44
 800a896:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a898:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a89a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a89c:	e841 2300 	strex	r3, r2, [r1]
 800a8a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a8a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1e6      	bne.n	800a876 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2220      	movs	r2, #32
 800a8ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	e063      	b.n	800a984 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 0304 	and.w	r3, r3, #4
 800a8c6:	2b04      	cmp	r3, #4
 800a8c8:	d149      	bne.n	800a95e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 f857 	bl	800a98c <UART_WaitOnFlagUntilTimeout>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d03c      	beq.n	800a95e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ec:	e853 3f00 	ldrex	r3, [r3]
 800a8f0:	623b      	str	r3, [r7, #32]
   return(result);
 800a8f2:	6a3b      	ldr	r3, [r7, #32]
 800a8f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	461a      	mov	r2, r3
 800a900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a902:	633b      	str	r3, [r7, #48]	@ 0x30
 800a904:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a906:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a908:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a90a:	e841 2300 	strex	r3, r2, [r1]
 800a90e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1e6      	bne.n	800a8e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3308      	adds	r3, #8
 800a91c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	e853 3f00 	ldrex	r3, [r3]
 800a924:	60fb      	str	r3, [r7, #12]
   return(result);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f023 0301 	bic.w	r3, r3, #1
 800a92c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	3308      	adds	r3, #8
 800a934:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a936:	61fa      	str	r2, [r7, #28]
 800a938:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93a:	69b9      	ldr	r1, [r7, #24]
 800a93c:	69fa      	ldr	r2, [r7, #28]
 800a93e:	e841 2300 	strex	r3, r2, [r1]
 800a942:	617b      	str	r3, [r7, #20]
   return(result);
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1e5      	bne.n	800a916 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2220      	movs	r2, #32
 800a94e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a95a:	2303      	movs	r3, #3
 800a95c:	e012      	b.n	800a984 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2220      	movs	r2, #32
 800a962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2220      	movs	r2, #32
 800a96a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3758      	adds	r7, #88	@ 0x58
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	603b      	str	r3, [r7, #0]
 800a998:	4613      	mov	r3, r2
 800a99a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a99c:	e04f      	b.n	800aa3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9a4:	d04b      	beq.n	800aa3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9a6:	f7fa fb11 	bl	8004fcc <HAL_GetTick>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	1ad3      	subs	r3, r2, r3
 800a9b0:	69ba      	ldr	r2, [r7, #24]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d302      	bcc.n	800a9bc <UART_WaitOnFlagUntilTimeout+0x30>
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d101      	bne.n	800a9c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a9bc:	2303      	movs	r3, #3
 800a9be:	e04e      	b.n	800aa5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f003 0304 	and.w	r3, r3, #4
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d037      	beq.n	800aa3e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	2b80      	cmp	r3, #128	@ 0x80
 800a9d2:	d034      	beq.n	800aa3e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	2b40      	cmp	r3, #64	@ 0x40
 800a9d8:	d031      	beq.n	800aa3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	69db      	ldr	r3, [r3, #28]
 800a9e0:	f003 0308 	and.w	r3, r3, #8
 800a9e4:	2b08      	cmp	r3, #8
 800a9e6:	d110      	bne.n	800aa0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2208      	movs	r2, #8
 800a9ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a9f0:	68f8      	ldr	r0, [r7, #12]
 800a9f2:	f000 f95b 	bl	800acac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2208      	movs	r2, #8
 800a9fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e029      	b.n	800aa5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	69db      	ldr	r3, [r3, #28]
 800aa10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa18:	d111      	bne.n	800aa3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aa22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f000 f941 	bl	800acac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2220      	movs	r2, #32
 800aa2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e00f      	b.n	800aa5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	69da      	ldr	r2, [r3, #28]
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	4013      	ands	r3, r2
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	bf0c      	ite	eq
 800aa4e:	2301      	moveq	r3, #1
 800aa50:	2300      	movne	r3, #0
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	461a      	mov	r2, r3
 800aa56:	79fb      	ldrb	r3, [r7, #7]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d0a0      	beq.n	800a99e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
	...

0800aa68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b0a3      	sub	sp, #140	@ 0x8c
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	4613      	mov	r3, r2
 800aa74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	68ba      	ldr	r2, [r7, #8]
 800aa7a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	88fa      	ldrh	r2, [r7, #6]
 800aa80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	88fa      	ldrh	r2, [r7, #6]
 800aa88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa9a:	d10e      	bne.n	800aaba <UART_Start_Receive_IT+0x52>
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	691b      	ldr	r3, [r3, #16]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d105      	bne.n	800aab0 <UART_Start_Receive_IT+0x48>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800aaaa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aaae:	e02d      	b.n	800ab0c <UART_Start_Receive_IT+0xa4>
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	22ff      	movs	r2, #255	@ 0xff
 800aab4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aab8:	e028      	b.n	800ab0c <UART_Start_Receive_IT+0xa4>
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d10d      	bne.n	800aade <UART_Start_Receive_IT+0x76>
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d104      	bne.n	800aad4 <UART_Start_Receive_IT+0x6c>
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	22ff      	movs	r2, #255	@ 0xff
 800aace:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aad2:	e01b      	b.n	800ab0c <UART_Start_Receive_IT+0xa4>
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	227f      	movs	r2, #127	@ 0x7f
 800aad8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aadc:	e016      	b.n	800ab0c <UART_Start_Receive_IT+0xa4>
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aae6:	d10d      	bne.n	800ab04 <UART_Start_Receive_IT+0x9c>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d104      	bne.n	800aafa <UART_Start_Receive_IT+0x92>
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	227f      	movs	r2, #127	@ 0x7f
 800aaf4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aaf8:	e008      	b.n	800ab0c <UART_Start_Receive_IT+0xa4>
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	223f      	movs	r2, #63	@ 0x3f
 800aafe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ab02:	e003      	b.n	800ab0c <UART_Start_Receive_IT+0xa4>
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2222      	movs	r2, #34	@ 0x22
 800ab18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	3308      	adds	r3, #8
 800ab22:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab26:	e853 3f00 	ldrex	r3, [r3]
 800ab2a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ab2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab2e:	f043 0301 	orr.w	r3, r3, #1
 800ab32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	3308      	adds	r3, #8
 800ab3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ab40:	673a      	str	r2, [r7, #112]	@ 0x70
 800ab42:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab44:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ab46:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ab48:	e841 2300 	strex	r3, r2, [r1]
 800ab4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800ab4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1e3      	bne.n	800ab1c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab5c:	d14f      	bne.n	800abfe <UART_Start_Receive_IT+0x196>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ab64:	88fa      	ldrh	r2, [r7, #6]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d349      	bcc.n	800abfe <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab72:	d107      	bne.n	800ab84 <UART_Start_Receive_IT+0x11c>
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d103      	bne.n	800ab84 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	4a47      	ldr	r2, [pc, #284]	@ (800ac9c <UART_Start_Receive_IT+0x234>)
 800ab80:	675a      	str	r2, [r3, #116]	@ 0x74
 800ab82:	e002      	b.n	800ab8a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	4a46      	ldr	r2, [pc, #280]	@ (800aca0 <UART_Start_Receive_IT+0x238>)
 800ab88:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	691b      	ldr	r3, [r3, #16]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d01a      	beq.n	800abc8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab9a:	e853 3f00 	ldrex	r3, [r3]
 800ab9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800aba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aba6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	461a      	mov	r2, r3
 800abb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800abb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800abb6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800abba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800abbc:	e841 2300 	strex	r3, r2, [r1]
 800abc0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800abc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d1e4      	bne.n	800ab92 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	3308      	adds	r3, #8
 800abce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abd2:	e853 3f00 	ldrex	r3, [r3]
 800abd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800abd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800abde:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	3308      	adds	r3, #8
 800abe6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800abe8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800abea:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800abee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abf0:	e841 2300 	strex	r3, r2, [r1]
 800abf4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800abf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1e5      	bne.n	800abc8 <UART_Start_Receive_IT+0x160>
 800abfc:	e046      	b.n	800ac8c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac06:	d107      	bne.n	800ac18 <UART_Start_Receive_IT+0x1b0>
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	691b      	ldr	r3, [r3, #16]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d103      	bne.n	800ac18 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	4a24      	ldr	r2, [pc, #144]	@ (800aca4 <UART_Start_Receive_IT+0x23c>)
 800ac14:	675a      	str	r2, [r3, #116]	@ 0x74
 800ac16:	e002      	b.n	800ac1e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	4a23      	ldr	r2, [pc, #140]	@ (800aca8 <UART_Start_Receive_IT+0x240>)
 800ac1c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d019      	beq.n	800ac5a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac2e:	e853 3f00 	ldrex	r3, [r3]
 800ac32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac36:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ac3a:	677b      	str	r3, [r7, #116]	@ 0x74
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	461a      	mov	r2, r3
 800ac42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ac44:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac46:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ac4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac4c:	e841 2300 	strex	r3, r2, [r1]
 800ac50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ac52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d1e6      	bne.n	800ac26 <UART_Start_Receive_IT+0x1be>
 800ac58:	e018      	b.n	800ac8c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	e853 3f00 	ldrex	r3, [r3]
 800ac66:	613b      	str	r3, [r7, #16]
   return(result);
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	f043 0320 	orr.w	r3, r3, #32
 800ac6e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	461a      	mov	r2, r3
 800ac76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac78:	623b      	str	r3, [r7, #32]
 800ac7a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac7c:	69f9      	ldr	r1, [r7, #28]
 800ac7e:	6a3a      	ldr	r2, [r7, #32]
 800ac80:	e841 2300 	strex	r3, r2, [r1]
 800ac84:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d1e6      	bne.n	800ac5a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	378c      	adds	r7, #140	@ 0x8c
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	0800b4c9 	.word	0x0800b4c9
 800aca0:	0800b165 	.word	0x0800b165
 800aca4:	0800afad 	.word	0x0800afad
 800aca8:	0800adf5 	.word	0x0800adf5

0800acac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800acac:	b480      	push	{r7}
 800acae:	b095      	sub	sp, #84	@ 0x54
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acbc:	e853 3f00 	ldrex	r3, [r3]
 800acc0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800acc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800acc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	461a      	mov	r2, r3
 800acd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acd2:	643b      	str	r3, [r7, #64]	@ 0x40
 800acd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800acd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800acda:	e841 2300 	strex	r3, r2, [r1]
 800acde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ace0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d1e6      	bne.n	800acb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	3308      	adds	r3, #8
 800acec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acee:	6a3b      	ldr	r3, [r7, #32]
 800acf0:	e853 3f00 	ldrex	r3, [r3]
 800acf4:	61fb      	str	r3, [r7, #28]
   return(result);
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800acfc:	f023 0301 	bic.w	r3, r3, #1
 800ad00:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	3308      	adds	r3, #8
 800ad08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad12:	e841 2300 	strex	r3, r2, [r1]
 800ad16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1e3      	bne.n	800ace6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d118      	bne.n	800ad58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	e853 3f00 	ldrex	r3, [r3]
 800ad32:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	f023 0310 	bic.w	r3, r3, #16
 800ad3a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	461a      	mov	r2, r3
 800ad42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad44:	61bb      	str	r3, [r7, #24]
 800ad46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad48:	6979      	ldr	r1, [r7, #20]
 800ad4a:	69ba      	ldr	r2, [r7, #24]
 800ad4c:	e841 2300 	strex	r3, r2, [r1]
 800ad50:	613b      	str	r3, [r7, #16]
   return(result);
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1e6      	bne.n	800ad26 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2220      	movs	r2, #32
 800ad5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ad6c:	bf00      	nop
 800ad6e:	3754      	adds	r7, #84	@ 0x54
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad8e:	68f8      	ldr	r0, [r7, #12]
 800ad90:	f7ff f99e 	bl	800a0d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad94:	bf00      	nop
 800ad96:	3710      	adds	r7, #16
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b088      	sub	sp, #32
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	e853 3f00 	ldrex	r3, [r3]
 800adb0:	60bb      	str	r3, [r7, #8]
   return(result);
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800adb8:	61fb      	str	r3, [r7, #28]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	461a      	mov	r2, r3
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	61bb      	str	r3, [r7, #24]
 800adc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc6:	6979      	ldr	r1, [r7, #20]
 800adc8:	69ba      	ldr	r2, [r7, #24]
 800adca:	e841 2300 	strex	r3, r2, [r1]
 800adce:	613b      	str	r3, [r7, #16]
   return(result);
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d1e6      	bne.n	800ada4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2220      	movs	r2, #32
 800adda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f7ff f969 	bl	800a0bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adea:	bf00      	nop
 800adec:	3720      	adds	r7, #32
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
	...

0800adf4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b09c      	sub	sp, #112	@ 0x70
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae02:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae0c:	2b22      	cmp	r3, #34	@ 0x22
 800ae0e:	f040 80be 	bne.w	800af8e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae18:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ae1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ae20:	b2d9      	uxtb	r1, r3
 800ae22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ae26:	b2da      	uxtb	r2, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae2c:	400a      	ands	r2, r1
 800ae2e:	b2d2      	uxtb	r2, r2
 800ae30:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae36:	1c5a      	adds	r2, r3, #1
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	3b01      	subs	r3, #1
 800ae46:	b29a      	uxth	r2, r3
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	f040 80a1 	bne.w	800af9e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae64:	e853 3f00 	ldrex	r3, [r3]
 800ae68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ae6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae70:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	461a      	mov	r2, r3
 800ae78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ae7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae7c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ae80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ae82:	e841 2300 	strex	r3, r2, [r1]
 800ae86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ae88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d1e6      	bne.n	800ae5c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	3308      	adds	r3, #8
 800ae94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae98:	e853 3f00 	ldrex	r3, [r3]
 800ae9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aea0:	f023 0301 	bic.w	r3, r3, #1
 800aea4:	667b      	str	r3, [r7, #100]	@ 0x64
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	3308      	adds	r3, #8
 800aeac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aeae:	647a      	str	r2, [r7, #68]	@ 0x44
 800aeb0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aeb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aeb6:	e841 2300 	strex	r3, r2, [r1]
 800aeba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1e5      	bne.n	800ae8e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2220      	movs	r2, #32
 800aec6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2200      	movs	r2, #0
 800aece:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a33      	ldr	r2, [pc, #204]	@ (800afa8 <UART_RxISR_8BIT+0x1b4>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d01f      	beq.n	800af20 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d018      	beq.n	800af20 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef6:	e853 3f00 	ldrex	r3, [r3]
 800aefa:	623b      	str	r3, [r7, #32]
   return(result);
 800aefc:	6a3b      	ldr	r3, [r7, #32]
 800aefe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800af02:	663b      	str	r3, [r7, #96]	@ 0x60
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	461a      	mov	r2, r3
 800af0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af0c:	633b      	str	r3, [r7, #48]	@ 0x30
 800af0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af14:	e841 2300 	strex	r3, r2, [r1]
 800af18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d1e6      	bne.n	800aeee <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af24:	2b01      	cmp	r3, #1
 800af26:	d12e      	bne.n	800af86 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	e853 3f00 	ldrex	r3, [r3]
 800af3a:	60fb      	str	r3, [r7, #12]
   return(result);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f023 0310 	bic.w	r3, r3, #16
 800af42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	461a      	mov	r2, r3
 800af4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af4c:	61fb      	str	r3, [r7, #28]
 800af4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af50:	69b9      	ldr	r1, [r7, #24]
 800af52:	69fa      	ldr	r2, [r7, #28]
 800af54:	e841 2300 	strex	r3, r2, [r1]
 800af58:	617b      	str	r3, [r7, #20]
   return(result);
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d1e6      	bne.n	800af2e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	69db      	ldr	r3, [r3, #28]
 800af66:	f003 0310 	and.w	r3, r3, #16
 800af6a:	2b10      	cmp	r3, #16
 800af6c:	d103      	bne.n	800af76 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	2210      	movs	r2, #16
 800af74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af7c:	4619      	mov	r1, r3
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7ff f8b0 	bl	800a0e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800af84:	e00b      	b.n	800af9e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f7f8 fe9a 	bl	8003cc0 <HAL_UART_RxCpltCallback>
}
 800af8c:	e007      	b.n	800af9e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	699a      	ldr	r2, [r3, #24]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f042 0208 	orr.w	r2, r2, #8
 800af9c:	619a      	str	r2, [r3, #24]
}
 800af9e:	bf00      	nop
 800afa0:	3770      	adds	r7, #112	@ 0x70
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	40008000 	.word	0x40008000

0800afac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b09c      	sub	sp, #112	@ 0x70
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800afba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afc4:	2b22      	cmp	r3, #34	@ 0x22
 800afc6:	f040 80be 	bne.w	800b146 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afd0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afd8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800afda:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800afde:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800afe2:	4013      	ands	r3, r2
 800afe4:	b29a      	uxth	r2, r3
 800afe6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800afe8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afee:	1c9a      	adds	r2, r3, #2
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800affa:	b29b      	uxth	r3, r3
 800affc:	3b01      	subs	r3, #1
 800affe:	b29a      	uxth	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f040 80a1 	bne.w	800b156 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b01a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b01c:	e853 3f00 	ldrex	r3, [r3]
 800b020:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b022:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b024:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b028:	667b      	str	r3, [r7, #100]	@ 0x64
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	461a      	mov	r2, r3
 800b030:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b032:	657b      	str	r3, [r7, #84]	@ 0x54
 800b034:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b036:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b038:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b03a:	e841 2300 	strex	r3, r2, [r1]
 800b03e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b040:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b042:	2b00      	cmp	r3, #0
 800b044:	d1e6      	bne.n	800b014 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	3308      	adds	r3, #8
 800b04c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b04e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b050:	e853 3f00 	ldrex	r3, [r3]
 800b054:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b058:	f023 0301 	bic.w	r3, r3, #1
 800b05c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	3308      	adds	r3, #8
 800b064:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b066:	643a      	str	r2, [r7, #64]	@ 0x40
 800b068:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b06c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b06e:	e841 2300 	strex	r3, r2, [r1]
 800b072:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1e5      	bne.n	800b046 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2220      	movs	r2, #32
 800b07e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2200      	movs	r2, #0
 800b086:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a33      	ldr	r2, [pc, #204]	@ (800b160 <UART_RxISR_16BIT+0x1b4>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d01f      	beq.n	800b0d8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d018      	beq.n	800b0d8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ac:	6a3b      	ldr	r3, [r7, #32]
 800b0ae:	e853 3f00 	ldrex	r3, [r3]
 800b0b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0b4:	69fb      	ldr	r3, [r7, #28]
 800b0b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b0ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0c6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b0ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0cc:	e841 2300 	strex	r3, r2, [r1]
 800b0d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d1e6      	bne.n	800b0a6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d12e      	bne.n	800b13e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	e853 3f00 	ldrex	r3, [r3]
 800b0f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	f023 0310 	bic.w	r3, r3, #16
 800b0fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	461a      	mov	r2, r3
 800b102:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b104:	61bb      	str	r3, [r7, #24]
 800b106:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b108:	6979      	ldr	r1, [r7, #20]
 800b10a:	69ba      	ldr	r2, [r7, #24]
 800b10c:	e841 2300 	strex	r3, r2, [r1]
 800b110:	613b      	str	r3, [r7, #16]
   return(result);
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d1e6      	bne.n	800b0e6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	69db      	ldr	r3, [r3, #28]
 800b11e:	f003 0310 	and.w	r3, r3, #16
 800b122:	2b10      	cmp	r3, #16
 800b124:	d103      	bne.n	800b12e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2210      	movs	r2, #16
 800b12c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b134:	4619      	mov	r1, r3
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f7fe ffd4 	bl	800a0e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b13c:	e00b      	b.n	800b156 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f7f8 fdbe 	bl	8003cc0 <HAL_UART_RxCpltCallback>
}
 800b144:	e007      	b.n	800b156 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	699a      	ldr	r2, [r3, #24]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f042 0208 	orr.w	r2, r2, #8
 800b154:	619a      	str	r2, [r3, #24]
}
 800b156:	bf00      	nop
 800b158:	3770      	adds	r7, #112	@ 0x70
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	40008000 	.word	0x40008000

0800b164 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b0ac      	sub	sp, #176	@ 0xb0
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b172:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	69db      	ldr	r3, [r3, #28]
 800b17c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b19a:	2b22      	cmp	r3, #34	@ 0x22
 800b19c:	f040 8183 	bne.w	800b4a6 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b1a6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b1aa:	e126      	b.n	800b3fa <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1b2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b1b6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800b1ba:	b2d9      	uxtb	r1, r3
 800b1bc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800b1c0:	b2da      	uxtb	r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1c6:	400a      	ands	r2, r1
 800b1c8:	b2d2      	uxtb	r2, r2
 800b1ca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1d0:	1c5a      	adds	r2, r3, #1
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	69db      	ldr	r3, [r3, #28]
 800b1ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b1f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b1f6:	f003 0307 	and.w	r3, r3, #7
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d053      	beq.n	800b2a6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b1fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b202:	f003 0301 	and.w	r3, r3, #1
 800b206:	2b00      	cmp	r3, #0
 800b208:	d011      	beq.n	800b22e <UART_RxISR_8BIT_FIFOEN+0xca>
 800b20a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b20e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b212:	2b00      	cmp	r3, #0
 800b214:	d00b      	beq.n	800b22e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2201      	movs	r2, #1
 800b21c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b224:	f043 0201 	orr.w	r2, r3, #1
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b22e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b232:	f003 0302 	and.w	r3, r3, #2
 800b236:	2b00      	cmp	r3, #0
 800b238:	d011      	beq.n	800b25e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b23a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b23e:	f003 0301 	and.w	r3, r3, #1
 800b242:	2b00      	cmp	r3, #0
 800b244:	d00b      	beq.n	800b25e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2202      	movs	r2, #2
 800b24c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b254:	f043 0204 	orr.w	r2, r3, #4
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b25e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b262:	f003 0304 	and.w	r3, r3, #4
 800b266:	2b00      	cmp	r3, #0
 800b268:	d011      	beq.n	800b28e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b26a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b26e:	f003 0301 	and.w	r3, r3, #1
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00b      	beq.n	800b28e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2204      	movs	r2, #4
 800b27c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b284:	f043 0202 	orr.w	r2, r3, #2
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b294:	2b00      	cmp	r3, #0
 800b296:	d006      	beq.n	800b2a6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f7fe ff19 	bl	800a0d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	f040 80a3 	bne.w	800b3fa <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b2bc:	e853 3f00 	ldrex	r3, [r3]
 800b2c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b2c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b2d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b2d8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2da:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b2dc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b2de:	e841 2300 	strex	r3, r2, [r1]
 800b2e2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b2e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d1e4      	bne.n	800b2b4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	3308      	adds	r3, #8
 800b2f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2f4:	e853 3f00 	ldrex	r3, [r3]
 800b2f8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b2fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b2fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b300:	f023 0301 	bic.w	r3, r3, #1
 800b304:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	3308      	adds	r3, #8
 800b30e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b312:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b314:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b316:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b318:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b31a:	e841 2300 	strex	r3, r2, [r1]
 800b31e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b320:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1e1      	bne.n	800b2ea <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2220      	movs	r2, #32
 800b32a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2200      	movs	r2, #0
 800b338:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4a60      	ldr	r2, [pc, #384]	@ (800b4c0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d021      	beq.n	800b388 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d01a      	beq.n	800b388 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b358:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b35a:	e853 3f00 	ldrex	r3, [r3]
 800b35e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b362:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b366:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	461a      	mov	r2, r3
 800b370:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b374:	657b      	str	r3, [r7, #84]	@ 0x54
 800b376:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b378:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b37a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b37c:	e841 2300 	strex	r3, r2, [r1]
 800b380:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b384:	2b00      	cmp	r3, #0
 800b386:	d1e4      	bne.n	800b352 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d130      	bne.n	800b3f2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2200      	movs	r2, #0
 800b394:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b39c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b39e:	e853 3f00 	ldrex	r3, [r3]
 800b3a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a6:	f023 0310 	bic.w	r3, r3, #16
 800b3aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b3b8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b3be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b3c0:	e841 2300 	strex	r3, r2, [r1]
 800b3c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d1e4      	bne.n	800b396 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	69db      	ldr	r3, [r3, #28]
 800b3d2:	f003 0310 	and.w	r3, r3, #16
 800b3d6:	2b10      	cmp	r3, #16
 800b3d8:	d103      	bne.n	800b3e2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2210      	movs	r2, #16
 800b3e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f7fe fe7a 	bl	800a0e4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b3f0:	e00e      	b.n	800b410 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f7f8 fc64 	bl	8003cc0 <HAL_UART_RxCpltCallback>
        break;
 800b3f8:	e00a      	b.n	800b410 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b3fa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d006      	beq.n	800b410 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800b402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b406:	f003 0320 	and.w	r3, r3, #32
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	f47f aece 	bne.w	800b1ac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b416:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b41a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d049      	beq.n	800b4b6 <UART_RxISR_8BIT_FIFOEN+0x352>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b428:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d242      	bcs.n	800b4b6 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	3308      	adds	r3, #8
 800b436:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b438:	6a3b      	ldr	r3, [r7, #32]
 800b43a:	e853 3f00 	ldrex	r3, [r3]
 800b43e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b440:	69fb      	ldr	r3, [r7, #28]
 800b442:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b446:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	3308      	adds	r3, #8
 800b450:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b454:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b456:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b458:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b45a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b45c:	e841 2300 	strex	r3, r2, [r1]
 800b460:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b464:	2b00      	cmp	r3, #0
 800b466:	d1e3      	bne.n	800b430 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	4a16      	ldr	r2, [pc, #88]	@ (800b4c4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800b46c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	e853 3f00 	ldrex	r3, [r3]
 800b47a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	f043 0320 	orr.w	r3, r3, #32
 800b482:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	461a      	mov	r2, r3
 800b48c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b490:	61bb      	str	r3, [r7, #24]
 800b492:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b494:	6979      	ldr	r1, [r7, #20]
 800b496:	69ba      	ldr	r2, [r7, #24]
 800b498:	e841 2300 	strex	r3, r2, [r1]
 800b49c:	613b      	str	r3, [r7, #16]
   return(result);
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d1e4      	bne.n	800b46e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b4a4:	e007      	b.n	800b4b6 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	699a      	ldr	r2, [r3, #24]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f042 0208 	orr.w	r2, r2, #8
 800b4b4:	619a      	str	r2, [r3, #24]
}
 800b4b6:	bf00      	nop
 800b4b8:	37b0      	adds	r7, #176	@ 0xb0
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	40008000 	.word	0x40008000
 800b4c4:	0800adf5 	.word	0x0800adf5

0800b4c8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b0ae      	sub	sp, #184	@ 0xb8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b4d6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	69db      	ldr	r3, [r3, #28]
 800b4e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b4fe:	2b22      	cmp	r3, #34	@ 0x22
 800b500:	f040 8187 	bne.w	800b812 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b50a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b50e:	e12a      	b.n	800b766 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b516:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b51e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b522:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b526:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b52a:	4013      	ands	r3, r2
 800b52c:	b29a      	uxth	r2, r3
 800b52e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b532:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b538:	1c9a      	adds	r2, r3, #2
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b544:	b29b      	uxth	r3, r3
 800b546:	3b01      	subs	r3, #1
 800b548:	b29a      	uxth	r2, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	69db      	ldr	r3, [r3, #28]
 800b556:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b55a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b55e:	f003 0307 	and.w	r3, r3, #7
 800b562:	2b00      	cmp	r3, #0
 800b564:	d053      	beq.n	800b60e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b566:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b56a:	f003 0301 	and.w	r3, r3, #1
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d011      	beq.n	800b596 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d00b      	beq.n	800b596 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2201      	movs	r2, #1
 800b584:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b58c:	f043 0201 	orr.w	r2, r3, #1
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b596:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b59a:	f003 0302 	and.w	r3, r3, #2
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d011      	beq.n	800b5c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b5a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b5a6:	f003 0301 	and.w	r3, r3, #1
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00b      	beq.n	800b5c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2202      	movs	r2, #2
 800b5b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5bc:	f043 0204 	orr.w	r2, r3, #4
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b5c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b5ca:	f003 0304 	and.w	r3, r3, #4
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d011      	beq.n	800b5f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b5d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b5d6:	f003 0301 	and.w	r3, r3, #1
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d00b      	beq.n	800b5f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2204      	movs	r2, #4
 800b5e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5ec:	f043 0202 	orr.w	r2, r3, #2
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d006      	beq.n	800b60e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7fe fd65 	bl	800a0d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b614:	b29b      	uxth	r3, r3
 800b616:	2b00      	cmp	r3, #0
 800b618:	f040 80a5 	bne.w	800b766 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b622:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b624:	e853 3f00 	ldrex	r3, [r3]
 800b628:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b62a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b62c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b630:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	461a      	mov	r2, r3
 800b63a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b63e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b642:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b644:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b646:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b64a:	e841 2300 	strex	r3, r2, [r1]
 800b64e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b650:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b652:	2b00      	cmp	r3, #0
 800b654:	d1e2      	bne.n	800b61c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	3308      	adds	r3, #8
 800b65c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b65e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b660:	e853 3f00 	ldrex	r3, [r3]
 800b664:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b668:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b66c:	f023 0301 	bic.w	r3, r3, #1
 800b670:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	3308      	adds	r3, #8
 800b67a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b67e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b680:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b682:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b684:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b686:	e841 2300 	strex	r3, r2, [r1]
 800b68a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b68c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1e1      	bne.n	800b656 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2220      	movs	r2, #32
 800b696:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a60      	ldr	r2, [pc, #384]	@ (800b82c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d021      	beq.n	800b6f4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d01a      	beq.n	800b6f4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6c6:	e853 3f00 	ldrex	r3, [r3]
 800b6ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b6cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b6ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b6d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	461a      	mov	r2, r3
 800b6dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b6e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b6e2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b6e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b6e8:	e841 2300 	strex	r3, r2, [r1]
 800b6ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b6ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d1e4      	bne.n	800b6be <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d130      	bne.n	800b75e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b70a:	e853 3f00 	ldrex	r3, [r3]
 800b70e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b712:	f023 0310 	bic.w	r3, r3, #16
 800b716:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	461a      	mov	r2, r3
 800b720:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b724:	647b      	str	r3, [r7, #68]	@ 0x44
 800b726:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b728:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b72a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b72c:	e841 2300 	strex	r3, r2, [r1]
 800b730:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b734:	2b00      	cmp	r3, #0
 800b736:	d1e4      	bne.n	800b702 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	69db      	ldr	r3, [r3, #28]
 800b73e:	f003 0310 	and.w	r3, r3, #16
 800b742:	2b10      	cmp	r3, #16
 800b744:	d103      	bne.n	800b74e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2210      	movs	r2, #16
 800b74c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b754:	4619      	mov	r1, r3
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f7fe fcc4 	bl	800a0e4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b75c:	e00e      	b.n	800b77c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f7f8 faae 	bl	8003cc0 <HAL_UART_RxCpltCallback>
        break;
 800b764:	e00a      	b.n	800b77c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b766:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d006      	beq.n	800b77c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800b76e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b772:	f003 0320 	and.w	r3, r3, #32
 800b776:	2b00      	cmp	r3, #0
 800b778:	f47f aeca 	bne.w	800b510 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b782:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b786:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d049      	beq.n	800b822 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b794:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b798:	429a      	cmp	r2, r3
 800b79a:	d242      	bcs.n	800b822 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	3308      	adds	r3, #8
 800b7a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a6:	e853 3f00 	ldrex	r3, [r3]
 800b7aa:	623b      	str	r3, [r7, #32]
   return(result);
 800b7ac:	6a3b      	ldr	r3, [r7, #32]
 800b7ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b7b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	3308      	adds	r3, #8
 800b7bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b7c0:	633a      	str	r2, [r7, #48]	@ 0x30
 800b7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7c8:	e841 2300 	strex	r3, r2, [r1]
 800b7cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b7ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d1e3      	bne.n	800b79c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	4a16      	ldr	r2, [pc, #88]	@ (800b830 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800b7d8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	e853 3f00 	ldrex	r3, [r3]
 800b7e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f043 0320 	orr.w	r3, r3, #32
 800b7ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b7fc:	61fb      	str	r3, [r7, #28]
 800b7fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b800:	69b9      	ldr	r1, [r7, #24]
 800b802:	69fa      	ldr	r2, [r7, #28]
 800b804:	e841 2300 	strex	r3, r2, [r1]
 800b808:	617b      	str	r3, [r7, #20]
   return(result);
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d1e4      	bne.n	800b7da <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b810:	e007      	b.n	800b822 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	699a      	ldr	r2, [r3, #24]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f042 0208 	orr.w	r2, r2, #8
 800b820:	619a      	str	r2, [r3, #24]
}
 800b822:	bf00      	nop
 800b824:	37b8      	adds	r7, #184	@ 0xb8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	40008000 	.word	0x40008000
 800b830:	0800afad 	.word	0x0800afad

0800b834 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b83c:	bf00      	nop
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b864:	bf00      	nop
 800b866:	370c      	adds	r7, #12
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b870:	b480      	push	{r7}
 800b872:	b085      	sub	sp, #20
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d101      	bne.n	800b886 <HAL_UARTEx_DisableFifoMode+0x16>
 800b882:	2302      	movs	r3, #2
 800b884:	e027      	b.n	800b8d6 <HAL_UARTEx_DisableFifoMode+0x66>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2201      	movs	r2, #1
 800b88a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2224      	movs	r2, #36	@ 0x24
 800b892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f022 0201 	bic.w	r2, r2, #1
 800b8ac:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b8b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2220      	movs	r2, #32
 800b8c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8d4:	2300      	movs	r3, #0
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3714      	adds	r7, #20
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr

0800b8e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b084      	sub	sp, #16
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
 800b8ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d101      	bne.n	800b8fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b8f6:	2302      	movs	r3, #2
 800b8f8:	e02d      	b.n	800b956 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2224      	movs	r2, #36	@ 0x24
 800b906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f022 0201 	bic.w	r2, r2, #1
 800b920:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	683a      	ldr	r2, [r7, #0]
 800b932:	430a      	orrs	r2, r1
 800b934:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 f850 	bl	800b9dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	68fa      	ldr	r2, [r7, #12]
 800b942:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2220      	movs	r2, #32
 800b948:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b954:	2300      	movs	r3, #0
}
 800b956:	4618      	mov	r0, r3
 800b958:	3710      	adds	r7, #16
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b95e:	b580      	push	{r7, lr}
 800b960:	b084      	sub	sp, #16
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
 800b966:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d101      	bne.n	800b976 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b972:	2302      	movs	r3, #2
 800b974:	e02d      	b.n	800b9d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2201      	movs	r2, #1
 800b97a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2224      	movs	r2, #36	@ 0x24
 800b982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f022 0201 	bic.w	r2, r2, #1
 800b99c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	683a      	ldr	r2, [r7, #0]
 800b9ae:	430a      	orrs	r2, r1
 800b9b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 f812 	bl	800b9dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2220      	movs	r2, #32
 800b9c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
	...

0800b9dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d108      	bne.n	800b9fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b9fc:	e031      	b.n	800ba62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b9fe:	2308      	movs	r3, #8
 800ba00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ba02:	2308      	movs	r3, #8
 800ba04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	0e5b      	lsrs	r3, r3, #25
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	f003 0307 	and.w	r3, r3, #7
 800ba14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	0f5b      	lsrs	r3, r3, #29
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	f003 0307 	and.w	r3, r3, #7
 800ba24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba26:	7bbb      	ldrb	r3, [r7, #14]
 800ba28:	7b3a      	ldrb	r2, [r7, #12]
 800ba2a:	4911      	ldr	r1, [pc, #68]	@ (800ba70 <UARTEx_SetNbDataToProcess+0x94>)
 800ba2c:	5c8a      	ldrb	r2, [r1, r2]
 800ba2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ba32:	7b3a      	ldrb	r2, [r7, #12]
 800ba34:	490f      	ldr	r1, [pc, #60]	@ (800ba74 <UARTEx_SetNbDataToProcess+0x98>)
 800ba36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba38:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba3c:	b29a      	uxth	r2, r3
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba44:	7bfb      	ldrb	r3, [r7, #15]
 800ba46:	7b7a      	ldrb	r2, [r7, #13]
 800ba48:	4909      	ldr	r1, [pc, #36]	@ (800ba70 <UARTEx_SetNbDataToProcess+0x94>)
 800ba4a:	5c8a      	ldrb	r2, [r1, r2]
 800ba4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ba50:	7b7a      	ldrb	r2, [r7, #13]
 800ba52:	4908      	ldr	r1, [pc, #32]	@ (800ba74 <UARTEx_SetNbDataToProcess+0x98>)
 800ba54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba56:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba5a:	b29a      	uxth	r2, r3
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ba62:	bf00      	nop
 800ba64:	3714      	adds	r7, #20
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr
 800ba6e:	bf00      	nop
 800ba70:	0800d764 	.word	0x0800d764
 800ba74:	0800d76c 	.word	0x0800d76c

0800ba78 <__cxa_guard_acquire>:
 800ba78:	6802      	ldr	r2, [r0, #0]
 800ba7a:	07d2      	lsls	r2, r2, #31
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	d405      	bmi.n	800ba8c <__cxa_guard_acquire+0x14>
 800ba80:	7842      	ldrb	r2, [r0, #1]
 800ba82:	b102      	cbz	r2, 800ba86 <__cxa_guard_acquire+0xe>
 800ba84:	deff      	udf	#255	@ 0xff
 800ba86:	2001      	movs	r0, #1
 800ba88:	7058      	strb	r0, [r3, #1]
 800ba8a:	4770      	bx	lr
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	4770      	bx	lr

0800ba90 <__cxa_guard_release>:
 800ba90:	2301      	movs	r3, #1
 800ba92:	6003      	str	r3, [r0, #0]
 800ba94:	4770      	bx	lr

0800ba96 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800ba96:	b10a      	cbz	r2, 800ba9c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800ba98:	f000 bb5a 	b.w	800c150 <memcpy>
 800ba9c:	4770      	bx	lr

0800ba9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>:
 800ba9e:	1e08      	subs	r0, r1, #0
 800baa0:	b508      	push	{r3, lr}
 800baa2:	da01      	bge.n	800baa8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j+0xa>
 800baa4:	f000 f977 	bl	800bd96 <_ZSt17__throw_bad_allocv>
 800baa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800baac:	f000 b962 	b.w	800bd74 <_Znwj>

0800bab0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 800bab0:	f850 3b08 	ldr.w	r3, [r0], #8
 800bab4:	1a1b      	subs	r3, r3, r0
 800bab6:	4258      	negs	r0, r3
 800bab8:	4158      	adcs	r0, r3
 800baba:	4770      	bx	lr

0800babc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800babc:	680b      	ldr	r3, [r1, #0]
 800babe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bac2:	b510      	push	{r4, lr}
 800bac4:	d302      	bcc.n	800bacc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800bac6:	480b      	ldr	r0, [pc, #44]	@ (800baf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x38>)
 800bac8:	f000 f96b 	bl	800bda2 <_ZSt20__throw_length_errorPKc>
 800bacc:	4293      	cmp	r3, r2
 800bace:	d90b      	bls.n	800bae8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800bad0:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800bad4:	ea4f 0442 	mov.w	r4, r2, lsl #1
 800bad8:	d206      	bcs.n	800bae8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800bada:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800bade:	bf2a      	itet	cs
 800bae0:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 800bae4:	600c      	strcc	r4, [r1, #0]
 800bae6:	600b      	strcs	r3, [r1, #0]
 800bae8:	6809      	ldr	r1, [r1, #0]
 800baea:	3101      	adds	r1, #1
 800baec:	f7ff ffd7 	bl	800ba9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>
 800baf0:	bd10      	pop	{r4, pc}
 800baf2:	bf00      	nop
 800baf4:	0800d774 	.word	0x0800d774

0800baf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>:
 800baf8:	6800      	ldr	r0, [r0, #0]
 800bafa:	f000 b939 	b.w	800bd70 <_ZdlPv>

0800bafe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800bafe:	b510      	push	{r4, lr}
 800bb00:	4604      	mov	r4, r0
 800bb02:	f7ff ffd5 	bl	800bab0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800bb06:	b918      	cbnz	r0, 800bb10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x12>
 800bb08:	68a1      	ldr	r1, [r4, #8]
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	f7ff fff4 	bl	800baf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>
 800bb10:	bd10      	pop	{r4, pc}
	...

0800bb14 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 800bb14:	b508      	push	{r3, lr}
 800bb16:	4603      	mov	r3, r0
 800bb18:	4608      	mov	r0, r1
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	4298      	cmp	r0, r3
 800bb1e:	4611      	mov	r1, r2
 800bb20:	d903      	bls.n	800bb2a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 800bb22:	4602      	mov	r2, r0
 800bb24:	4801      	ldr	r0, [pc, #4]	@ (800bb2c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 800bb26:	f000 f93f 	bl	800bda8 <_ZSt24__throw_out_of_range_fmtPKcz>
 800bb2a:	bd08      	pop	{r3, pc}
 800bb2c:	0800d78c 	.word	0x0800d78c

0800bb30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800bb30:	2a01      	cmp	r2, #1
 800bb32:	b410      	push	{r4}
 800bb34:	d104      	bne.n	800bb40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800bb36:	780a      	ldrb	r2, [r1, #0]
 800bb38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb3c:	7002      	strb	r2, [r0, #0]
 800bb3e:	4770      	bx	lr
 800bb40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb44:	f7ff bfa7 	b.w	800ba96 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800bb48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800bb48:	2a01      	cmp	r2, #1
 800bb4a:	b430      	push	{r4, r5}
 800bb4c:	d103      	bne.n	800bb56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800bb4e:	780b      	ldrb	r3, [r1, #0]
 800bb50:	7003      	strb	r3, [r0, #0]
 800bb52:	bc30      	pop	{r4, r5}
 800bb54:	4770      	bx	lr
 800bb56:	2a00      	cmp	r2, #0
 800bb58:	d0fb      	beq.n	800bb52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800bb5a:	bc30      	pop	{r4, r5}
 800bb5c:	f000 ba56 	b.w	800c00c <memmove>

0800bb60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800bb60:	b508      	push	{r3, lr}
 800bb62:	1a52      	subs	r2, r2, r1
 800bb64:	f7ff ffe4 	bl	800bb30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800bb68:	bd08      	pop	{r3, pc}

0800bb6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
 800bb6a:	b538      	push	{r3, r4, r5, lr}
 800bb6c:	4604      	mov	r4, r0
 800bb6e:	4615      	mov	r5, r2
 800bb70:	4608      	mov	r0, r1
 800bb72:	4411      	add	r1, r2
 800bb74:	6862      	ldr	r2, [r4, #4]
 800bb76:	1a52      	subs	r2, r2, r1
 800bb78:	d005      	beq.n	800bb86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 800bb7a:	b125      	cbz	r5, 800bb86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 800bb7c:	6823      	ldr	r3, [r4, #0]
 800bb7e:	4419      	add	r1, r3
 800bb80:	4418      	add	r0, r3
 800bb82:	f7ff ffe1 	bl	800bb48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800bb86:	6863      	ldr	r3, [r4, #4]
 800bb88:	6822      	ldr	r2, [r4, #0]
 800bb8a:	1b5b      	subs	r3, r3, r5
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	6063      	str	r3, [r4, #4]
 800bb90:	54d1      	strb	r1, [r2, r3]
 800bb92:	bd38      	pop	{r3, r4, r5, pc}

0800bb94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800bb94:	f100 0208 	add.w	r2, r0, #8
 800bb98:	6002      	str	r2, [r0, #0]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	6042      	str	r2, [r0, #4]
 800bb9e:	7202      	strb	r2, [r0, #8]
 800bba0:	4770      	bx	lr

0800bba2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800bba2:	b510      	push	{r4, lr}
 800bba4:	4604      	mov	r4, r0
 800bba6:	f7ff ffaa 	bl	800bafe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800bbaa:	4620      	mov	r0, r4
 800bbac:	bd10      	pop	{r4, pc}

0800bbae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800bbae:	6840      	ldr	r0, [r0, #4]
 800bbb0:	4770      	bx	lr

0800bbb2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 800bbb2:	b510      	push	{r4, lr}
 800bbb4:	4604      	mov	r4, r0
 800bbb6:	f7ff ff7b 	bl	800bab0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800bbba:	b908      	cbnz	r0, 800bbc0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 800bbbc:	68a0      	ldr	r0, [r4, #8]
 800bbbe:	bd10      	pop	{r4, pc}
 800bbc0:	200f      	movs	r0, #15
 800bbc2:	e7fc      	b.n	800bbbe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

0800bbc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800bbc4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbc8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bbca:	461f      	mov	r7, r3
 800bbcc:	6843      	ldr	r3, [r0, #4]
 800bbce:	eb01 0802 	add.w	r8, r1, r2
 800bbd2:	1ab2      	subs	r2, r6, r2
 800bbd4:	441a      	add	r2, r3
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	460d      	mov	r5, r1
 800bbda:	eba3 0908 	sub.w	r9, r3, r8
 800bbde:	9201      	str	r2, [sp, #4]
 800bbe0:	f7ff ffe7 	bl	800bbb2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 800bbe4:	a901      	add	r1, sp, #4
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	4620      	mov	r0, r4
 800bbea:	f7ff ff67 	bl	800babc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800bbee:	4682      	mov	sl, r0
 800bbf0:	b11d      	cbz	r5, 800bbfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 800bbf2:	6821      	ldr	r1, [r4, #0]
 800bbf4:	462a      	mov	r2, r5
 800bbf6:	f7ff ff9b 	bl	800bb30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800bbfa:	b137      	cbz	r7, 800bc0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 800bbfc:	b12e      	cbz	r6, 800bc0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 800bbfe:	4632      	mov	r2, r6
 800bc00:	4639      	mov	r1, r7
 800bc02:	eb0a 0005 	add.w	r0, sl, r5
 800bc06:	f7ff ff93 	bl	800bb30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800bc0a:	f1b9 0f00 	cmp.w	r9, #0
 800bc0e:	d007      	beq.n	800bc20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 800bc10:	6821      	ldr	r1, [r4, #0]
 800bc12:	4435      	add	r5, r6
 800bc14:	464a      	mov	r2, r9
 800bc16:	4441      	add	r1, r8
 800bc18:	eb0a 0005 	add.w	r0, sl, r5
 800bc1c:	f7ff ff88 	bl	800bb30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800bc20:	4620      	mov	r0, r4
 800bc22:	f7ff ff6c 	bl	800bafe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800bc26:	9b01      	ldr	r3, [sp, #4]
 800bc28:	f8c4 a000 	str.w	sl, [r4]
 800bc2c:	60a3      	str	r3, [r4, #8]
 800bc2e:	b002      	add	sp, #8
 800bc30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bc34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 800bc34:	6802      	ldr	r2, [r0, #0]
 800bc36:	2300      	movs	r3, #0
 800bc38:	6043      	str	r3, [r0, #4]
 800bc3a:	7013      	strb	r3, [r2, #0]
 800bc3c:	4770      	bx	lr

0800bc3e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 800bc3e:	6840      	ldr	r0, [r0, #4]
 800bc40:	fab0 f080 	clz	r0, r0
 800bc44:	0940      	lsrs	r0, r0, #5
 800bc46:	4770      	bx	lr

0800bc48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 800bc48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc4a:	6846      	ldr	r6, [r0, #4]
 800bc4c:	4604      	mov	r4, r0
 800bc4e:	460f      	mov	r7, r1
 800bc50:	f7ff ffaf 	bl	800bbb2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 800bc54:	1c75      	adds	r5, r6, #1
 800bc56:	4285      	cmp	r5, r0
 800bc58:	d907      	bls.n	800bc6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x22>
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	2300      	movs	r3, #0
 800bc60:	461a      	mov	r2, r3
 800bc62:	4631      	mov	r1, r6
 800bc64:	4620      	mov	r0, r4
 800bc66:	f7ff ffad 	bl	800bbc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800bc6a:	6823      	ldr	r3, [r4, #0]
 800bc6c:	559f      	strb	r7, [r3, r6]
 800bc6e:	6823      	ldr	r3, [r4, #0]
 800bc70:	6065      	str	r5, [r4, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	555a      	strb	r2, [r3, r5]
 800bc76:	b003      	add	sp, #12
 800bc78:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 800bc7a:	b510      	push	{r4, lr}
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	f7ff ffe3 	bl	800bc48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 800bc82:	4620      	mov	r0, r4
 800bc84:	bd10      	pop	{r4, pc}

0800bc86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8pop_backEv>:
 800bc86:	b508      	push	{r3, lr}
 800bc88:	6841      	ldr	r1, [r0, #4]
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	3901      	subs	r1, #1
 800bc8e:	f7ff ff6c 	bl	800bb6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
 800bc92:	bd08      	pop	{r3, pc}

0800bc94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800bc94:	6800      	ldr	r0, [r0, #0]
 800bc96:	4770      	bx	lr

0800bc98 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
 800bc98:	6800      	ldr	r0, [r0, #0]
 800bc9a:	4770      	bx	lr

0800bc9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800bc9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc9e:	1a53      	subs	r3, r2, r1
 800bca0:	2b0f      	cmp	r3, #15
 800bca2:	4604      	mov	r4, r0
 800bca4:	460d      	mov	r5, r1
 800bca6:	4616      	mov	r6, r2
 800bca8:	9301      	str	r3, [sp, #4]
 800bcaa:	d906      	bls.n	800bcba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 800bcac:	2200      	movs	r2, #0
 800bcae:	a901      	add	r1, sp, #4
 800bcb0:	f7ff ff04 	bl	800babc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800bcb4:	9b01      	ldr	r3, [sp, #4]
 800bcb6:	6020      	str	r0, [r4, #0]
 800bcb8:	60a3      	str	r3, [r4, #8]
 800bcba:	4632      	mov	r2, r6
 800bcbc:	4629      	mov	r1, r5
 800bcbe:	6820      	ldr	r0, [r4, #0]
 800bcc0:	f7ff ff4e 	bl	800bb60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800bcc4:	9b01      	ldr	r3, [sp, #4]
 800bcc6:	6822      	ldr	r2, [r4, #0]
 800bcc8:	6063      	str	r3, [r4, #4]
 800bcca:	2100      	movs	r1, #0
 800bccc:	54d1      	strb	r1, [r2, r3]
 800bcce:	b002      	add	sp, #8
 800bcd0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bcd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 800bcd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd8:	4698      	mov	r8, r3
 800bcda:	f100 0308 	add.w	r3, r0, #8
 800bcde:	460d      	mov	r5, r1
 800bce0:	4617      	mov	r7, r2
 800bce2:	6003      	str	r3, [r0, #0]
 800bce4:	680e      	ldr	r6, [r1, #0]
 800bce6:	4a0b      	ldr	r2, [pc, #44]	@ (800bd14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 800bce8:	4604      	mov	r4, r0
 800bcea:	4639      	mov	r1, r7
 800bcec:	4628      	mov	r0, r5
 800bcee:	f7ff ff11 	bl	800bb14 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 800bcf2:	686a      	ldr	r2, [r5, #4]
 800bcf4:	1831      	adds	r1, r6, r0
 800bcf6:	1bd2      	subs	r2, r2, r7
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	f04f 0300 	mov.w	r3, #0
 800bcfe:	4542      	cmp	r2, r8
 800bd00:	bf94      	ite	ls
 800bd02:	188a      	addls	r2, r1, r2
 800bd04:	eb01 0208 	addhi.w	r2, r1, r8
 800bd08:	f7ff ffc8 	bl	800bc9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd12:	bf00      	nop
 800bd14:	0800d7c3 	.word	0x0800d7c3

0800bd18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 800bd18:	b570      	push	{r4, r5, r6, lr}
 800bd1a:	460d      	mov	r5, r1
 800bd1c:	4604      	mov	r4, r0
 800bd1e:	4611      	mov	r1, r2
 800bd20:	4628      	mov	r0, r5
 800bd22:	4a06      	ldr	r2, [pc, #24]	@ (800bd3c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 800bd24:	461e      	mov	r6, r3
 800bd26:	f7ff fef5 	bl	800bb14 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 800bd2a:	4633      	mov	r3, r6
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	4629      	mov	r1, r5
 800bd30:	4620      	mov	r0, r4
 800bd32:	f7ff ffcf 	bl	800bcd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 800bd36:	4620      	mov	r0, r4
 800bd38:	bd70      	pop	{r4, r5, r6, pc}
 800bd3a:	bf00      	nop
 800bd3c:	0800d7de 	.word	0x0800d7de

0800bd40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800bd40:	b538      	push	{r3, r4, r5, lr}
 800bd42:	f100 0308 	add.w	r3, r0, #8
 800bd46:	4604      	mov	r4, r0
 800bd48:	6003      	str	r3, [r0, #0]
 800bd4a:	460d      	mov	r5, r1
 800bd4c:	b911      	cbnz	r1, 800bd54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 800bd4e:	4807      	ldr	r0, [pc, #28]	@ (800bd6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 800bd50:	f000 f824 	bl	800bd9c <_ZSt19__throw_logic_errorPKc>
 800bd54:	4608      	mov	r0, r1
 800bd56:	f7f4 fab3 	bl	80002c0 <strlen>
 800bd5a:	f04f 0300 	mov.w	r3, #0
 800bd5e:	182a      	adds	r2, r5, r0
 800bd60:	4629      	mov	r1, r5
 800bd62:	4620      	mov	r0, r4
 800bd64:	f7ff ff9a 	bl	800bc9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800bd68:	4620      	mov	r0, r4
 800bd6a:	bd38      	pop	{r3, r4, r5, pc}
 800bd6c:	0800d7f3 	.word	0x0800d7f3

0800bd70 <_ZdlPv>:
 800bd70:	f000 b836 	b.w	800bde0 <free>

0800bd74 <_Znwj>:
 800bd74:	2801      	cmp	r0, #1
 800bd76:	bf38      	it	cc
 800bd78:	2001      	movcc	r0, #1
 800bd7a:	b510      	push	{r4, lr}
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	4620      	mov	r0, r4
 800bd80:	f000 f826 	bl	800bdd0 <malloc>
 800bd84:	b100      	cbz	r0, 800bd88 <_Znwj+0x14>
 800bd86:	bd10      	pop	{r4, pc}
 800bd88:	f000 f812 	bl	800bdb0 <_ZSt15get_new_handlerv>
 800bd8c:	b908      	cbnz	r0, 800bd92 <_Znwj+0x1e>
 800bd8e:	f000 f817 	bl	800bdc0 <abort>
 800bd92:	4780      	blx	r0
 800bd94:	e7f3      	b.n	800bd7e <_Znwj+0xa>

0800bd96 <_ZSt17__throw_bad_allocv>:
 800bd96:	b508      	push	{r3, lr}
 800bd98:	f000 f812 	bl	800bdc0 <abort>

0800bd9c <_ZSt19__throw_logic_errorPKc>:
 800bd9c:	b508      	push	{r3, lr}
 800bd9e:	f000 f80f 	bl	800bdc0 <abort>

0800bda2 <_ZSt20__throw_length_errorPKc>:
 800bda2:	b508      	push	{r3, lr}
 800bda4:	f000 f80c 	bl	800bdc0 <abort>

0800bda8 <_ZSt24__throw_out_of_range_fmtPKcz>:
 800bda8:	b40f      	push	{r0, r1, r2, r3}
 800bdaa:	b508      	push	{r3, lr}
 800bdac:	f000 f808 	bl	800bdc0 <abort>

0800bdb0 <_ZSt15get_new_handlerv>:
 800bdb0:	4b02      	ldr	r3, [pc, #8]	@ (800bdbc <_ZSt15get_new_handlerv+0xc>)
 800bdb2:	6818      	ldr	r0, [r3, #0]
 800bdb4:	f3bf 8f5b 	dmb	ish
 800bdb8:	4770      	bx	lr
 800bdba:	bf00      	nop
 800bdbc:	2000089c 	.word	0x2000089c

0800bdc0 <abort>:
 800bdc0:	b508      	push	{r3, lr}
 800bdc2:	2006      	movs	r0, #6
 800bdc4:	f000 f96c 	bl	800c0a0 <raise>
 800bdc8:	2001      	movs	r0, #1
 800bdca:	f7f9 f81d 	bl	8004e08 <_exit>
	...

0800bdd0 <malloc>:
 800bdd0:	4b02      	ldr	r3, [pc, #8]	@ (800bddc <malloc+0xc>)
 800bdd2:	4601      	mov	r1, r0
 800bdd4:	6818      	ldr	r0, [r3, #0]
 800bdd6:	f000 b82d 	b.w	800be34 <_malloc_r>
 800bdda:	bf00      	nop
 800bddc:	20000010 	.word	0x20000010

0800bde0 <free>:
 800bde0:	4b02      	ldr	r3, [pc, #8]	@ (800bdec <free+0xc>)
 800bde2:	4601      	mov	r1, r0
 800bde4:	6818      	ldr	r0, [r3, #0]
 800bde6:	f000 b9c1 	b.w	800c16c <_free_r>
 800bdea:	bf00      	nop
 800bdec:	20000010 	.word	0x20000010

0800bdf0 <sbrk_aligned>:
 800bdf0:	b570      	push	{r4, r5, r6, lr}
 800bdf2:	4e0f      	ldr	r6, [pc, #60]	@ (800be30 <sbrk_aligned+0x40>)
 800bdf4:	460c      	mov	r4, r1
 800bdf6:	6831      	ldr	r1, [r6, #0]
 800bdf8:	4605      	mov	r5, r0
 800bdfa:	b911      	cbnz	r1, 800be02 <sbrk_aligned+0x12>
 800bdfc:	f000 f96c 	bl	800c0d8 <_sbrk_r>
 800be00:	6030      	str	r0, [r6, #0]
 800be02:	4621      	mov	r1, r4
 800be04:	4628      	mov	r0, r5
 800be06:	f000 f967 	bl	800c0d8 <_sbrk_r>
 800be0a:	1c43      	adds	r3, r0, #1
 800be0c:	d103      	bne.n	800be16 <sbrk_aligned+0x26>
 800be0e:	f04f 34ff 	mov.w	r4, #4294967295
 800be12:	4620      	mov	r0, r4
 800be14:	bd70      	pop	{r4, r5, r6, pc}
 800be16:	1cc4      	adds	r4, r0, #3
 800be18:	f024 0403 	bic.w	r4, r4, #3
 800be1c:	42a0      	cmp	r0, r4
 800be1e:	d0f8      	beq.n	800be12 <sbrk_aligned+0x22>
 800be20:	1a21      	subs	r1, r4, r0
 800be22:	4628      	mov	r0, r5
 800be24:	f000 f958 	bl	800c0d8 <_sbrk_r>
 800be28:	3001      	adds	r0, #1
 800be2a:	d1f2      	bne.n	800be12 <sbrk_aligned+0x22>
 800be2c:	e7ef      	b.n	800be0e <sbrk_aligned+0x1e>
 800be2e:	bf00      	nop
 800be30:	200008a0 	.word	0x200008a0

0800be34 <_malloc_r>:
 800be34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be38:	1ccd      	adds	r5, r1, #3
 800be3a:	f025 0503 	bic.w	r5, r5, #3
 800be3e:	3508      	adds	r5, #8
 800be40:	2d0c      	cmp	r5, #12
 800be42:	bf38      	it	cc
 800be44:	250c      	movcc	r5, #12
 800be46:	2d00      	cmp	r5, #0
 800be48:	4606      	mov	r6, r0
 800be4a:	db01      	blt.n	800be50 <_malloc_r+0x1c>
 800be4c:	42a9      	cmp	r1, r5
 800be4e:	d904      	bls.n	800be5a <_malloc_r+0x26>
 800be50:	230c      	movs	r3, #12
 800be52:	6033      	str	r3, [r6, #0]
 800be54:	2000      	movs	r0, #0
 800be56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf30 <_malloc_r+0xfc>
 800be5e:	f000 f869 	bl	800bf34 <__malloc_lock>
 800be62:	f8d8 3000 	ldr.w	r3, [r8]
 800be66:	461c      	mov	r4, r3
 800be68:	bb44      	cbnz	r4, 800bebc <_malloc_r+0x88>
 800be6a:	4629      	mov	r1, r5
 800be6c:	4630      	mov	r0, r6
 800be6e:	f7ff ffbf 	bl	800bdf0 <sbrk_aligned>
 800be72:	1c43      	adds	r3, r0, #1
 800be74:	4604      	mov	r4, r0
 800be76:	d158      	bne.n	800bf2a <_malloc_r+0xf6>
 800be78:	f8d8 4000 	ldr.w	r4, [r8]
 800be7c:	4627      	mov	r7, r4
 800be7e:	2f00      	cmp	r7, #0
 800be80:	d143      	bne.n	800bf0a <_malloc_r+0xd6>
 800be82:	2c00      	cmp	r4, #0
 800be84:	d04b      	beq.n	800bf1e <_malloc_r+0xea>
 800be86:	6823      	ldr	r3, [r4, #0]
 800be88:	4639      	mov	r1, r7
 800be8a:	4630      	mov	r0, r6
 800be8c:	eb04 0903 	add.w	r9, r4, r3
 800be90:	f000 f922 	bl	800c0d8 <_sbrk_r>
 800be94:	4581      	cmp	r9, r0
 800be96:	d142      	bne.n	800bf1e <_malloc_r+0xea>
 800be98:	6821      	ldr	r1, [r4, #0]
 800be9a:	1a6d      	subs	r5, r5, r1
 800be9c:	4629      	mov	r1, r5
 800be9e:	4630      	mov	r0, r6
 800bea0:	f7ff ffa6 	bl	800bdf0 <sbrk_aligned>
 800bea4:	3001      	adds	r0, #1
 800bea6:	d03a      	beq.n	800bf1e <_malloc_r+0xea>
 800bea8:	6823      	ldr	r3, [r4, #0]
 800beaa:	442b      	add	r3, r5
 800beac:	6023      	str	r3, [r4, #0]
 800beae:	f8d8 3000 	ldr.w	r3, [r8]
 800beb2:	685a      	ldr	r2, [r3, #4]
 800beb4:	bb62      	cbnz	r2, 800bf10 <_malloc_r+0xdc>
 800beb6:	f8c8 7000 	str.w	r7, [r8]
 800beba:	e00f      	b.n	800bedc <_malloc_r+0xa8>
 800bebc:	6822      	ldr	r2, [r4, #0]
 800bebe:	1b52      	subs	r2, r2, r5
 800bec0:	d420      	bmi.n	800bf04 <_malloc_r+0xd0>
 800bec2:	2a0b      	cmp	r2, #11
 800bec4:	d917      	bls.n	800bef6 <_malloc_r+0xc2>
 800bec6:	1961      	adds	r1, r4, r5
 800bec8:	42a3      	cmp	r3, r4
 800beca:	6025      	str	r5, [r4, #0]
 800becc:	bf18      	it	ne
 800bece:	6059      	strne	r1, [r3, #4]
 800bed0:	6863      	ldr	r3, [r4, #4]
 800bed2:	bf08      	it	eq
 800bed4:	f8c8 1000 	streq.w	r1, [r8]
 800bed8:	5162      	str	r2, [r4, r5]
 800beda:	604b      	str	r3, [r1, #4]
 800bedc:	4630      	mov	r0, r6
 800bede:	f000 f82f 	bl	800bf40 <__malloc_unlock>
 800bee2:	f104 000b 	add.w	r0, r4, #11
 800bee6:	1d23      	adds	r3, r4, #4
 800bee8:	f020 0007 	bic.w	r0, r0, #7
 800beec:	1ac2      	subs	r2, r0, r3
 800beee:	bf1c      	itt	ne
 800bef0:	1a1b      	subne	r3, r3, r0
 800bef2:	50a3      	strne	r3, [r4, r2]
 800bef4:	e7af      	b.n	800be56 <_malloc_r+0x22>
 800bef6:	6862      	ldr	r2, [r4, #4]
 800bef8:	42a3      	cmp	r3, r4
 800befa:	bf0c      	ite	eq
 800befc:	f8c8 2000 	streq.w	r2, [r8]
 800bf00:	605a      	strne	r2, [r3, #4]
 800bf02:	e7eb      	b.n	800bedc <_malloc_r+0xa8>
 800bf04:	4623      	mov	r3, r4
 800bf06:	6864      	ldr	r4, [r4, #4]
 800bf08:	e7ae      	b.n	800be68 <_malloc_r+0x34>
 800bf0a:	463c      	mov	r4, r7
 800bf0c:	687f      	ldr	r7, [r7, #4]
 800bf0e:	e7b6      	b.n	800be7e <_malloc_r+0x4a>
 800bf10:	461a      	mov	r2, r3
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	42a3      	cmp	r3, r4
 800bf16:	d1fb      	bne.n	800bf10 <_malloc_r+0xdc>
 800bf18:	2300      	movs	r3, #0
 800bf1a:	6053      	str	r3, [r2, #4]
 800bf1c:	e7de      	b.n	800bedc <_malloc_r+0xa8>
 800bf1e:	230c      	movs	r3, #12
 800bf20:	6033      	str	r3, [r6, #0]
 800bf22:	4630      	mov	r0, r6
 800bf24:	f000 f80c 	bl	800bf40 <__malloc_unlock>
 800bf28:	e794      	b.n	800be54 <_malloc_r+0x20>
 800bf2a:	6005      	str	r5, [r0, #0]
 800bf2c:	e7d6      	b.n	800bedc <_malloc_r+0xa8>
 800bf2e:	bf00      	nop
 800bf30:	200008a4 	.word	0x200008a4

0800bf34 <__malloc_lock>:
 800bf34:	4801      	ldr	r0, [pc, #4]	@ (800bf3c <__malloc_lock+0x8>)
 800bf36:	f000 b909 	b.w	800c14c <__retarget_lock_acquire_recursive>
 800bf3a:	bf00      	nop
 800bf3c:	200009e4 	.word	0x200009e4

0800bf40 <__malloc_unlock>:
 800bf40:	4801      	ldr	r0, [pc, #4]	@ (800bf48 <__malloc_unlock+0x8>)
 800bf42:	f000 b904 	b.w	800c14e <__retarget_lock_release_recursive>
 800bf46:	bf00      	nop
 800bf48:	200009e4 	.word	0x200009e4

0800bf4c <siprintf>:
 800bf4c:	b40e      	push	{r1, r2, r3}
 800bf4e:	b510      	push	{r4, lr}
 800bf50:	b09d      	sub	sp, #116	@ 0x74
 800bf52:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bf54:	9002      	str	r0, [sp, #8]
 800bf56:	9006      	str	r0, [sp, #24]
 800bf58:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bf5c:	480a      	ldr	r0, [pc, #40]	@ (800bf88 <siprintf+0x3c>)
 800bf5e:	9107      	str	r1, [sp, #28]
 800bf60:	9104      	str	r1, [sp, #16]
 800bf62:	490a      	ldr	r1, [pc, #40]	@ (800bf8c <siprintf+0x40>)
 800bf64:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf68:	9105      	str	r1, [sp, #20]
 800bf6a:	2400      	movs	r4, #0
 800bf6c:	a902      	add	r1, sp, #8
 800bf6e:	6800      	ldr	r0, [r0, #0]
 800bf70:	9301      	str	r3, [sp, #4]
 800bf72:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bf74:	f000 f9a0 	bl	800c2b8 <_svfiprintf_r>
 800bf78:	9b02      	ldr	r3, [sp, #8]
 800bf7a:	701c      	strb	r4, [r3, #0]
 800bf7c:	b01d      	add	sp, #116	@ 0x74
 800bf7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf82:	b003      	add	sp, #12
 800bf84:	4770      	bx	lr
 800bf86:	bf00      	nop
 800bf88:	20000010 	.word	0x20000010
 800bf8c:	ffff0208 	.word	0xffff0208

0800bf90 <siscanf>:
 800bf90:	b40e      	push	{r1, r2, r3}
 800bf92:	b570      	push	{r4, r5, r6, lr}
 800bf94:	b09d      	sub	sp, #116	@ 0x74
 800bf96:	ac21      	add	r4, sp, #132	@ 0x84
 800bf98:	2500      	movs	r5, #0
 800bf9a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800bf9e:	f854 6b04 	ldr.w	r6, [r4], #4
 800bfa2:	f8ad 2014 	strh.w	r2, [sp, #20]
 800bfa6:	951b      	str	r5, [sp, #108]	@ 0x6c
 800bfa8:	9002      	str	r0, [sp, #8]
 800bfaa:	9006      	str	r0, [sp, #24]
 800bfac:	f7f4 f988 	bl	80002c0 <strlen>
 800bfb0:	4b0b      	ldr	r3, [pc, #44]	@ (800bfe0 <siscanf+0x50>)
 800bfb2:	9003      	str	r0, [sp, #12]
 800bfb4:	9007      	str	r0, [sp, #28]
 800bfb6:	480b      	ldr	r0, [pc, #44]	@ (800bfe4 <siscanf+0x54>)
 800bfb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bfba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bfbe:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bfc2:	4632      	mov	r2, r6
 800bfc4:	4623      	mov	r3, r4
 800bfc6:	a902      	add	r1, sp, #8
 800bfc8:	6800      	ldr	r0, [r0, #0]
 800bfca:	950f      	str	r5, [sp, #60]	@ 0x3c
 800bfcc:	9514      	str	r5, [sp, #80]	@ 0x50
 800bfce:	9401      	str	r4, [sp, #4]
 800bfd0:	f000 fac8 	bl	800c564 <__ssvfiscanf_r>
 800bfd4:	b01d      	add	sp, #116	@ 0x74
 800bfd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bfda:	b003      	add	sp, #12
 800bfdc:	4770      	bx	lr
 800bfde:	bf00      	nop
 800bfe0:	0800bfe9 	.word	0x0800bfe9
 800bfe4:	20000010 	.word	0x20000010

0800bfe8 <__seofread>:
 800bfe8:	2000      	movs	r0, #0
 800bfea:	4770      	bx	lr

0800bfec <memcmp>:
 800bfec:	b510      	push	{r4, lr}
 800bfee:	3901      	subs	r1, #1
 800bff0:	4402      	add	r2, r0
 800bff2:	4290      	cmp	r0, r2
 800bff4:	d101      	bne.n	800bffa <memcmp+0xe>
 800bff6:	2000      	movs	r0, #0
 800bff8:	e005      	b.n	800c006 <memcmp+0x1a>
 800bffa:	7803      	ldrb	r3, [r0, #0]
 800bffc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c000:	42a3      	cmp	r3, r4
 800c002:	d001      	beq.n	800c008 <memcmp+0x1c>
 800c004:	1b18      	subs	r0, r3, r4
 800c006:	bd10      	pop	{r4, pc}
 800c008:	3001      	adds	r0, #1
 800c00a:	e7f2      	b.n	800bff2 <memcmp+0x6>

0800c00c <memmove>:
 800c00c:	4288      	cmp	r0, r1
 800c00e:	b510      	push	{r4, lr}
 800c010:	eb01 0402 	add.w	r4, r1, r2
 800c014:	d902      	bls.n	800c01c <memmove+0x10>
 800c016:	4284      	cmp	r4, r0
 800c018:	4623      	mov	r3, r4
 800c01a:	d807      	bhi.n	800c02c <memmove+0x20>
 800c01c:	1e43      	subs	r3, r0, #1
 800c01e:	42a1      	cmp	r1, r4
 800c020:	d008      	beq.n	800c034 <memmove+0x28>
 800c022:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c026:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c02a:	e7f8      	b.n	800c01e <memmove+0x12>
 800c02c:	4402      	add	r2, r0
 800c02e:	4601      	mov	r1, r0
 800c030:	428a      	cmp	r2, r1
 800c032:	d100      	bne.n	800c036 <memmove+0x2a>
 800c034:	bd10      	pop	{r4, pc}
 800c036:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c03a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c03e:	e7f7      	b.n	800c030 <memmove+0x24>

0800c040 <memset>:
 800c040:	4402      	add	r2, r0
 800c042:	4603      	mov	r3, r0
 800c044:	4293      	cmp	r3, r2
 800c046:	d100      	bne.n	800c04a <memset+0xa>
 800c048:	4770      	bx	lr
 800c04a:	f803 1b01 	strb.w	r1, [r3], #1
 800c04e:	e7f9      	b.n	800c044 <memset+0x4>

0800c050 <_raise_r>:
 800c050:	291f      	cmp	r1, #31
 800c052:	b538      	push	{r3, r4, r5, lr}
 800c054:	4605      	mov	r5, r0
 800c056:	460c      	mov	r4, r1
 800c058:	d904      	bls.n	800c064 <_raise_r+0x14>
 800c05a:	2316      	movs	r3, #22
 800c05c:	6003      	str	r3, [r0, #0]
 800c05e:	f04f 30ff 	mov.w	r0, #4294967295
 800c062:	bd38      	pop	{r3, r4, r5, pc}
 800c064:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c066:	b112      	cbz	r2, 800c06e <_raise_r+0x1e>
 800c068:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c06c:	b94b      	cbnz	r3, 800c082 <_raise_r+0x32>
 800c06e:	4628      	mov	r0, r5
 800c070:	f000 f830 	bl	800c0d4 <_getpid_r>
 800c074:	4622      	mov	r2, r4
 800c076:	4601      	mov	r1, r0
 800c078:	4628      	mov	r0, r5
 800c07a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c07e:	f000 b817 	b.w	800c0b0 <_kill_r>
 800c082:	2b01      	cmp	r3, #1
 800c084:	d00a      	beq.n	800c09c <_raise_r+0x4c>
 800c086:	1c59      	adds	r1, r3, #1
 800c088:	d103      	bne.n	800c092 <_raise_r+0x42>
 800c08a:	2316      	movs	r3, #22
 800c08c:	6003      	str	r3, [r0, #0]
 800c08e:	2001      	movs	r0, #1
 800c090:	e7e7      	b.n	800c062 <_raise_r+0x12>
 800c092:	2100      	movs	r1, #0
 800c094:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c098:	4620      	mov	r0, r4
 800c09a:	4798      	blx	r3
 800c09c:	2000      	movs	r0, #0
 800c09e:	e7e0      	b.n	800c062 <_raise_r+0x12>

0800c0a0 <raise>:
 800c0a0:	4b02      	ldr	r3, [pc, #8]	@ (800c0ac <raise+0xc>)
 800c0a2:	4601      	mov	r1, r0
 800c0a4:	6818      	ldr	r0, [r3, #0]
 800c0a6:	f7ff bfd3 	b.w	800c050 <_raise_r>
 800c0aa:	bf00      	nop
 800c0ac:	20000010 	.word	0x20000010

0800c0b0 <_kill_r>:
 800c0b0:	b538      	push	{r3, r4, r5, lr}
 800c0b2:	4d07      	ldr	r5, [pc, #28]	@ (800c0d0 <_kill_r+0x20>)
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	4604      	mov	r4, r0
 800c0b8:	4608      	mov	r0, r1
 800c0ba:	4611      	mov	r1, r2
 800c0bc:	602b      	str	r3, [r5, #0]
 800c0be:	f7f8 fe93 	bl	8004de8 <_kill>
 800c0c2:	1c43      	adds	r3, r0, #1
 800c0c4:	d102      	bne.n	800c0cc <_kill_r+0x1c>
 800c0c6:	682b      	ldr	r3, [r5, #0]
 800c0c8:	b103      	cbz	r3, 800c0cc <_kill_r+0x1c>
 800c0ca:	6023      	str	r3, [r4, #0]
 800c0cc:	bd38      	pop	{r3, r4, r5, pc}
 800c0ce:	bf00      	nop
 800c0d0:	200009e0 	.word	0x200009e0

0800c0d4 <_getpid_r>:
 800c0d4:	f7f8 be80 	b.w	8004dd8 <_getpid>

0800c0d8 <_sbrk_r>:
 800c0d8:	b538      	push	{r3, r4, r5, lr}
 800c0da:	4d06      	ldr	r5, [pc, #24]	@ (800c0f4 <_sbrk_r+0x1c>)
 800c0dc:	2300      	movs	r3, #0
 800c0de:	4604      	mov	r4, r0
 800c0e0:	4608      	mov	r0, r1
 800c0e2:	602b      	str	r3, [r5, #0]
 800c0e4:	f7f8 fe9c 	bl	8004e20 <_sbrk>
 800c0e8:	1c43      	adds	r3, r0, #1
 800c0ea:	d102      	bne.n	800c0f2 <_sbrk_r+0x1a>
 800c0ec:	682b      	ldr	r3, [r5, #0]
 800c0ee:	b103      	cbz	r3, 800c0f2 <_sbrk_r+0x1a>
 800c0f0:	6023      	str	r3, [r4, #0]
 800c0f2:	bd38      	pop	{r3, r4, r5, pc}
 800c0f4:	200009e0 	.word	0x200009e0

0800c0f8 <__errno>:
 800c0f8:	4b01      	ldr	r3, [pc, #4]	@ (800c100 <__errno+0x8>)
 800c0fa:	6818      	ldr	r0, [r3, #0]
 800c0fc:	4770      	bx	lr
 800c0fe:	bf00      	nop
 800c100:	20000010 	.word	0x20000010

0800c104 <__libc_init_array>:
 800c104:	b570      	push	{r4, r5, r6, lr}
 800c106:	4d0d      	ldr	r5, [pc, #52]	@ (800c13c <__libc_init_array+0x38>)
 800c108:	4c0d      	ldr	r4, [pc, #52]	@ (800c140 <__libc_init_array+0x3c>)
 800c10a:	1b64      	subs	r4, r4, r5
 800c10c:	10a4      	asrs	r4, r4, #2
 800c10e:	2600      	movs	r6, #0
 800c110:	42a6      	cmp	r6, r4
 800c112:	d109      	bne.n	800c128 <__libc_init_array+0x24>
 800c114:	4d0b      	ldr	r5, [pc, #44]	@ (800c144 <__libc_init_array+0x40>)
 800c116:	4c0c      	ldr	r4, [pc, #48]	@ (800c148 <__libc_init_array+0x44>)
 800c118:	f001 f80a 	bl	800d130 <_init>
 800c11c:	1b64      	subs	r4, r4, r5
 800c11e:	10a4      	asrs	r4, r4, #2
 800c120:	2600      	movs	r6, #0
 800c122:	42a6      	cmp	r6, r4
 800c124:	d105      	bne.n	800c132 <__libc_init_array+0x2e>
 800c126:	bd70      	pop	{r4, r5, r6, pc}
 800c128:	f855 3b04 	ldr.w	r3, [r5], #4
 800c12c:	4798      	blx	r3
 800c12e:	3601      	adds	r6, #1
 800c130:	e7ee      	b.n	800c110 <__libc_init_array+0xc>
 800c132:	f855 3b04 	ldr.w	r3, [r5], #4
 800c136:	4798      	blx	r3
 800c138:	3601      	adds	r6, #1
 800c13a:	e7f2      	b.n	800c122 <__libc_init_array+0x1e>
 800c13c:	0800d97c 	.word	0x0800d97c
 800c140:	0800d97c 	.word	0x0800d97c
 800c144:	0800d97c 	.word	0x0800d97c
 800c148:	0800d984 	.word	0x0800d984

0800c14c <__retarget_lock_acquire_recursive>:
 800c14c:	4770      	bx	lr

0800c14e <__retarget_lock_release_recursive>:
 800c14e:	4770      	bx	lr

0800c150 <memcpy>:
 800c150:	440a      	add	r2, r1
 800c152:	4291      	cmp	r1, r2
 800c154:	f100 33ff 	add.w	r3, r0, #4294967295
 800c158:	d100      	bne.n	800c15c <memcpy+0xc>
 800c15a:	4770      	bx	lr
 800c15c:	b510      	push	{r4, lr}
 800c15e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c162:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c166:	4291      	cmp	r1, r2
 800c168:	d1f9      	bne.n	800c15e <memcpy+0xe>
 800c16a:	bd10      	pop	{r4, pc}

0800c16c <_free_r>:
 800c16c:	b538      	push	{r3, r4, r5, lr}
 800c16e:	4605      	mov	r5, r0
 800c170:	2900      	cmp	r1, #0
 800c172:	d041      	beq.n	800c1f8 <_free_r+0x8c>
 800c174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c178:	1f0c      	subs	r4, r1, #4
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	bfb8      	it	lt
 800c17e:	18e4      	addlt	r4, r4, r3
 800c180:	f7ff fed8 	bl	800bf34 <__malloc_lock>
 800c184:	4a1d      	ldr	r2, [pc, #116]	@ (800c1fc <_free_r+0x90>)
 800c186:	6813      	ldr	r3, [r2, #0]
 800c188:	b933      	cbnz	r3, 800c198 <_free_r+0x2c>
 800c18a:	6063      	str	r3, [r4, #4]
 800c18c:	6014      	str	r4, [r2, #0]
 800c18e:	4628      	mov	r0, r5
 800c190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c194:	f7ff bed4 	b.w	800bf40 <__malloc_unlock>
 800c198:	42a3      	cmp	r3, r4
 800c19a:	d908      	bls.n	800c1ae <_free_r+0x42>
 800c19c:	6820      	ldr	r0, [r4, #0]
 800c19e:	1821      	adds	r1, r4, r0
 800c1a0:	428b      	cmp	r3, r1
 800c1a2:	bf01      	itttt	eq
 800c1a4:	6819      	ldreq	r1, [r3, #0]
 800c1a6:	685b      	ldreq	r3, [r3, #4]
 800c1a8:	1809      	addeq	r1, r1, r0
 800c1aa:	6021      	streq	r1, [r4, #0]
 800c1ac:	e7ed      	b.n	800c18a <_free_r+0x1e>
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	b10b      	cbz	r3, 800c1b8 <_free_r+0x4c>
 800c1b4:	42a3      	cmp	r3, r4
 800c1b6:	d9fa      	bls.n	800c1ae <_free_r+0x42>
 800c1b8:	6811      	ldr	r1, [r2, #0]
 800c1ba:	1850      	adds	r0, r2, r1
 800c1bc:	42a0      	cmp	r0, r4
 800c1be:	d10b      	bne.n	800c1d8 <_free_r+0x6c>
 800c1c0:	6820      	ldr	r0, [r4, #0]
 800c1c2:	4401      	add	r1, r0
 800c1c4:	1850      	adds	r0, r2, r1
 800c1c6:	4283      	cmp	r3, r0
 800c1c8:	6011      	str	r1, [r2, #0]
 800c1ca:	d1e0      	bne.n	800c18e <_free_r+0x22>
 800c1cc:	6818      	ldr	r0, [r3, #0]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	6053      	str	r3, [r2, #4]
 800c1d2:	4408      	add	r0, r1
 800c1d4:	6010      	str	r0, [r2, #0]
 800c1d6:	e7da      	b.n	800c18e <_free_r+0x22>
 800c1d8:	d902      	bls.n	800c1e0 <_free_r+0x74>
 800c1da:	230c      	movs	r3, #12
 800c1dc:	602b      	str	r3, [r5, #0]
 800c1de:	e7d6      	b.n	800c18e <_free_r+0x22>
 800c1e0:	6820      	ldr	r0, [r4, #0]
 800c1e2:	1821      	adds	r1, r4, r0
 800c1e4:	428b      	cmp	r3, r1
 800c1e6:	bf04      	itt	eq
 800c1e8:	6819      	ldreq	r1, [r3, #0]
 800c1ea:	685b      	ldreq	r3, [r3, #4]
 800c1ec:	6063      	str	r3, [r4, #4]
 800c1ee:	bf04      	itt	eq
 800c1f0:	1809      	addeq	r1, r1, r0
 800c1f2:	6021      	streq	r1, [r4, #0]
 800c1f4:	6054      	str	r4, [r2, #4]
 800c1f6:	e7ca      	b.n	800c18e <_free_r+0x22>
 800c1f8:	bd38      	pop	{r3, r4, r5, pc}
 800c1fa:	bf00      	nop
 800c1fc:	200008a4 	.word	0x200008a4

0800c200 <__ssputs_r>:
 800c200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c204:	688e      	ldr	r6, [r1, #8]
 800c206:	461f      	mov	r7, r3
 800c208:	42be      	cmp	r6, r7
 800c20a:	680b      	ldr	r3, [r1, #0]
 800c20c:	4682      	mov	sl, r0
 800c20e:	460c      	mov	r4, r1
 800c210:	4690      	mov	r8, r2
 800c212:	d82d      	bhi.n	800c270 <__ssputs_r+0x70>
 800c214:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c218:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c21c:	d026      	beq.n	800c26c <__ssputs_r+0x6c>
 800c21e:	6965      	ldr	r5, [r4, #20]
 800c220:	6909      	ldr	r1, [r1, #16]
 800c222:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c226:	eba3 0901 	sub.w	r9, r3, r1
 800c22a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c22e:	1c7b      	adds	r3, r7, #1
 800c230:	444b      	add	r3, r9
 800c232:	106d      	asrs	r5, r5, #1
 800c234:	429d      	cmp	r5, r3
 800c236:	bf38      	it	cc
 800c238:	461d      	movcc	r5, r3
 800c23a:	0553      	lsls	r3, r2, #21
 800c23c:	d527      	bpl.n	800c28e <__ssputs_r+0x8e>
 800c23e:	4629      	mov	r1, r5
 800c240:	f7ff fdf8 	bl	800be34 <_malloc_r>
 800c244:	4606      	mov	r6, r0
 800c246:	b360      	cbz	r0, 800c2a2 <__ssputs_r+0xa2>
 800c248:	6921      	ldr	r1, [r4, #16]
 800c24a:	464a      	mov	r2, r9
 800c24c:	f7ff ff80 	bl	800c150 <memcpy>
 800c250:	89a3      	ldrh	r3, [r4, #12]
 800c252:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c25a:	81a3      	strh	r3, [r4, #12]
 800c25c:	6126      	str	r6, [r4, #16]
 800c25e:	6165      	str	r5, [r4, #20]
 800c260:	444e      	add	r6, r9
 800c262:	eba5 0509 	sub.w	r5, r5, r9
 800c266:	6026      	str	r6, [r4, #0]
 800c268:	60a5      	str	r5, [r4, #8]
 800c26a:	463e      	mov	r6, r7
 800c26c:	42be      	cmp	r6, r7
 800c26e:	d900      	bls.n	800c272 <__ssputs_r+0x72>
 800c270:	463e      	mov	r6, r7
 800c272:	6820      	ldr	r0, [r4, #0]
 800c274:	4632      	mov	r2, r6
 800c276:	4641      	mov	r1, r8
 800c278:	f7ff fec8 	bl	800c00c <memmove>
 800c27c:	68a3      	ldr	r3, [r4, #8]
 800c27e:	1b9b      	subs	r3, r3, r6
 800c280:	60a3      	str	r3, [r4, #8]
 800c282:	6823      	ldr	r3, [r4, #0]
 800c284:	4433      	add	r3, r6
 800c286:	6023      	str	r3, [r4, #0]
 800c288:	2000      	movs	r0, #0
 800c28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c28e:	462a      	mov	r2, r5
 800c290:	f000 fe2b 	bl	800ceea <_realloc_r>
 800c294:	4606      	mov	r6, r0
 800c296:	2800      	cmp	r0, #0
 800c298:	d1e0      	bne.n	800c25c <__ssputs_r+0x5c>
 800c29a:	6921      	ldr	r1, [r4, #16]
 800c29c:	4650      	mov	r0, sl
 800c29e:	f7ff ff65 	bl	800c16c <_free_r>
 800c2a2:	230c      	movs	r3, #12
 800c2a4:	f8ca 3000 	str.w	r3, [sl]
 800c2a8:	89a3      	ldrh	r3, [r4, #12]
 800c2aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2ae:	81a3      	strh	r3, [r4, #12]
 800c2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b4:	e7e9      	b.n	800c28a <__ssputs_r+0x8a>
	...

0800c2b8 <_svfiprintf_r>:
 800c2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2bc:	4698      	mov	r8, r3
 800c2be:	898b      	ldrh	r3, [r1, #12]
 800c2c0:	061b      	lsls	r3, r3, #24
 800c2c2:	b09d      	sub	sp, #116	@ 0x74
 800c2c4:	4607      	mov	r7, r0
 800c2c6:	460d      	mov	r5, r1
 800c2c8:	4614      	mov	r4, r2
 800c2ca:	d510      	bpl.n	800c2ee <_svfiprintf_r+0x36>
 800c2cc:	690b      	ldr	r3, [r1, #16]
 800c2ce:	b973      	cbnz	r3, 800c2ee <_svfiprintf_r+0x36>
 800c2d0:	2140      	movs	r1, #64	@ 0x40
 800c2d2:	f7ff fdaf 	bl	800be34 <_malloc_r>
 800c2d6:	6028      	str	r0, [r5, #0]
 800c2d8:	6128      	str	r0, [r5, #16]
 800c2da:	b930      	cbnz	r0, 800c2ea <_svfiprintf_r+0x32>
 800c2dc:	230c      	movs	r3, #12
 800c2de:	603b      	str	r3, [r7, #0]
 800c2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e4:	b01d      	add	sp, #116	@ 0x74
 800c2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ea:	2340      	movs	r3, #64	@ 0x40
 800c2ec:	616b      	str	r3, [r5, #20]
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2f2:	2320      	movs	r3, #32
 800c2f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2fc:	2330      	movs	r3, #48	@ 0x30
 800c2fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c49c <_svfiprintf_r+0x1e4>
 800c302:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c306:	f04f 0901 	mov.w	r9, #1
 800c30a:	4623      	mov	r3, r4
 800c30c:	469a      	mov	sl, r3
 800c30e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c312:	b10a      	cbz	r2, 800c318 <_svfiprintf_r+0x60>
 800c314:	2a25      	cmp	r2, #37	@ 0x25
 800c316:	d1f9      	bne.n	800c30c <_svfiprintf_r+0x54>
 800c318:	ebba 0b04 	subs.w	fp, sl, r4
 800c31c:	d00b      	beq.n	800c336 <_svfiprintf_r+0x7e>
 800c31e:	465b      	mov	r3, fp
 800c320:	4622      	mov	r2, r4
 800c322:	4629      	mov	r1, r5
 800c324:	4638      	mov	r0, r7
 800c326:	f7ff ff6b 	bl	800c200 <__ssputs_r>
 800c32a:	3001      	adds	r0, #1
 800c32c:	f000 80a7 	beq.w	800c47e <_svfiprintf_r+0x1c6>
 800c330:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c332:	445a      	add	r2, fp
 800c334:	9209      	str	r2, [sp, #36]	@ 0x24
 800c336:	f89a 3000 	ldrb.w	r3, [sl]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	f000 809f 	beq.w	800c47e <_svfiprintf_r+0x1c6>
 800c340:	2300      	movs	r3, #0
 800c342:	f04f 32ff 	mov.w	r2, #4294967295
 800c346:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c34a:	f10a 0a01 	add.w	sl, sl, #1
 800c34e:	9304      	str	r3, [sp, #16]
 800c350:	9307      	str	r3, [sp, #28]
 800c352:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c356:	931a      	str	r3, [sp, #104]	@ 0x68
 800c358:	4654      	mov	r4, sl
 800c35a:	2205      	movs	r2, #5
 800c35c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c360:	484e      	ldr	r0, [pc, #312]	@ (800c49c <_svfiprintf_r+0x1e4>)
 800c362:	f7f3 ff5d 	bl	8000220 <memchr>
 800c366:	9a04      	ldr	r2, [sp, #16]
 800c368:	b9d8      	cbnz	r0, 800c3a2 <_svfiprintf_r+0xea>
 800c36a:	06d0      	lsls	r0, r2, #27
 800c36c:	bf44      	itt	mi
 800c36e:	2320      	movmi	r3, #32
 800c370:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c374:	0711      	lsls	r1, r2, #28
 800c376:	bf44      	itt	mi
 800c378:	232b      	movmi	r3, #43	@ 0x2b
 800c37a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c37e:	f89a 3000 	ldrb.w	r3, [sl]
 800c382:	2b2a      	cmp	r3, #42	@ 0x2a
 800c384:	d015      	beq.n	800c3b2 <_svfiprintf_r+0xfa>
 800c386:	9a07      	ldr	r2, [sp, #28]
 800c388:	4654      	mov	r4, sl
 800c38a:	2000      	movs	r0, #0
 800c38c:	f04f 0c0a 	mov.w	ip, #10
 800c390:	4621      	mov	r1, r4
 800c392:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c396:	3b30      	subs	r3, #48	@ 0x30
 800c398:	2b09      	cmp	r3, #9
 800c39a:	d94b      	bls.n	800c434 <_svfiprintf_r+0x17c>
 800c39c:	b1b0      	cbz	r0, 800c3cc <_svfiprintf_r+0x114>
 800c39e:	9207      	str	r2, [sp, #28]
 800c3a0:	e014      	b.n	800c3cc <_svfiprintf_r+0x114>
 800c3a2:	eba0 0308 	sub.w	r3, r0, r8
 800c3a6:	fa09 f303 	lsl.w	r3, r9, r3
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	9304      	str	r3, [sp, #16]
 800c3ae:	46a2      	mov	sl, r4
 800c3b0:	e7d2      	b.n	800c358 <_svfiprintf_r+0xa0>
 800c3b2:	9b03      	ldr	r3, [sp, #12]
 800c3b4:	1d19      	adds	r1, r3, #4
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	9103      	str	r1, [sp, #12]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	bfbb      	ittet	lt
 800c3be:	425b      	neglt	r3, r3
 800c3c0:	f042 0202 	orrlt.w	r2, r2, #2
 800c3c4:	9307      	strge	r3, [sp, #28]
 800c3c6:	9307      	strlt	r3, [sp, #28]
 800c3c8:	bfb8      	it	lt
 800c3ca:	9204      	strlt	r2, [sp, #16]
 800c3cc:	7823      	ldrb	r3, [r4, #0]
 800c3ce:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3d0:	d10a      	bne.n	800c3e8 <_svfiprintf_r+0x130>
 800c3d2:	7863      	ldrb	r3, [r4, #1]
 800c3d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3d6:	d132      	bne.n	800c43e <_svfiprintf_r+0x186>
 800c3d8:	9b03      	ldr	r3, [sp, #12]
 800c3da:	1d1a      	adds	r2, r3, #4
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	9203      	str	r2, [sp, #12]
 800c3e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3e4:	3402      	adds	r4, #2
 800c3e6:	9305      	str	r3, [sp, #20]
 800c3e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c4ac <_svfiprintf_r+0x1f4>
 800c3ec:	7821      	ldrb	r1, [r4, #0]
 800c3ee:	2203      	movs	r2, #3
 800c3f0:	4650      	mov	r0, sl
 800c3f2:	f7f3 ff15 	bl	8000220 <memchr>
 800c3f6:	b138      	cbz	r0, 800c408 <_svfiprintf_r+0x150>
 800c3f8:	9b04      	ldr	r3, [sp, #16]
 800c3fa:	eba0 000a 	sub.w	r0, r0, sl
 800c3fe:	2240      	movs	r2, #64	@ 0x40
 800c400:	4082      	lsls	r2, r0
 800c402:	4313      	orrs	r3, r2
 800c404:	3401      	adds	r4, #1
 800c406:	9304      	str	r3, [sp, #16]
 800c408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c40c:	4824      	ldr	r0, [pc, #144]	@ (800c4a0 <_svfiprintf_r+0x1e8>)
 800c40e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c412:	2206      	movs	r2, #6
 800c414:	f7f3 ff04 	bl	8000220 <memchr>
 800c418:	2800      	cmp	r0, #0
 800c41a:	d036      	beq.n	800c48a <_svfiprintf_r+0x1d2>
 800c41c:	4b21      	ldr	r3, [pc, #132]	@ (800c4a4 <_svfiprintf_r+0x1ec>)
 800c41e:	bb1b      	cbnz	r3, 800c468 <_svfiprintf_r+0x1b0>
 800c420:	9b03      	ldr	r3, [sp, #12]
 800c422:	3307      	adds	r3, #7
 800c424:	f023 0307 	bic.w	r3, r3, #7
 800c428:	3308      	adds	r3, #8
 800c42a:	9303      	str	r3, [sp, #12]
 800c42c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c42e:	4433      	add	r3, r6
 800c430:	9309      	str	r3, [sp, #36]	@ 0x24
 800c432:	e76a      	b.n	800c30a <_svfiprintf_r+0x52>
 800c434:	fb0c 3202 	mla	r2, ip, r2, r3
 800c438:	460c      	mov	r4, r1
 800c43a:	2001      	movs	r0, #1
 800c43c:	e7a8      	b.n	800c390 <_svfiprintf_r+0xd8>
 800c43e:	2300      	movs	r3, #0
 800c440:	3401      	adds	r4, #1
 800c442:	9305      	str	r3, [sp, #20]
 800c444:	4619      	mov	r1, r3
 800c446:	f04f 0c0a 	mov.w	ip, #10
 800c44a:	4620      	mov	r0, r4
 800c44c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c450:	3a30      	subs	r2, #48	@ 0x30
 800c452:	2a09      	cmp	r2, #9
 800c454:	d903      	bls.n	800c45e <_svfiprintf_r+0x1a6>
 800c456:	2b00      	cmp	r3, #0
 800c458:	d0c6      	beq.n	800c3e8 <_svfiprintf_r+0x130>
 800c45a:	9105      	str	r1, [sp, #20]
 800c45c:	e7c4      	b.n	800c3e8 <_svfiprintf_r+0x130>
 800c45e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c462:	4604      	mov	r4, r0
 800c464:	2301      	movs	r3, #1
 800c466:	e7f0      	b.n	800c44a <_svfiprintf_r+0x192>
 800c468:	ab03      	add	r3, sp, #12
 800c46a:	9300      	str	r3, [sp, #0]
 800c46c:	462a      	mov	r2, r5
 800c46e:	4b0e      	ldr	r3, [pc, #56]	@ (800c4a8 <_svfiprintf_r+0x1f0>)
 800c470:	a904      	add	r1, sp, #16
 800c472:	4638      	mov	r0, r7
 800c474:	f3af 8000 	nop.w
 800c478:	1c42      	adds	r2, r0, #1
 800c47a:	4606      	mov	r6, r0
 800c47c:	d1d6      	bne.n	800c42c <_svfiprintf_r+0x174>
 800c47e:	89ab      	ldrh	r3, [r5, #12]
 800c480:	065b      	lsls	r3, r3, #25
 800c482:	f53f af2d 	bmi.w	800c2e0 <_svfiprintf_r+0x28>
 800c486:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c488:	e72c      	b.n	800c2e4 <_svfiprintf_r+0x2c>
 800c48a:	ab03      	add	r3, sp, #12
 800c48c:	9300      	str	r3, [sp, #0]
 800c48e:	462a      	mov	r2, r5
 800c490:	4b05      	ldr	r3, [pc, #20]	@ (800c4a8 <_svfiprintf_r+0x1f0>)
 800c492:	a904      	add	r1, sp, #16
 800c494:	4638      	mov	r0, r7
 800c496:	f000 fa49 	bl	800c92c <_printf_i>
 800c49a:	e7ed      	b.n	800c478 <_svfiprintf_r+0x1c0>
 800c49c:	0800d825 	.word	0x0800d825
 800c4a0:	0800d82f 	.word	0x0800d82f
 800c4a4:	00000000 	.word	0x00000000
 800c4a8:	0800c201 	.word	0x0800c201
 800c4ac:	0800d82b 	.word	0x0800d82b

0800c4b0 <_sungetc_r>:
 800c4b0:	b538      	push	{r3, r4, r5, lr}
 800c4b2:	1c4b      	adds	r3, r1, #1
 800c4b4:	4614      	mov	r4, r2
 800c4b6:	d103      	bne.n	800c4c0 <_sungetc_r+0x10>
 800c4b8:	f04f 35ff 	mov.w	r5, #4294967295
 800c4bc:	4628      	mov	r0, r5
 800c4be:	bd38      	pop	{r3, r4, r5, pc}
 800c4c0:	8993      	ldrh	r3, [r2, #12]
 800c4c2:	f023 0320 	bic.w	r3, r3, #32
 800c4c6:	8193      	strh	r3, [r2, #12]
 800c4c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c4ca:	6852      	ldr	r2, [r2, #4]
 800c4cc:	b2cd      	uxtb	r5, r1
 800c4ce:	b18b      	cbz	r3, 800c4f4 <_sungetc_r+0x44>
 800c4d0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	dd08      	ble.n	800c4e8 <_sungetc_r+0x38>
 800c4d6:	6823      	ldr	r3, [r4, #0]
 800c4d8:	1e5a      	subs	r2, r3, #1
 800c4da:	6022      	str	r2, [r4, #0]
 800c4dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c4e0:	6863      	ldr	r3, [r4, #4]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	6063      	str	r3, [r4, #4]
 800c4e6:	e7e9      	b.n	800c4bc <_sungetc_r+0xc>
 800c4e8:	4621      	mov	r1, r4
 800c4ea:	f000 fcc4 	bl	800ce76 <__submore>
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d0f1      	beq.n	800c4d6 <_sungetc_r+0x26>
 800c4f2:	e7e1      	b.n	800c4b8 <_sungetc_r+0x8>
 800c4f4:	6921      	ldr	r1, [r4, #16]
 800c4f6:	6823      	ldr	r3, [r4, #0]
 800c4f8:	b151      	cbz	r1, 800c510 <_sungetc_r+0x60>
 800c4fa:	4299      	cmp	r1, r3
 800c4fc:	d208      	bcs.n	800c510 <_sungetc_r+0x60>
 800c4fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c502:	42a9      	cmp	r1, r5
 800c504:	d104      	bne.n	800c510 <_sungetc_r+0x60>
 800c506:	3b01      	subs	r3, #1
 800c508:	3201      	adds	r2, #1
 800c50a:	6023      	str	r3, [r4, #0]
 800c50c:	6062      	str	r2, [r4, #4]
 800c50e:	e7d5      	b.n	800c4bc <_sungetc_r+0xc>
 800c510:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800c514:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c518:	6363      	str	r3, [r4, #52]	@ 0x34
 800c51a:	2303      	movs	r3, #3
 800c51c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c51e:	4623      	mov	r3, r4
 800c520:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c524:	6023      	str	r3, [r4, #0]
 800c526:	2301      	movs	r3, #1
 800c528:	e7dc      	b.n	800c4e4 <_sungetc_r+0x34>

0800c52a <__ssrefill_r>:
 800c52a:	b510      	push	{r4, lr}
 800c52c:	460c      	mov	r4, r1
 800c52e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c530:	b169      	cbz	r1, 800c54e <__ssrefill_r+0x24>
 800c532:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c536:	4299      	cmp	r1, r3
 800c538:	d001      	beq.n	800c53e <__ssrefill_r+0x14>
 800c53a:	f7ff fe17 	bl	800c16c <_free_r>
 800c53e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c540:	6063      	str	r3, [r4, #4]
 800c542:	2000      	movs	r0, #0
 800c544:	6360      	str	r0, [r4, #52]	@ 0x34
 800c546:	b113      	cbz	r3, 800c54e <__ssrefill_r+0x24>
 800c548:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c54a:	6023      	str	r3, [r4, #0]
 800c54c:	bd10      	pop	{r4, pc}
 800c54e:	6923      	ldr	r3, [r4, #16]
 800c550:	6023      	str	r3, [r4, #0]
 800c552:	2300      	movs	r3, #0
 800c554:	6063      	str	r3, [r4, #4]
 800c556:	89a3      	ldrh	r3, [r4, #12]
 800c558:	f043 0320 	orr.w	r3, r3, #32
 800c55c:	81a3      	strh	r3, [r4, #12]
 800c55e:	f04f 30ff 	mov.w	r0, #4294967295
 800c562:	e7f3      	b.n	800c54c <__ssrefill_r+0x22>

0800c564 <__ssvfiscanf_r>:
 800c564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c568:	460c      	mov	r4, r1
 800c56a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800c56e:	2100      	movs	r1, #0
 800c570:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800c574:	49a6      	ldr	r1, [pc, #664]	@ (800c810 <__ssvfiscanf_r+0x2ac>)
 800c576:	91a0      	str	r1, [sp, #640]	@ 0x280
 800c578:	f10d 0804 	add.w	r8, sp, #4
 800c57c:	49a5      	ldr	r1, [pc, #660]	@ (800c814 <__ssvfiscanf_r+0x2b0>)
 800c57e:	4fa6      	ldr	r7, [pc, #664]	@ (800c818 <__ssvfiscanf_r+0x2b4>)
 800c580:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800c584:	4606      	mov	r6, r0
 800c586:	91a1      	str	r1, [sp, #644]	@ 0x284
 800c588:	9300      	str	r3, [sp, #0]
 800c58a:	f892 9000 	ldrb.w	r9, [r2]
 800c58e:	f1b9 0f00 	cmp.w	r9, #0
 800c592:	f000 8158 	beq.w	800c846 <__ssvfiscanf_r+0x2e2>
 800c596:	f817 3009 	ldrb.w	r3, [r7, r9]
 800c59a:	f013 0308 	ands.w	r3, r3, #8
 800c59e:	f102 0501 	add.w	r5, r2, #1
 800c5a2:	d019      	beq.n	800c5d8 <__ssvfiscanf_r+0x74>
 800c5a4:	6863      	ldr	r3, [r4, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	dd0f      	ble.n	800c5ca <__ssvfiscanf_r+0x66>
 800c5aa:	6823      	ldr	r3, [r4, #0]
 800c5ac:	781a      	ldrb	r2, [r3, #0]
 800c5ae:	5cba      	ldrb	r2, [r7, r2]
 800c5b0:	0712      	lsls	r2, r2, #28
 800c5b2:	d401      	bmi.n	800c5b8 <__ssvfiscanf_r+0x54>
 800c5b4:	462a      	mov	r2, r5
 800c5b6:	e7e8      	b.n	800c58a <__ssvfiscanf_r+0x26>
 800c5b8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c5ba:	3201      	adds	r2, #1
 800c5bc:	9245      	str	r2, [sp, #276]	@ 0x114
 800c5be:	6862      	ldr	r2, [r4, #4]
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	3a01      	subs	r2, #1
 800c5c4:	6062      	str	r2, [r4, #4]
 800c5c6:	6023      	str	r3, [r4, #0]
 800c5c8:	e7ec      	b.n	800c5a4 <__ssvfiscanf_r+0x40>
 800c5ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c5cc:	4621      	mov	r1, r4
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	4798      	blx	r3
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	d0e9      	beq.n	800c5aa <__ssvfiscanf_r+0x46>
 800c5d6:	e7ed      	b.n	800c5b4 <__ssvfiscanf_r+0x50>
 800c5d8:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800c5dc:	f040 8085 	bne.w	800c6ea <__ssvfiscanf_r+0x186>
 800c5e0:	9341      	str	r3, [sp, #260]	@ 0x104
 800c5e2:	9343      	str	r3, [sp, #268]	@ 0x10c
 800c5e4:	7853      	ldrb	r3, [r2, #1]
 800c5e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5e8:	bf02      	ittt	eq
 800c5ea:	2310      	moveq	r3, #16
 800c5ec:	1c95      	addeq	r5, r2, #2
 800c5ee:	9341      	streq	r3, [sp, #260]	@ 0x104
 800c5f0:	220a      	movs	r2, #10
 800c5f2:	46aa      	mov	sl, r5
 800c5f4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c5f8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800c5fc:	2b09      	cmp	r3, #9
 800c5fe:	d91e      	bls.n	800c63e <__ssvfiscanf_r+0xda>
 800c600:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800c81c <__ssvfiscanf_r+0x2b8>
 800c604:	2203      	movs	r2, #3
 800c606:	4658      	mov	r0, fp
 800c608:	f7f3 fe0a 	bl	8000220 <memchr>
 800c60c:	b138      	cbz	r0, 800c61e <__ssvfiscanf_r+0xba>
 800c60e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c610:	eba0 000b 	sub.w	r0, r0, fp
 800c614:	2301      	movs	r3, #1
 800c616:	4083      	lsls	r3, r0
 800c618:	4313      	orrs	r3, r2
 800c61a:	9341      	str	r3, [sp, #260]	@ 0x104
 800c61c:	4655      	mov	r5, sl
 800c61e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c622:	2b78      	cmp	r3, #120	@ 0x78
 800c624:	d806      	bhi.n	800c634 <__ssvfiscanf_r+0xd0>
 800c626:	2b57      	cmp	r3, #87	@ 0x57
 800c628:	d810      	bhi.n	800c64c <__ssvfiscanf_r+0xe8>
 800c62a:	2b25      	cmp	r3, #37	@ 0x25
 800c62c:	d05d      	beq.n	800c6ea <__ssvfiscanf_r+0x186>
 800c62e:	d857      	bhi.n	800c6e0 <__ssvfiscanf_r+0x17c>
 800c630:	2b00      	cmp	r3, #0
 800c632:	d075      	beq.n	800c720 <__ssvfiscanf_r+0x1bc>
 800c634:	2303      	movs	r3, #3
 800c636:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c638:	230a      	movs	r3, #10
 800c63a:	9342      	str	r3, [sp, #264]	@ 0x108
 800c63c:	e088      	b.n	800c750 <__ssvfiscanf_r+0x1ec>
 800c63e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800c640:	fb02 1103 	mla	r1, r2, r3, r1
 800c644:	3930      	subs	r1, #48	@ 0x30
 800c646:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c648:	4655      	mov	r5, sl
 800c64a:	e7d2      	b.n	800c5f2 <__ssvfiscanf_r+0x8e>
 800c64c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800c650:	2a20      	cmp	r2, #32
 800c652:	d8ef      	bhi.n	800c634 <__ssvfiscanf_r+0xd0>
 800c654:	a101      	add	r1, pc, #4	@ (adr r1, 800c65c <__ssvfiscanf_r+0xf8>)
 800c656:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c65a:	bf00      	nop
 800c65c:	0800c72f 	.word	0x0800c72f
 800c660:	0800c635 	.word	0x0800c635
 800c664:	0800c635 	.word	0x0800c635
 800c668:	0800c789 	.word	0x0800c789
 800c66c:	0800c635 	.word	0x0800c635
 800c670:	0800c635 	.word	0x0800c635
 800c674:	0800c635 	.word	0x0800c635
 800c678:	0800c635 	.word	0x0800c635
 800c67c:	0800c635 	.word	0x0800c635
 800c680:	0800c635 	.word	0x0800c635
 800c684:	0800c635 	.word	0x0800c635
 800c688:	0800c79f 	.word	0x0800c79f
 800c68c:	0800c785 	.word	0x0800c785
 800c690:	0800c6e7 	.word	0x0800c6e7
 800c694:	0800c6e7 	.word	0x0800c6e7
 800c698:	0800c6e7 	.word	0x0800c6e7
 800c69c:	0800c635 	.word	0x0800c635
 800c6a0:	0800c741 	.word	0x0800c741
 800c6a4:	0800c635 	.word	0x0800c635
 800c6a8:	0800c635 	.word	0x0800c635
 800c6ac:	0800c635 	.word	0x0800c635
 800c6b0:	0800c635 	.word	0x0800c635
 800c6b4:	0800c7af 	.word	0x0800c7af
 800c6b8:	0800c749 	.word	0x0800c749
 800c6bc:	0800c727 	.word	0x0800c727
 800c6c0:	0800c635 	.word	0x0800c635
 800c6c4:	0800c635 	.word	0x0800c635
 800c6c8:	0800c7ab 	.word	0x0800c7ab
 800c6cc:	0800c635 	.word	0x0800c635
 800c6d0:	0800c785 	.word	0x0800c785
 800c6d4:	0800c635 	.word	0x0800c635
 800c6d8:	0800c635 	.word	0x0800c635
 800c6dc:	0800c72f 	.word	0x0800c72f
 800c6e0:	3b45      	subs	r3, #69	@ 0x45
 800c6e2:	2b02      	cmp	r3, #2
 800c6e4:	d8a6      	bhi.n	800c634 <__ssvfiscanf_r+0xd0>
 800c6e6:	2305      	movs	r3, #5
 800c6e8:	e031      	b.n	800c74e <__ssvfiscanf_r+0x1ea>
 800c6ea:	6863      	ldr	r3, [r4, #4]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	dd0d      	ble.n	800c70c <__ssvfiscanf_r+0x1a8>
 800c6f0:	6823      	ldr	r3, [r4, #0]
 800c6f2:	781a      	ldrb	r2, [r3, #0]
 800c6f4:	454a      	cmp	r2, r9
 800c6f6:	f040 80a6 	bne.w	800c846 <__ssvfiscanf_r+0x2e2>
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	6862      	ldr	r2, [r4, #4]
 800c6fe:	6023      	str	r3, [r4, #0]
 800c700:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800c702:	3a01      	subs	r2, #1
 800c704:	3301      	adds	r3, #1
 800c706:	6062      	str	r2, [r4, #4]
 800c708:	9345      	str	r3, [sp, #276]	@ 0x114
 800c70a:	e753      	b.n	800c5b4 <__ssvfiscanf_r+0x50>
 800c70c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c70e:	4621      	mov	r1, r4
 800c710:	4630      	mov	r0, r6
 800c712:	4798      	blx	r3
 800c714:	2800      	cmp	r0, #0
 800c716:	d0eb      	beq.n	800c6f0 <__ssvfiscanf_r+0x18c>
 800c718:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c71a:	2800      	cmp	r0, #0
 800c71c:	f040 808b 	bne.w	800c836 <__ssvfiscanf_r+0x2d2>
 800c720:	f04f 30ff 	mov.w	r0, #4294967295
 800c724:	e08b      	b.n	800c83e <__ssvfiscanf_r+0x2da>
 800c726:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c728:	f042 0220 	orr.w	r2, r2, #32
 800c72c:	9241      	str	r2, [sp, #260]	@ 0x104
 800c72e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c730:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c734:	9241      	str	r2, [sp, #260]	@ 0x104
 800c736:	2210      	movs	r2, #16
 800c738:	2b6e      	cmp	r3, #110	@ 0x6e
 800c73a:	9242      	str	r2, [sp, #264]	@ 0x108
 800c73c:	d902      	bls.n	800c744 <__ssvfiscanf_r+0x1e0>
 800c73e:	e005      	b.n	800c74c <__ssvfiscanf_r+0x1e8>
 800c740:	2300      	movs	r3, #0
 800c742:	9342      	str	r3, [sp, #264]	@ 0x108
 800c744:	2303      	movs	r3, #3
 800c746:	e002      	b.n	800c74e <__ssvfiscanf_r+0x1ea>
 800c748:	2308      	movs	r3, #8
 800c74a:	9342      	str	r3, [sp, #264]	@ 0x108
 800c74c:	2304      	movs	r3, #4
 800c74e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c750:	6863      	ldr	r3, [r4, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	dd39      	ble.n	800c7ca <__ssvfiscanf_r+0x266>
 800c756:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c758:	0659      	lsls	r1, r3, #25
 800c75a:	d404      	bmi.n	800c766 <__ssvfiscanf_r+0x202>
 800c75c:	6823      	ldr	r3, [r4, #0]
 800c75e:	781a      	ldrb	r2, [r3, #0]
 800c760:	5cba      	ldrb	r2, [r7, r2]
 800c762:	0712      	lsls	r2, r2, #28
 800c764:	d438      	bmi.n	800c7d8 <__ssvfiscanf_r+0x274>
 800c766:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800c768:	2b02      	cmp	r3, #2
 800c76a:	dc47      	bgt.n	800c7fc <__ssvfiscanf_r+0x298>
 800c76c:	466b      	mov	r3, sp
 800c76e:	4622      	mov	r2, r4
 800c770:	a941      	add	r1, sp, #260	@ 0x104
 800c772:	4630      	mov	r0, r6
 800c774:	f000 f9f8 	bl	800cb68 <_scanf_chars>
 800c778:	2801      	cmp	r0, #1
 800c77a:	d064      	beq.n	800c846 <__ssvfiscanf_r+0x2e2>
 800c77c:	2802      	cmp	r0, #2
 800c77e:	f47f af19 	bne.w	800c5b4 <__ssvfiscanf_r+0x50>
 800c782:	e7c9      	b.n	800c718 <__ssvfiscanf_r+0x1b4>
 800c784:	220a      	movs	r2, #10
 800c786:	e7d7      	b.n	800c738 <__ssvfiscanf_r+0x1d4>
 800c788:	4629      	mov	r1, r5
 800c78a:	4640      	mov	r0, r8
 800c78c:	f000 fb3a 	bl	800ce04 <__sccl>
 800c790:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c796:	9341      	str	r3, [sp, #260]	@ 0x104
 800c798:	4605      	mov	r5, r0
 800c79a:	2301      	movs	r3, #1
 800c79c:	e7d7      	b.n	800c74e <__ssvfiscanf_r+0x1ea>
 800c79e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c7a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7a4:	9341      	str	r3, [sp, #260]	@ 0x104
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	e7d1      	b.n	800c74e <__ssvfiscanf_r+0x1ea>
 800c7aa:	2302      	movs	r3, #2
 800c7ac:	e7cf      	b.n	800c74e <__ssvfiscanf_r+0x1ea>
 800c7ae:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800c7b0:	06c3      	lsls	r3, r0, #27
 800c7b2:	f53f aeff 	bmi.w	800c5b4 <__ssvfiscanf_r+0x50>
 800c7b6:	9b00      	ldr	r3, [sp, #0]
 800c7b8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c7ba:	1d19      	adds	r1, r3, #4
 800c7bc:	9100      	str	r1, [sp, #0]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	07c0      	lsls	r0, r0, #31
 800c7c2:	bf4c      	ite	mi
 800c7c4:	801a      	strhmi	r2, [r3, #0]
 800c7c6:	601a      	strpl	r2, [r3, #0]
 800c7c8:	e6f4      	b.n	800c5b4 <__ssvfiscanf_r+0x50>
 800c7ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c7cc:	4621      	mov	r1, r4
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	4798      	blx	r3
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	d0bf      	beq.n	800c756 <__ssvfiscanf_r+0x1f2>
 800c7d6:	e79f      	b.n	800c718 <__ssvfiscanf_r+0x1b4>
 800c7d8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c7da:	3201      	adds	r2, #1
 800c7dc:	9245      	str	r2, [sp, #276]	@ 0x114
 800c7de:	6862      	ldr	r2, [r4, #4]
 800c7e0:	3a01      	subs	r2, #1
 800c7e2:	2a00      	cmp	r2, #0
 800c7e4:	6062      	str	r2, [r4, #4]
 800c7e6:	dd02      	ble.n	800c7ee <__ssvfiscanf_r+0x28a>
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	6023      	str	r3, [r4, #0]
 800c7ec:	e7b6      	b.n	800c75c <__ssvfiscanf_r+0x1f8>
 800c7ee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c7f0:	4621      	mov	r1, r4
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	4798      	blx	r3
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d0b0      	beq.n	800c75c <__ssvfiscanf_r+0x1f8>
 800c7fa:	e78d      	b.n	800c718 <__ssvfiscanf_r+0x1b4>
 800c7fc:	2b04      	cmp	r3, #4
 800c7fe:	dc0f      	bgt.n	800c820 <__ssvfiscanf_r+0x2bc>
 800c800:	466b      	mov	r3, sp
 800c802:	4622      	mov	r2, r4
 800c804:	a941      	add	r1, sp, #260	@ 0x104
 800c806:	4630      	mov	r0, r6
 800c808:	f000 fa08 	bl	800cc1c <_scanf_i>
 800c80c:	e7b4      	b.n	800c778 <__ssvfiscanf_r+0x214>
 800c80e:	bf00      	nop
 800c810:	0800c4b1 	.word	0x0800c4b1
 800c814:	0800c52b 	.word	0x0800c52b
 800c818:	0800d874 	.word	0x0800d874
 800c81c:	0800d82b 	.word	0x0800d82b
 800c820:	4b0a      	ldr	r3, [pc, #40]	@ (800c84c <__ssvfiscanf_r+0x2e8>)
 800c822:	2b00      	cmp	r3, #0
 800c824:	f43f aec6 	beq.w	800c5b4 <__ssvfiscanf_r+0x50>
 800c828:	466b      	mov	r3, sp
 800c82a:	4622      	mov	r2, r4
 800c82c:	a941      	add	r1, sp, #260	@ 0x104
 800c82e:	4630      	mov	r0, r6
 800c830:	f3af 8000 	nop.w
 800c834:	e7a0      	b.n	800c778 <__ssvfiscanf_r+0x214>
 800c836:	89a3      	ldrh	r3, [r4, #12]
 800c838:	065b      	lsls	r3, r3, #25
 800c83a:	f53f af71 	bmi.w	800c720 <__ssvfiscanf_r+0x1bc>
 800c83e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800c842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c846:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c848:	e7f9      	b.n	800c83e <__ssvfiscanf_r+0x2da>
 800c84a:	bf00      	nop
 800c84c:	00000000 	.word	0x00000000

0800c850 <_printf_common>:
 800c850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c854:	4616      	mov	r6, r2
 800c856:	4698      	mov	r8, r3
 800c858:	688a      	ldr	r2, [r1, #8]
 800c85a:	690b      	ldr	r3, [r1, #16]
 800c85c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c860:	4293      	cmp	r3, r2
 800c862:	bfb8      	it	lt
 800c864:	4613      	movlt	r3, r2
 800c866:	6033      	str	r3, [r6, #0]
 800c868:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c86c:	4607      	mov	r7, r0
 800c86e:	460c      	mov	r4, r1
 800c870:	b10a      	cbz	r2, 800c876 <_printf_common+0x26>
 800c872:	3301      	adds	r3, #1
 800c874:	6033      	str	r3, [r6, #0]
 800c876:	6823      	ldr	r3, [r4, #0]
 800c878:	0699      	lsls	r1, r3, #26
 800c87a:	bf42      	ittt	mi
 800c87c:	6833      	ldrmi	r3, [r6, #0]
 800c87e:	3302      	addmi	r3, #2
 800c880:	6033      	strmi	r3, [r6, #0]
 800c882:	6825      	ldr	r5, [r4, #0]
 800c884:	f015 0506 	ands.w	r5, r5, #6
 800c888:	d106      	bne.n	800c898 <_printf_common+0x48>
 800c88a:	f104 0a19 	add.w	sl, r4, #25
 800c88e:	68e3      	ldr	r3, [r4, #12]
 800c890:	6832      	ldr	r2, [r6, #0]
 800c892:	1a9b      	subs	r3, r3, r2
 800c894:	42ab      	cmp	r3, r5
 800c896:	dc26      	bgt.n	800c8e6 <_printf_common+0x96>
 800c898:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c89c:	6822      	ldr	r2, [r4, #0]
 800c89e:	3b00      	subs	r3, #0
 800c8a0:	bf18      	it	ne
 800c8a2:	2301      	movne	r3, #1
 800c8a4:	0692      	lsls	r2, r2, #26
 800c8a6:	d42b      	bmi.n	800c900 <_printf_common+0xb0>
 800c8a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c8ac:	4641      	mov	r1, r8
 800c8ae:	4638      	mov	r0, r7
 800c8b0:	47c8      	blx	r9
 800c8b2:	3001      	adds	r0, #1
 800c8b4:	d01e      	beq.n	800c8f4 <_printf_common+0xa4>
 800c8b6:	6823      	ldr	r3, [r4, #0]
 800c8b8:	6922      	ldr	r2, [r4, #16]
 800c8ba:	f003 0306 	and.w	r3, r3, #6
 800c8be:	2b04      	cmp	r3, #4
 800c8c0:	bf02      	ittt	eq
 800c8c2:	68e5      	ldreq	r5, [r4, #12]
 800c8c4:	6833      	ldreq	r3, [r6, #0]
 800c8c6:	1aed      	subeq	r5, r5, r3
 800c8c8:	68a3      	ldr	r3, [r4, #8]
 800c8ca:	bf0c      	ite	eq
 800c8cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8d0:	2500      	movne	r5, #0
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	bfc4      	itt	gt
 800c8d6:	1a9b      	subgt	r3, r3, r2
 800c8d8:	18ed      	addgt	r5, r5, r3
 800c8da:	2600      	movs	r6, #0
 800c8dc:	341a      	adds	r4, #26
 800c8de:	42b5      	cmp	r5, r6
 800c8e0:	d11a      	bne.n	800c918 <_printf_common+0xc8>
 800c8e2:	2000      	movs	r0, #0
 800c8e4:	e008      	b.n	800c8f8 <_printf_common+0xa8>
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	4652      	mov	r2, sl
 800c8ea:	4641      	mov	r1, r8
 800c8ec:	4638      	mov	r0, r7
 800c8ee:	47c8      	blx	r9
 800c8f0:	3001      	adds	r0, #1
 800c8f2:	d103      	bne.n	800c8fc <_printf_common+0xac>
 800c8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8fc:	3501      	adds	r5, #1
 800c8fe:	e7c6      	b.n	800c88e <_printf_common+0x3e>
 800c900:	18e1      	adds	r1, r4, r3
 800c902:	1c5a      	adds	r2, r3, #1
 800c904:	2030      	movs	r0, #48	@ 0x30
 800c906:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c90a:	4422      	add	r2, r4
 800c90c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c910:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c914:	3302      	adds	r3, #2
 800c916:	e7c7      	b.n	800c8a8 <_printf_common+0x58>
 800c918:	2301      	movs	r3, #1
 800c91a:	4622      	mov	r2, r4
 800c91c:	4641      	mov	r1, r8
 800c91e:	4638      	mov	r0, r7
 800c920:	47c8      	blx	r9
 800c922:	3001      	adds	r0, #1
 800c924:	d0e6      	beq.n	800c8f4 <_printf_common+0xa4>
 800c926:	3601      	adds	r6, #1
 800c928:	e7d9      	b.n	800c8de <_printf_common+0x8e>
	...

0800c92c <_printf_i>:
 800c92c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c930:	7e0f      	ldrb	r7, [r1, #24]
 800c932:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c934:	2f78      	cmp	r7, #120	@ 0x78
 800c936:	4691      	mov	r9, r2
 800c938:	4680      	mov	r8, r0
 800c93a:	460c      	mov	r4, r1
 800c93c:	469a      	mov	sl, r3
 800c93e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c942:	d807      	bhi.n	800c954 <_printf_i+0x28>
 800c944:	2f62      	cmp	r7, #98	@ 0x62
 800c946:	d80a      	bhi.n	800c95e <_printf_i+0x32>
 800c948:	2f00      	cmp	r7, #0
 800c94a:	f000 80d1 	beq.w	800caf0 <_printf_i+0x1c4>
 800c94e:	2f58      	cmp	r7, #88	@ 0x58
 800c950:	f000 80b8 	beq.w	800cac4 <_printf_i+0x198>
 800c954:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c958:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c95c:	e03a      	b.n	800c9d4 <_printf_i+0xa8>
 800c95e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c962:	2b15      	cmp	r3, #21
 800c964:	d8f6      	bhi.n	800c954 <_printf_i+0x28>
 800c966:	a101      	add	r1, pc, #4	@ (adr r1, 800c96c <_printf_i+0x40>)
 800c968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c96c:	0800c9c5 	.word	0x0800c9c5
 800c970:	0800c9d9 	.word	0x0800c9d9
 800c974:	0800c955 	.word	0x0800c955
 800c978:	0800c955 	.word	0x0800c955
 800c97c:	0800c955 	.word	0x0800c955
 800c980:	0800c955 	.word	0x0800c955
 800c984:	0800c9d9 	.word	0x0800c9d9
 800c988:	0800c955 	.word	0x0800c955
 800c98c:	0800c955 	.word	0x0800c955
 800c990:	0800c955 	.word	0x0800c955
 800c994:	0800c955 	.word	0x0800c955
 800c998:	0800cad7 	.word	0x0800cad7
 800c99c:	0800ca03 	.word	0x0800ca03
 800c9a0:	0800ca91 	.word	0x0800ca91
 800c9a4:	0800c955 	.word	0x0800c955
 800c9a8:	0800c955 	.word	0x0800c955
 800c9ac:	0800caf9 	.word	0x0800caf9
 800c9b0:	0800c955 	.word	0x0800c955
 800c9b4:	0800ca03 	.word	0x0800ca03
 800c9b8:	0800c955 	.word	0x0800c955
 800c9bc:	0800c955 	.word	0x0800c955
 800c9c0:	0800ca99 	.word	0x0800ca99
 800c9c4:	6833      	ldr	r3, [r6, #0]
 800c9c6:	1d1a      	adds	r2, r3, #4
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	6032      	str	r2, [r6, #0]
 800c9cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c9d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	e09c      	b.n	800cb12 <_printf_i+0x1e6>
 800c9d8:	6833      	ldr	r3, [r6, #0]
 800c9da:	6820      	ldr	r0, [r4, #0]
 800c9dc:	1d19      	adds	r1, r3, #4
 800c9de:	6031      	str	r1, [r6, #0]
 800c9e0:	0606      	lsls	r6, r0, #24
 800c9e2:	d501      	bpl.n	800c9e8 <_printf_i+0xbc>
 800c9e4:	681d      	ldr	r5, [r3, #0]
 800c9e6:	e003      	b.n	800c9f0 <_printf_i+0xc4>
 800c9e8:	0645      	lsls	r5, r0, #25
 800c9ea:	d5fb      	bpl.n	800c9e4 <_printf_i+0xb8>
 800c9ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c9f0:	2d00      	cmp	r5, #0
 800c9f2:	da03      	bge.n	800c9fc <_printf_i+0xd0>
 800c9f4:	232d      	movs	r3, #45	@ 0x2d
 800c9f6:	426d      	negs	r5, r5
 800c9f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9fc:	4858      	ldr	r0, [pc, #352]	@ (800cb60 <_printf_i+0x234>)
 800c9fe:	230a      	movs	r3, #10
 800ca00:	e011      	b.n	800ca26 <_printf_i+0xfa>
 800ca02:	6821      	ldr	r1, [r4, #0]
 800ca04:	6833      	ldr	r3, [r6, #0]
 800ca06:	0608      	lsls	r0, r1, #24
 800ca08:	f853 5b04 	ldr.w	r5, [r3], #4
 800ca0c:	d402      	bmi.n	800ca14 <_printf_i+0xe8>
 800ca0e:	0649      	lsls	r1, r1, #25
 800ca10:	bf48      	it	mi
 800ca12:	b2ad      	uxthmi	r5, r5
 800ca14:	2f6f      	cmp	r7, #111	@ 0x6f
 800ca16:	4852      	ldr	r0, [pc, #328]	@ (800cb60 <_printf_i+0x234>)
 800ca18:	6033      	str	r3, [r6, #0]
 800ca1a:	bf14      	ite	ne
 800ca1c:	230a      	movne	r3, #10
 800ca1e:	2308      	moveq	r3, #8
 800ca20:	2100      	movs	r1, #0
 800ca22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ca26:	6866      	ldr	r6, [r4, #4]
 800ca28:	60a6      	str	r6, [r4, #8]
 800ca2a:	2e00      	cmp	r6, #0
 800ca2c:	db05      	blt.n	800ca3a <_printf_i+0x10e>
 800ca2e:	6821      	ldr	r1, [r4, #0]
 800ca30:	432e      	orrs	r6, r5
 800ca32:	f021 0104 	bic.w	r1, r1, #4
 800ca36:	6021      	str	r1, [r4, #0]
 800ca38:	d04b      	beq.n	800cad2 <_printf_i+0x1a6>
 800ca3a:	4616      	mov	r6, r2
 800ca3c:	fbb5 f1f3 	udiv	r1, r5, r3
 800ca40:	fb03 5711 	mls	r7, r3, r1, r5
 800ca44:	5dc7      	ldrb	r7, [r0, r7]
 800ca46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca4a:	462f      	mov	r7, r5
 800ca4c:	42bb      	cmp	r3, r7
 800ca4e:	460d      	mov	r5, r1
 800ca50:	d9f4      	bls.n	800ca3c <_printf_i+0x110>
 800ca52:	2b08      	cmp	r3, #8
 800ca54:	d10b      	bne.n	800ca6e <_printf_i+0x142>
 800ca56:	6823      	ldr	r3, [r4, #0]
 800ca58:	07df      	lsls	r7, r3, #31
 800ca5a:	d508      	bpl.n	800ca6e <_printf_i+0x142>
 800ca5c:	6923      	ldr	r3, [r4, #16]
 800ca5e:	6861      	ldr	r1, [r4, #4]
 800ca60:	4299      	cmp	r1, r3
 800ca62:	bfde      	ittt	le
 800ca64:	2330      	movle	r3, #48	@ 0x30
 800ca66:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ca6e:	1b92      	subs	r2, r2, r6
 800ca70:	6122      	str	r2, [r4, #16]
 800ca72:	f8cd a000 	str.w	sl, [sp]
 800ca76:	464b      	mov	r3, r9
 800ca78:	aa03      	add	r2, sp, #12
 800ca7a:	4621      	mov	r1, r4
 800ca7c:	4640      	mov	r0, r8
 800ca7e:	f7ff fee7 	bl	800c850 <_printf_common>
 800ca82:	3001      	adds	r0, #1
 800ca84:	d14a      	bne.n	800cb1c <_printf_i+0x1f0>
 800ca86:	f04f 30ff 	mov.w	r0, #4294967295
 800ca8a:	b004      	add	sp, #16
 800ca8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca90:	6823      	ldr	r3, [r4, #0]
 800ca92:	f043 0320 	orr.w	r3, r3, #32
 800ca96:	6023      	str	r3, [r4, #0]
 800ca98:	4832      	ldr	r0, [pc, #200]	@ (800cb64 <_printf_i+0x238>)
 800ca9a:	2778      	movs	r7, #120	@ 0x78
 800ca9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800caa0:	6823      	ldr	r3, [r4, #0]
 800caa2:	6831      	ldr	r1, [r6, #0]
 800caa4:	061f      	lsls	r7, r3, #24
 800caa6:	f851 5b04 	ldr.w	r5, [r1], #4
 800caaa:	d402      	bmi.n	800cab2 <_printf_i+0x186>
 800caac:	065f      	lsls	r7, r3, #25
 800caae:	bf48      	it	mi
 800cab0:	b2ad      	uxthmi	r5, r5
 800cab2:	6031      	str	r1, [r6, #0]
 800cab4:	07d9      	lsls	r1, r3, #31
 800cab6:	bf44      	itt	mi
 800cab8:	f043 0320 	orrmi.w	r3, r3, #32
 800cabc:	6023      	strmi	r3, [r4, #0]
 800cabe:	b11d      	cbz	r5, 800cac8 <_printf_i+0x19c>
 800cac0:	2310      	movs	r3, #16
 800cac2:	e7ad      	b.n	800ca20 <_printf_i+0xf4>
 800cac4:	4826      	ldr	r0, [pc, #152]	@ (800cb60 <_printf_i+0x234>)
 800cac6:	e7e9      	b.n	800ca9c <_printf_i+0x170>
 800cac8:	6823      	ldr	r3, [r4, #0]
 800caca:	f023 0320 	bic.w	r3, r3, #32
 800cace:	6023      	str	r3, [r4, #0]
 800cad0:	e7f6      	b.n	800cac0 <_printf_i+0x194>
 800cad2:	4616      	mov	r6, r2
 800cad4:	e7bd      	b.n	800ca52 <_printf_i+0x126>
 800cad6:	6833      	ldr	r3, [r6, #0]
 800cad8:	6825      	ldr	r5, [r4, #0]
 800cada:	6961      	ldr	r1, [r4, #20]
 800cadc:	1d18      	adds	r0, r3, #4
 800cade:	6030      	str	r0, [r6, #0]
 800cae0:	062e      	lsls	r6, r5, #24
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	d501      	bpl.n	800caea <_printf_i+0x1be>
 800cae6:	6019      	str	r1, [r3, #0]
 800cae8:	e002      	b.n	800caf0 <_printf_i+0x1c4>
 800caea:	0668      	lsls	r0, r5, #25
 800caec:	d5fb      	bpl.n	800cae6 <_printf_i+0x1ba>
 800caee:	8019      	strh	r1, [r3, #0]
 800caf0:	2300      	movs	r3, #0
 800caf2:	6123      	str	r3, [r4, #16]
 800caf4:	4616      	mov	r6, r2
 800caf6:	e7bc      	b.n	800ca72 <_printf_i+0x146>
 800caf8:	6833      	ldr	r3, [r6, #0]
 800cafa:	1d1a      	adds	r2, r3, #4
 800cafc:	6032      	str	r2, [r6, #0]
 800cafe:	681e      	ldr	r6, [r3, #0]
 800cb00:	6862      	ldr	r2, [r4, #4]
 800cb02:	2100      	movs	r1, #0
 800cb04:	4630      	mov	r0, r6
 800cb06:	f7f3 fb8b 	bl	8000220 <memchr>
 800cb0a:	b108      	cbz	r0, 800cb10 <_printf_i+0x1e4>
 800cb0c:	1b80      	subs	r0, r0, r6
 800cb0e:	6060      	str	r0, [r4, #4]
 800cb10:	6863      	ldr	r3, [r4, #4]
 800cb12:	6123      	str	r3, [r4, #16]
 800cb14:	2300      	movs	r3, #0
 800cb16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb1a:	e7aa      	b.n	800ca72 <_printf_i+0x146>
 800cb1c:	6923      	ldr	r3, [r4, #16]
 800cb1e:	4632      	mov	r2, r6
 800cb20:	4649      	mov	r1, r9
 800cb22:	4640      	mov	r0, r8
 800cb24:	47d0      	blx	sl
 800cb26:	3001      	adds	r0, #1
 800cb28:	d0ad      	beq.n	800ca86 <_printf_i+0x15a>
 800cb2a:	6823      	ldr	r3, [r4, #0]
 800cb2c:	079b      	lsls	r3, r3, #30
 800cb2e:	d413      	bmi.n	800cb58 <_printf_i+0x22c>
 800cb30:	68e0      	ldr	r0, [r4, #12]
 800cb32:	9b03      	ldr	r3, [sp, #12]
 800cb34:	4298      	cmp	r0, r3
 800cb36:	bfb8      	it	lt
 800cb38:	4618      	movlt	r0, r3
 800cb3a:	e7a6      	b.n	800ca8a <_printf_i+0x15e>
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	4632      	mov	r2, r6
 800cb40:	4649      	mov	r1, r9
 800cb42:	4640      	mov	r0, r8
 800cb44:	47d0      	blx	sl
 800cb46:	3001      	adds	r0, #1
 800cb48:	d09d      	beq.n	800ca86 <_printf_i+0x15a>
 800cb4a:	3501      	adds	r5, #1
 800cb4c:	68e3      	ldr	r3, [r4, #12]
 800cb4e:	9903      	ldr	r1, [sp, #12]
 800cb50:	1a5b      	subs	r3, r3, r1
 800cb52:	42ab      	cmp	r3, r5
 800cb54:	dcf2      	bgt.n	800cb3c <_printf_i+0x210>
 800cb56:	e7eb      	b.n	800cb30 <_printf_i+0x204>
 800cb58:	2500      	movs	r5, #0
 800cb5a:	f104 0619 	add.w	r6, r4, #25
 800cb5e:	e7f5      	b.n	800cb4c <_printf_i+0x220>
 800cb60:	0800d836 	.word	0x0800d836
 800cb64:	0800d847 	.word	0x0800d847

0800cb68 <_scanf_chars>:
 800cb68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb6c:	4615      	mov	r5, r2
 800cb6e:	688a      	ldr	r2, [r1, #8]
 800cb70:	4680      	mov	r8, r0
 800cb72:	460c      	mov	r4, r1
 800cb74:	b932      	cbnz	r2, 800cb84 <_scanf_chars+0x1c>
 800cb76:	698a      	ldr	r2, [r1, #24]
 800cb78:	2a00      	cmp	r2, #0
 800cb7a:	bf14      	ite	ne
 800cb7c:	f04f 32ff 	movne.w	r2, #4294967295
 800cb80:	2201      	moveq	r2, #1
 800cb82:	608a      	str	r2, [r1, #8]
 800cb84:	6822      	ldr	r2, [r4, #0]
 800cb86:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800cc18 <_scanf_chars+0xb0>
 800cb8a:	06d1      	lsls	r1, r2, #27
 800cb8c:	bf5f      	itttt	pl
 800cb8e:	681a      	ldrpl	r2, [r3, #0]
 800cb90:	1d11      	addpl	r1, r2, #4
 800cb92:	6019      	strpl	r1, [r3, #0]
 800cb94:	6816      	ldrpl	r6, [r2, #0]
 800cb96:	2700      	movs	r7, #0
 800cb98:	69a0      	ldr	r0, [r4, #24]
 800cb9a:	b188      	cbz	r0, 800cbc0 <_scanf_chars+0x58>
 800cb9c:	2801      	cmp	r0, #1
 800cb9e:	d107      	bne.n	800cbb0 <_scanf_chars+0x48>
 800cba0:	682b      	ldr	r3, [r5, #0]
 800cba2:	781a      	ldrb	r2, [r3, #0]
 800cba4:	6963      	ldr	r3, [r4, #20]
 800cba6:	5c9b      	ldrb	r3, [r3, r2]
 800cba8:	b953      	cbnz	r3, 800cbc0 <_scanf_chars+0x58>
 800cbaa:	2f00      	cmp	r7, #0
 800cbac:	d031      	beq.n	800cc12 <_scanf_chars+0xaa>
 800cbae:	e022      	b.n	800cbf6 <_scanf_chars+0x8e>
 800cbb0:	2802      	cmp	r0, #2
 800cbb2:	d120      	bne.n	800cbf6 <_scanf_chars+0x8e>
 800cbb4:	682b      	ldr	r3, [r5, #0]
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800cbbc:	071b      	lsls	r3, r3, #28
 800cbbe:	d41a      	bmi.n	800cbf6 <_scanf_chars+0x8e>
 800cbc0:	6823      	ldr	r3, [r4, #0]
 800cbc2:	06da      	lsls	r2, r3, #27
 800cbc4:	bf5e      	ittt	pl
 800cbc6:	682b      	ldrpl	r3, [r5, #0]
 800cbc8:	781b      	ldrbpl	r3, [r3, #0]
 800cbca:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cbce:	682a      	ldr	r2, [r5, #0]
 800cbd0:	686b      	ldr	r3, [r5, #4]
 800cbd2:	3201      	adds	r2, #1
 800cbd4:	602a      	str	r2, [r5, #0]
 800cbd6:	68a2      	ldr	r2, [r4, #8]
 800cbd8:	3b01      	subs	r3, #1
 800cbda:	3a01      	subs	r2, #1
 800cbdc:	606b      	str	r3, [r5, #4]
 800cbde:	3701      	adds	r7, #1
 800cbe0:	60a2      	str	r2, [r4, #8]
 800cbe2:	b142      	cbz	r2, 800cbf6 <_scanf_chars+0x8e>
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	dcd7      	bgt.n	800cb98 <_scanf_chars+0x30>
 800cbe8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cbec:	4629      	mov	r1, r5
 800cbee:	4640      	mov	r0, r8
 800cbf0:	4798      	blx	r3
 800cbf2:	2800      	cmp	r0, #0
 800cbf4:	d0d0      	beq.n	800cb98 <_scanf_chars+0x30>
 800cbf6:	6823      	ldr	r3, [r4, #0]
 800cbf8:	f013 0310 	ands.w	r3, r3, #16
 800cbfc:	d105      	bne.n	800cc0a <_scanf_chars+0xa2>
 800cbfe:	68e2      	ldr	r2, [r4, #12]
 800cc00:	3201      	adds	r2, #1
 800cc02:	60e2      	str	r2, [r4, #12]
 800cc04:	69a2      	ldr	r2, [r4, #24]
 800cc06:	b102      	cbz	r2, 800cc0a <_scanf_chars+0xa2>
 800cc08:	7033      	strb	r3, [r6, #0]
 800cc0a:	6923      	ldr	r3, [r4, #16]
 800cc0c:	443b      	add	r3, r7
 800cc0e:	6123      	str	r3, [r4, #16]
 800cc10:	2000      	movs	r0, #0
 800cc12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc16:	bf00      	nop
 800cc18:	0800d874 	.word	0x0800d874

0800cc1c <_scanf_i>:
 800cc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc20:	4698      	mov	r8, r3
 800cc22:	4b74      	ldr	r3, [pc, #464]	@ (800cdf4 <_scanf_i+0x1d8>)
 800cc24:	460c      	mov	r4, r1
 800cc26:	4682      	mov	sl, r0
 800cc28:	4616      	mov	r6, r2
 800cc2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc2e:	b087      	sub	sp, #28
 800cc30:	ab03      	add	r3, sp, #12
 800cc32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cc36:	4b70      	ldr	r3, [pc, #448]	@ (800cdf8 <_scanf_i+0x1dc>)
 800cc38:	69a1      	ldr	r1, [r4, #24]
 800cc3a:	4a70      	ldr	r2, [pc, #448]	@ (800cdfc <_scanf_i+0x1e0>)
 800cc3c:	2903      	cmp	r1, #3
 800cc3e:	bf08      	it	eq
 800cc40:	461a      	moveq	r2, r3
 800cc42:	68a3      	ldr	r3, [r4, #8]
 800cc44:	9201      	str	r2, [sp, #4]
 800cc46:	1e5a      	subs	r2, r3, #1
 800cc48:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800cc4c:	bf88      	it	hi
 800cc4e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cc52:	4627      	mov	r7, r4
 800cc54:	bf82      	ittt	hi
 800cc56:	eb03 0905 	addhi.w	r9, r3, r5
 800cc5a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800cc5e:	60a3      	strhi	r3, [r4, #8]
 800cc60:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cc64:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800cc68:	bf98      	it	ls
 800cc6a:	f04f 0900 	movls.w	r9, #0
 800cc6e:	6023      	str	r3, [r4, #0]
 800cc70:	463d      	mov	r5, r7
 800cc72:	f04f 0b00 	mov.w	fp, #0
 800cc76:	6831      	ldr	r1, [r6, #0]
 800cc78:	ab03      	add	r3, sp, #12
 800cc7a:	7809      	ldrb	r1, [r1, #0]
 800cc7c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cc80:	2202      	movs	r2, #2
 800cc82:	f7f3 facd 	bl	8000220 <memchr>
 800cc86:	b328      	cbz	r0, 800ccd4 <_scanf_i+0xb8>
 800cc88:	f1bb 0f01 	cmp.w	fp, #1
 800cc8c:	d159      	bne.n	800cd42 <_scanf_i+0x126>
 800cc8e:	6862      	ldr	r2, [r4, #4]
 800cc90:	b92a      	cbnz	r2, 800cc9e <_scanf_i+0x82>
 800cc92:	6822      	ldr	r2, [r4, #0]
 800cc94:	2108      	movs	r1, #8
 800cc96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cc9a:	6061      	str	r1, [r4, #4]
 800cc9c:	6022      	str	r2, [r4, #0]
 800cc9e:	6822      	ldr	r2, [r4, #0]
 800cca0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800cca4:	6022      	str	r2, [r4, #0]
 800cca6:	68a2      	ldr	r2, [r4, #8]
 800cca8:	1e51      	subs	r1, r2, #1
 800ccaa:	60a1      	str	r1, [r4, #8]
 800ccac:	b192      	cbz	r2, 800ccd4 <_scanf_i+0xb8>
 800ccae:	6832      	ldr	r2, [r6, #0]
 800ccb0:	1c51      	adds	r1, r2, #1
 800ccb2:	6031      	str	r1, [r6, #0]
 800ccb4:	7812      	ldrb	r2, [r2, #0]
 800ccb6:	f805 2b01 	strb.w	r2, [r5], #1
 800ccba:	6872      	ldr	r2, [r6, #4]
 800ccbc:	3a01      	subs	r2, #1
 800ccbe:	2a00      	cmp	r2, #0
 800ccc0:	6072      	str	r2, [r6, #4]
 800ccc2:	dc07      	bgt.n	800ccd4 <_scanf_i+0xb8>
 800ccc4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800ccc8:	4631      	mov	r1, r6
 800ccca:	4650      	mov	r0, sl
 800cccc:	4790      	blx	r2
 800ccce:	2800      	cmp	r0, #0
 800ccd0:	f040 8085 	bne.w	800cdde <_scanf_i+0x1c2>
 800ccd4:	f10b 0b01 	add.w	fp, fp, #1
 800ccd8:	f1bb 0f03 	cmp.w	fp, #3
 800ccdc:	d1cb      	bne.n	800cc76 <_scanf_i+0x5a>
 800ccde:	6863      	ldr	r3, [r4, #4]
 800cce0:	b90b      	cbnz	r3, 800cce6 <_scanf_i+0xca>
 800cce2:	230a      	movs	r3, #10
 800cce4:	6063      	str	r3, [r4, #4]
 800cce6:	6863      	ldr	r3, [r4, #4]
 800cce8:	4945      	ldr	r1, [pc, #276]	@ (800ce00 <_scanf_i+0x1e4>)
 800ccea:	6960      	ldr	r0, [r4, #20]
 800ccec:	1ac9      	subs	r1, r1, r3
 800ccee:	f000 f889 	bl	800ce04 <__sccl>
 800ccf2:	f04f 0b00 	mov.w	fp, #0
 800ccf6:	68a3      	ldr	r3, [r4, #8]
 800ccf8:	6822      	ldr	r2, [r4, #0]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d03d      	beq.n	800cd7a <_scanf_i+0x15e>
 800ccfe:	6831      	ldr	r1, [r6, #0]
 800cd00:	6960      	ldr	r0, [r4, #20]
 800cd02:	f891 c000 	ldrb.w	ip, [r1]
 800cd06:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	d035      	beq.n	800cd7a <_scanf_i+0x15e>
 800cd0e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800cd12:	d124      	bne.n	800cd5e <_scanf_i+0x142>
 800cd14:	0510      	lsls	r0, r2, #20
 800cd16:	d522      	bpl.n	800cd5e <_scanf_i+0x142>
 800cd18:	f10b 0b01 	add.w	fp, fp, #1
 800cd1c:	f1b9 0f00 	cmp.w	r9, #0
 800cd20:	d003      	beq.n	800cd2a <_scanf_i+0x10e>
 800cd22:	3301      	adds	r3, #1
 800cd24:	f109 39ff 	add.w	r9, r9, #4294967295
 800cd28:	60a3      	str	r3, [r4, #8]
 800cd2a:	6873      	ldr	r3, [r6, #4]
 800cd2c:	3b01      	subs	r3, #1
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	6073      	str	r3, [r6, #4]
 800cd32:	dd1b      	ble.n	800cd6c <_scanf_i+0x150>
 800cd34:	6833      	ldr	r3, [r6, #0]
 800cd36:	3301      	adds	r3, #1
 800cd38:	6033      	str	r3, [r6, #0]
 800cd3a:	68a3      	ldr	r3, [r4, #8]
 800cd3c:	3b01      	subs	r3, #1
 800cd3e:	60a3      	str	r3, [r4, #8]
 800cd40:	e7d9      	b.n	800ccf6 <_scanf_i+0xda>
 800cd42:	f1bb 0f02 	cmp.w	fp, #2
 800cd46:	d1ae      	bne.n	800cca6 <_scanf_i+0x8a>
 800cd48:	6822      	ldr	r2, [r4, #0]
 800cd4a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800cd4e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800cd52:	d1c4      	bne.n	800ccde <_scanf_i+0xc2>
 800cd54:	2110      	movs	r1, #16
 800cd56:	6061      	str	r1, [r4, #4]
 800cd58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cd5c:	e7a2      	b.n	800cca4 <_scanf_i+0x88>
 800cd5e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800cd62:	6022      	str	r2, [r4, #0]
 800cd64:	780b      	ldrb	r3, [r1, #0]
 800cd66:	f805 3b01 	strb.w	r3, [r5], #1
 800cd6a:	e7de      	b.n	800cd2a <_scanf_i+0x10e>
 800cd6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cd70:	4631      	mov	r1, r6
 800cd72:	4650      	mov	r0, sl
 800cd74:	4798      	blx	r3
 800cd76:	2800      	cmp	r0, #0
 800cd78:	d0df      	beq.n	800cd3a <_scanf_i+0x11e>
 800cd7a:	6823      	ldr	r3, [r4, #0]
 800cd7c:	05d9      	lsls	r1, r3, #23
 800cd7e:	d50d      	bpl.n	800cd9c <_scanf_i+0x180>
 800cd80:	42bd      	cmp	r5, r7
 800cd82:	d909      	bls.n	800cd98 <_scanf_i+0x17c>
 800cd84:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cd88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd8c:	4632      	mov	r2, r6
 800cd8e:	4650      	mov	r0, sl
 800cd90:	4798      	blx	r3
 800cd92:	f105 39ff 	add.w	r9, r5, #4294967295
 800cd96:	464d      	mov	r5, r9
 800cd98:	42bd      	cmp	r5, r7
 800cd9a:	d028      	beq.n	800cdee <_scanf_i+0x1d2>
 800cd9c:	6822      	ldr	r2, [r4, #0]
 800cd9e:	f012 0210 	ands.w	r2, r2, #16
 800cda2:	d113      	bne.n	800cdcc <_scanf_i+0x1b0>
 800cda4:	702a      	strb	r2, [r5, #0]
 800cda6:	6863      	ldr	r3, [r4, #4]
 800cda8:	9e01      	ldr	r6, [sp, #4]
 800cdaa:	4639      	mov	r1, r7
 800cdac:	4650      	mov	r0, sl
 800cdae:	47b0      	blx	r6
 800cdb0:	f8d8 3000 	ldr.w	r3, [r8]
 800cdb4:	6821      	ldr	r1, [r4, #0]
 800cdb6:	1d1a      	adds	r2, r3, #4
 800cdb8:	f8c8 2000 	str.w	r2, [r8]
 800cdbc:	f011 0f20 	tst.w	r1, #32
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	d00f      	beq.n	800cde4 <_scanf_i+0x1c8>
 800cdc4:	6018      	str	r0, [r3, #0]
 800cdc6:	68e3      	ldr	r3, [r4, #12]
 800cdc8:	3301      	adds	r3, #1
 800cdca:	60e3      	str	r3, [r4, #12]
 800cdcc:	6923      	ldr	r3, [r4, #16]
 800cdce:	1bed      	subs	r5, r5, r7
 800cdd0:	445d      	add	r5, fp
 800cdd2:	442b      	add	r3, r5
 800cdd4:	6123      	str	r3, [r4, #16]
 800cdd6:	2000      	movs	r0, #0
 800cdd8:	b007      	add	sp, #28
 800cdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdde:	f04f 0b00 	mov.w	fp, #0
 800cde2:	e7ca      	b.n	800cd7a <_scanf_i+0x15e>
 800cde4:	07ca      	lsls	r2, r1, #31
 800cde6:	bf4c      	ite	mi
 800cde8:	8018      	strhmi	r0, [r3, #0]
 800cdea:	6018      	strpl	r0, [r3, #0]
 800cdec:	e7eb      	b.n	800cdc6 <_scanf_i+0x1aa>
 800cdee:	2001      	movs	r0, #1
 800cdf0:	e7f2      	b.n	800cdd8 <_scanf_i+0x1bc>
 800cdf2:	bf00      	nop
 800cdf4:	0800d728 	.word	0x0800d728
 800cdf8:	0800d03d 	.word	0x0800d03d
 800cdfc:	0800d11d 	.word	0x0800d11d
 800ce00:	0800d868 	.word	0x0800d868

0800ce04 <__sccl>:
 800ce04:	b570      	push	{r4, r5, r6, lr}
 800ce06:	780b      	ldrb	r3, [r1, #0]
 800ce08:	4604      	mov	r4, r0
 800ce0a:	2b5e      	cmp	r3, #94	@ 0x5e
 800ce0c:	bf0b      	itete	eq
 800ce0e:	784b      	ldrbeq	r3, [r1, #1]
 800ce10:	1c4a      	addne	r2, r1, #1
 800ce12:	1c8a      	addeq	r2, r1, #2
 800ce14:	2100      	movne	r1, #0
 800ce16:	bf08      	it	eq
 800ce18:	2101      	moveq	r1, #1
 800ce1a:	3801      	subs	r0, #1
 800ce1c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800ce20:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ce24:	42a8      	cmp	r0, r5
 800ce26:	d1fb      	bne.n	800ce20 <__sccl+0x1c>
 800ce28:	b90b      	cbnz	r3, 800ce2e <__sccl+0x2a>
 800ce2a:	1e50      	subs	r0, r2, #1
 800ce2c:	bd70      	pop	{r4, r5, r6, pc}
 800ce2e:	f081 0101 	eor.w	r1, r1, #1
 800ce32:	54e1      	strb	r1, [r4, r3]
 800ce34:	4610      	mov	r0, r2
 800ce36:	4602      	mov	r2, r0
 800ce38:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ce3c:	2d2d      	cmp	r5, #45	@ 0x2d
 800ce3e:	d005      	beq.n	800ce4c <__sccl+0x48>
 800ce40:	2d5d      	cmp	r5, #93	@ 0x5d
 800ce42:	d016      	beq.n	800ce72 <__sccl+0x6e>
 800ce44:	2d00      	cmp	r5, #0
 800ce46:	d0f1      	beq.n	800ce2c <__sccl+0x28>
 800ce48:	462b      	mov	r3, r5
 800ce4a:	e7f2      	b.n	800ce32 <__sccl+0x2e>
 800ce4c:	7846      	ldrb	r6, [r0, #1]
 800ce4e:	2e5d      	cmp	r6, #93	@ 0x5d
 800ce50:	d0fa      	beq.n	800ce48 <__sccl+0x44>
 800ce52:	42b3      	cmp	r3, r6
 800ce54:	dcf8      	bgt.n	800ce48 <__sccl+0x44>
 800ce56:	3002      	adds	r0, #2
 800ce58:	461a      	mov	r2, r3
 800ce5a:	3201      	adds	r2, #1
 800ce5c:	4296      	cmp	r6, r2
 800ce5e:	54a1      	strb	r1, [r4, r2]
 800ce60:	dcfb      	bgt.n	800ce5a <__sccl+0x56>
 800ce62:	1af2      	subs	r2, r6, r3
 800ce64:	3a01      	subs	r2, #1
 800ce66:	1c5d      	adds	r5, r3, #1
 800ce68:	42b3      	cmp	r3, r6
 800ce6a:	bfa8      	it	ge
 800ce6c:	2200      	movge	r2, #0
 800ce6e:	18ab      	adds	r3, r5, r2
 800ce70:	e7e1      	b.n	800ce36 <__sccl+0x32>
 800ce72:	4610      	mov	r0, r2
 800ce74:	e7da      	b.n	800ce2c <__sccl+0x28>

0800ce76 <__submore>:
 800ce76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce7a:	460c      	mov	r4, r1
 800ce7c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ce7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ce82:	4299      	cmp	r1, r3
 800ce84:	d11d      	bne.n	800cec2 <__submore+0x4c>
 800ce86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ce8a:	f7fe ffd3 	bl	800be34 <_malloc_r>
 800ce8e:	b918      	cbnz	r0, 800ce98 <__submore+0x22>
 800ce90:	f04f 30ff 	mov.w	r0, #4294967295
 800ce94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce9c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ce9e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800cea2:	6360      	str	r0, [r4, #52]	@ 0x34
 800cea4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800cea8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ceac:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800ceb0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ceb4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800ceb8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800cebc:	6020      	str	r0, [r4, #0]
 800cebe:	2000      	movs	r0, #0
 800cec0:	e7e8      	b.n	800ce94 <__submore+0x1e>
 800cec2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800cec4:	0077      	lsls	r7, r6, #1
 800cec6:	463a      	mov	r2, r7
 800cec8:	f000 f80f 	bl	800ceea <_realloc_r>
 800cecc:	4605      	mov	r5, r0
 800cece:	2800      	cmp	r0, #0
 800ced0:	d0de      	beq.n	800ce90 <__submore+0x1a>
 800ced2:	eb00 0806 	add.w	r8, r0, r6
 800ced6:	4601      	mov	r1, r0
 800ced8:	4632      	mov	r2, r6
 800ceda:	4640      	mov	r0, r8
 800cedc:	f7ff f938 	bl	800c150 <memcpy>
 800cee0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800cee4:	f8c4 8000 	str.w	r8, [r4]
 800cee8:	e7e9      	b.n	800cebe <__submore+0x48>

0800ceea <_realloc_r>:
 800ceea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceee:	4607      	mov	r7, r0
 800cef0:	4614      	mov	r4, r2
 800cef2:	460d      	mov	r5, r1
 800cef4:	b921      	cbnz	r1, 800cf00 <_realloc_r+0x16>
 800cef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cefa:	4611      	mov	r1, r2
 800cefc:	f7fe bf9a 	b.w	800be34 <_malloc_r>
 800cf00:	b92a      	cbnz	r2, 800cf0e <_realloc_r+0x24>
 800cf02:	f7ff f933 	bl	800c16c <_free_r>
 800cf06:	4625      	mov	r5, r4
 800cf08:	4628      	mov	r0, r5
 800cf0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf0e:	f000 f907 	bl	800d120 <_malloc_usable_size_r>
 800cf12:	4284      	cmp	r4, r0
 800cf14:	4606      	mov	r6, r0
 800cf16:	d802      	bhi.n	800cf1e <_realloc_r+0x34>
 800cf18:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf1c:	d8f4      	bhi.n	800cf08 <_realloc_r+0x1e>
 800cf1e:	4621      	mov	r1, r4
 800cf20:	4638      	mov	r0, r7
 800cf22:	f7fe ff87 	bl	800be34 <_malloc_r>
 800cf26:	4680      	mov	r8, r0
 800cf28:	b908      	cbnz	r0, 800cf2e <_realloc_r+0x44>
 800cf2a:	4645      	mov	r5, r8
 800cf2c:	e7ec      	b.n	800cf08 <_realloc_r+0x1e>
 800cf2e:	42b4      	cmp	r4, r6
 800cf30:	4622      	mov	r2, r4
 800cf32:	4629      	mov	r1, r5
 800cf34:	bf28      	it	cs
 800cf36:	4632      	movcs	r2, r6
 800cf38:	f7ff f90a 	bl	800c150 <memcpy>
 800cf3c:	4629      	mov	r1, r5
 800cf3e:	4638      	mov	r0, r7
 800cf40:	f7ff f914 	bl	800c16c <_free_r>
 800cf44:	e7f1      	b.n	800cf2a <_realloc_r+0x40>
	...

0800cf48 <_strtol_l.isra.0>:
 800cf48:	2b24      	cmp	r3, #36	@ 0x24
 800cf4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf4e:	4686      	mov	lr, r0
 800cf50:	4690      	mov	r8, r2
 800cf52:	d801      	bhi.n	800cf58 <_strtol_l.isra.0+0x10>
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d106      	bne.n	800cf66 <_strtol_l.isra.0+0x1e>
 800cf58:	f7ff f8ce 	bl	800c0f8 <__errno>
 800cf5c:	2316      	movs	r3, #22
 800cf5e:	6003      	str	r3, [r0, #0]
 800cf60:	2000      	movs	r0, #0
 800cf62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf66:	4834      	ldr	r0, [pc, #208]	@ (800d038 <_strtol_l.isra.0+0xf0>)
 800cf68:	460d      	mov	r5, r1
 800cf6a:	462a      	mov	r2, r5
 800cf6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf70:	5d06      	ldrb	r6, [r0, r4]
 800cf72:	f016 0608 	ands.w	r6, r6, #8
 800cf76:	d1f8      	bne.n	800cf6a <_strtol_l.isra.0+0x22>
 800cf78:	2c2d      	cmp	r4, #45	@ 0x2d
 800cf7a:	d110      	bne.n	800cf9e <_strtol_l.isra.0+0x56>
 800cf7c:	782c      	ldrb	r4, [r5, #0]
 800cf7e:	2601      	movs	r6, #1
 800cf80:	1c95      	adds	r5, r2, #2
 800cf82:	f033 0210 	bics.w	r2, r3, #16
 800cf86:	d115      	bne.n	800cfb4 <_strtol_l.isra.0+0x6c>
 800cf88:	2c30      	cmp	r4, #48	@ 0x30
 800cf8a:	d10d      	bne.n	800cfa8 <_strtol_l.isra.0+0x60>
 800cf8c:	782a      	ldrb	r2, [r5, #0]
 800cf8e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cf92:	2a58      	cmp	r2, #88	@ 0x58
 800cf94:	d108      	bne.n	800cfa8 <_strtol_l.isra.0+0x60>
 800cf96:	786c      	ldrb	r4, [r5, #1]
 800cf98:	3502      	adds	r5, #2
 800cf9a:	2310      	movs	r3, #16
 800cf9c:	e00a      	b.n	800cfb4 <_strtol_l.isra.0+0x6c>
 800cf9e:	2c2b      	cmp	r4, #43	@ 0x2b
 800cfa0:	bf04      	itt	eq
 800cfa2:	782c      	ldrbeq	r4, [r5, #0]
 800cfa4:	1c95      	addeq	r5, r2, #2
 800cfa6:	e7ec      	b.n	800cf82 <_strtol_l.isra.0+0x3a>
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d1f6      	bne.n	800cf9a <_strtol_l.isra.0+0x52>
 800cfac:	2c30      	cmp	r4, #48	@ 0x30
 800cfae:	bf14      	ite	ne
 800cfb0:	230a      	movne	r3, #10
 800cfb2:	2308      	moveq	r3, #8
 800cfb4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cfb8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	fbbc f9f3 	udiv	r9, ip, r3
 800cfc2:	4610      	mov	r0, r2
 800cfc4:	fb03 ca19 	mls	sl, r3, r9, ip
 800cfc8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cfcc:	2f09      	cmp	r7, #9
 800cfce:	d80f      	bhi.n	800cff0 <_strtol_l.isra.0+0xa8>
 800cfd0:	463c      	mov	r4, r7
 800cfd2:	42a3      	cmp	r3, r4
 800cfd4:	dd1b      	ble.n	800d00e <_strtol_l.isra.0+0xc6>
 800cfd6:	1c57      	adds	r7, r2, #1
 800cfd8:	d007      	beq.n	800cfea <_strtol_l.isra.0+0xa2>
 800cfda:	4581      	cmp	r9, r0
 800cfdc:	d314      	bcc.n	800d008 <_strtol_l.isra.0+0xc0>
 800cfde:	d101      	bne.n	800cfe4 <_strtol_l.isra.0+0x9c>
 800cfe0:	45a2      	cmp	sl, r4
 800cfe2:	db11      	blt.n	800d008 <_strtol_l.isra.0+0xc0>
 800cfe4:	fb00 4003 	mla	r0, r0, r3, r4
 800cfe8:	2201      	movs	r2, #1
 800cfea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cfee:	e7eb      	b.n	800cfc8 <_strtol_l.isra.0+0x80>
 800cff0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cff4:	2f19      	cmp	r7, #25
 800cff6:	d801      	bhi.n	800cffc <_strtol_l.isra.0+0xb4>
 800cff8:	3c37      	subs	r4, #55	@ 0x37
 800cffa:	e7ea      	b.n	800cfd2 <_strtol_l.isra.0+0x8a>
 800cffc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d000:	2f19      	cmp	r7, #25
 800d002:	d804      	bhi.n	800d00e <_strtol_l.isra.0+0xc6>
 800d004:	3c57      	subs	r4, #87	@ 0x57
 800d006:	e7e4      	b.n	800cfd2 <_strtol_l.isra.0+0x8a>
 800d008:	f04f 32ff 	mov.w	r2, #4294967295
 800d00c:	e7ed      	b.n	800cfea <_strtol_l.isra.0+0xa2>
 800d00e:	1c53      	adds	r3, r2, #1
 800d010:	d108      	bne.n	800d024 <_strtol_l.isra.0+0xdc>
 800d012:	2322      	movs	r3, #34	@ 0x22
 800d014:	f8ce 3000 	str.w	r3, [lr]
 800d018:	4660      	mov	r0, ip
 800d01a:	f1b8 0f00 	cmp.w	r8, #0
 800d01e:	d0a0      	beq.n	800cf62 <_strtol_l.isra.0+0x1a>
 800d020:	1e69      	subs	r1, r5, #1
 800d022:	e006      	b.n	800d032 <_strtol_l.isra.0+0xea>
 800d024:	b106      	cbz	r6, 800d028 <_strtol_l.isra.0+0xe0>
 800d026:	4240      	negs	r0, r0
 800d028:	f1b8 0f00 	cmp.w	r8, #0
 800d02c:	d099      	beq.n	800cf62 <_strtol_l.isra.0+0x1a>
 800d02e:	2a00      	cmp	r2, #0
 800d030:	d1f6      	bne.n	800d020 <_strtol_l.isra.0+0xd8>
 800d032:	f8c8 1000 	str.w	r1, [r8]
 800d036:	e794      	b.n	800cf62 <_strtol_l.isra.0+0x1a>
 800d038:	0800d874 	.word	0x0800d874

0800d03c <_strtol_r>:
 800d03c:	f7ff bf84 	b.w	800cf48 <_strtol_l.isra.0>

0800d040 <_strtoul_l.isra.0>:
 800d040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d044:	4e34      	ldr	r6, [pc, #208]	@ (800d118 <_strtoul_l.isra.0+0xd8>)
 800d046:	4686      	mov	lr, r0
 800d048:	460d      	mov	r5, r1
 800d04a:	4628      	mov	r0, r5
 800d04c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d050:	5d37      	ldrb	r7, [r6, r4]
 800d052:	f017 0708 	ands.w	r7, r7, #8
 800d056:	d1f8      	bne.n	800d04a <_strtoul_l.isra.0+0xa>
 800d058:	2c2d      	cmp	r4, #45	@ 0x2d
 800d05a:	d110      	bne.n	800d07e <_strtoul_l.isra.0+0x3e>
 800d05c:	782c      	ldrb	r4, [r5, #0]
 800d05e:	2701      	movs	r7, #1
 800d060:	1c85      	adds	r5, r0, #2
 800d062:	f033 0010 	bics.w	r0, r3, #16
 800d066:	d115      	bne.n	800d094 <_strtoul_l.isra.0+0x54>
 800d068:	2c30      	cmp	r4, #48	@ 0x30
 800d06a:	d10d      	bne.n	800d088 <_strtoul_l.isra.0+0x48>
 800d06c:	7828      	ldrb	r0, [r5, #0]
 800d06e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d072:	2858      	cmp	r0, #88	@ 0x58
 800d074:	d108      	bne.n	800d088 <_strtoul_l.isra.0+0x48>
 800d076:	786c      	ldrb	r4, [r5, #1]
 800d078:	3502      	adds	r5, #2
 800d07a:	2310      	movs	r3, #16
 800d07c:	e00a      	b.n	800d094 <_strtoul_l.isra.0+0x54>
 800d07e:	2c2b      	cmp	r4, #43	@ 0x2b
 800d080:	bf04      	itt	eq
 800d082:	782c      	ldrbeq	r4, [r5, #0]
 800d084:	1c85      	addeq	r5, r0, #2
 800d086:	e7ec      	b.n	800d062 <_strtoul_l.isra.0+0x22>
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d1f6      	bne.n	800d07a <_strtoul_l.isra.0+0x3a>
 800d08c:	2c30      	cmp	r4, #48	@ 0x30
 800d08e:	bf14      	ite	ne
 800d090:	230a      	movne	r3, #10
 800d092:	2308      	moveq	r3, #8
 800d094:	f04f 38ff 	mov.w	r8, #4294967295
 800d098:	2600      	movs	r6, #0
 800d09a:	fbb8 f8f3 	udiv	r8, r8, r3
 800d09e:	fb03 f908 	mul.w	r9, r3, r8
 800d0a2:	ea6f 0909 	mvn.w	r9, r9
 800d0a6:	4630      	mov	r0, r6
 800d0a8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d0ac:	f1bc 0f09 	cmp.w	ip, #9
 800d0b0:	d810      	bhi.n	800d0d4 <_strtoul_l.isra.0+0x94>
 800d0b2:	4664      	mov	r4, ip
 800d0b4:	42a3      	cmp	r3, r4
 800d0b6:	dd1e      	ble.n	800d0f6 <_strtoul_l.isra.0+0xb6>
 800d0b8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d0bc:	d007      	beq.n	800d0ce <_strtoul_l.isra.0+0x8e>
 800d0be:	4580      	cmp	r8, r0
 800d0c0:	d316      	bcc.n	800d0f0 <_strtoul_l.isra.0+0xb0>
 800d0c2:	d101      	bne.n	800d0c8 <_strtoul_l.isra.0+0x88>
 800d0c4:	45a1      	cmp	r9, r4
 800d0c6:	db13      	blt.n	800d0f0 <_strtoul_l.isra.0+0xb0>
 800d0c8:	fb00 4003 	mla	r0, r0, r3, r4
 800d0cc:	2601      	movs	r6, #1
 800d0ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0d2:	e7e9      	b.n	800d0a8 <_strtoul_l.isra.0+0x68>
 800d0d4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d0d8:	f1bc 0f19 	cmp.w	ip, #25
 800d0dc:	d801      	bhi.n	800d0e2 <_strtoul_l.isra.0+0xa2>
 800d0de:	3c37      	subs	r4, #55	@ 0x37
 800d0e0:	e7e8      	b.n	800d0b4 <_strtoul_l.isra.0+0x74>
 800d0e2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d0e6:	f1bc 0f19 	cmp.w	ip, #25
 800d0ea:	d804      	bhi.n	800d0f6 <_strtoul_l.isra.0+0xb6>
 800d0ec:	3c57      	subs	r4, #87	@ 0x57
 800d0ee:	e7e1      	b.n	800d0b4 <_strtoul_l.isra.0+0x74>
 800d0f0:	f04f 36ff 	mov.w	r6, #4294967295
 800d0f4:	e7eb      	b.n	800d0ce <_strtoul_l.isra.0+0x8e>
 800d0f6:	1c73      	adds	r3, r6, #1
 800d0f8:	d106      	bne.n	800d108 <_strtoul_l.isra.0+0xc8>
 800d0fa:	2322      	movs	r3, #34	@ 0x22
 800d0fc:	f8ce 3000 	str.w	r3, [lr]
 800d100:	4630      	mov	r0, r6
 800d102:	b932      	cbnz	r2, 800d112 <_strtoul_l.isra.0+0xd2>
 800d104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d108:	b107      	cbz	r7, 800d10c <_strtoul_l.isra.0+0xcc>
 800d10a:	4240      	negs	r0, r0
 800d10c:	2a00      	cmp	r2, #0
 800d10e:	d0f9      	beq.n	800d104 <_strtoul_l.isra.0+0xc4>
 800d110:	b106      	cbz	r6, 800d114 <_strtoul_l.isra.0+0xd4>
 800d112:	1e69      	subs	r1, r5, #1
 800d114:	6011      	str	r1, [r2, #0]
 800d116:	e7f5      	b.n	800d104 <_strtoul_l.isra.0+0xc4>
 800d118:	0800d874 	.word	0x0800d874

0800d11c <_strtoul_r>:
 800d11c:	f7ff bf90 	b.w	800d040 <_strtoul_l.isra.0>

0800d120 <_malloc_usable_size_r>:
 800d120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d124:	1f18      	subs	r0, r3, #4
 800d126:	2b00      	cmp	r3, #0
 800d128:	bfbc      	itt	lt
 800d12a:	580b      	ldrlt	r3, [r1, r0]
 800d12c:	18c0      	addlt	r0, r0, r3
 800d12e:	4770      	bx	lr

0800d130 <_init>:
 800d130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d132:	bf00      	nop
 800d134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d136:	bc08      	pop	{r3}
 800d138:	469e      	mov	lr, r3
 800d13a:	4770      	bx	lr

0800d13c <_fini>:
 800d13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d13e:	bf00      	nop
 800d140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d142:	bc08      	pop	{r3}
 800d144:	469e      	mov	lr, r3
 800d146:	4770      	bx	lr
